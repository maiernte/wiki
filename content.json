{"meta":{"title":"天涯的维基","subtitle":"竹影扫阶尘不动 雁过寒潭水无痕<br> 达摩九载面孤壁 起行归去影留存","description":"鎏金天涯的私房笔记。<br>看，或者不看，它都在这里。","author":"鎏金天涯","url":"http://maiernte.github.io/wiki","root":"/wiki/"},"pages":[{"title":"关于本站","date":"2019-07-20T20:03:56.000Z","updated":"2019-07-22T17:31:07.000Z","comments":true,"path":"about/index.html","permalink":"http://maiernte.github.io/wiki/about/index.html","excerpt":"","text":"自从过上了极简生活，家务变得很少。对于一个巨蟹座的中年大叔，整理笔记成了我主要的挥洒精力的地方。我是笔记App的重度用户，用了两年的印象笔记，然后又五年的为知笔记，乃至尝试了新生人类惊为天人的熊掌记、Notion、等等。仍然感觉各种不爽。自从有了Hexo，终于可以定下心来，专心做笔记了。 作为不是处女座的强迫症患者，我把自己的这个笔记库部署到了两个不同的站点。内容基本一样，组织方式十分不同。 完整个人维基 心情版的博客"},{"title":"分类","date":"2019-07-20T19:59:23.000Z","updated":"2019-07-22T03:39:06.000Z","comments":false,"path":"categories/index.html","permalink":"http://maiernte.github.io/wiki/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-07-20T19:49:33.000Z","updated":"2019-07-22T03:37:51.000Z","comments":false,"path":"tags/index.html","permalink":"http://maiernte.github.io/wiki/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"JavaScript & Typescript技术摘要","slug":"IT/Code/Javascript技术摘要","date":"2019-09-14T07:32:15.000Z","updated":"2019-09-16T18:53:45.000Z","comments":true,"path":"javascript-typescript-skills.html","link":"","permalink":"http://maiernte.github.io/wiki/javascript-typescript-skills.html","excerpt":"Javasript 和 Typescript 的重要技巧。","text":"Javasript 和 Typescript 的重要技巧。 零散知识点 列举 Enum Promise 输出链条 文档 Promises chaning ✏️ 可以在 then 函数里面跑出 结果 或者 第二个 Promise 等待多个 Promise 1234let p1 = promise1let p2 = promise2const promises = Promise.all([p1, p2])return promises 声明以及定义扩展 在 *.d.ts 文件中声明类型 1234declare type Book = &#123; title: string, comment?: string&#125; 对 JavaScript 的原型进行扩展， 在一个 TS 文件进行定义和实现 123456789101112// ...path/common.tsexport &#123;&#125; // this will make it moduledeclare global &#123; interface String &#123; IsNullOrEmpty():boolean; Latex(color?:string):string; &#125;&#125;String.prototype.IsNullOrEmpty = function()&#123; return this == undefined || this == null || this == \"\"&#125; 在需要的地方引用 1234import '..path/common';let str = \"\"const is_it_empty = str.IsNullOrEmpty() 读取文本 Html5 标准按钮 1&lt;div type='file' (change)='LoadLocalFile($event)'&gt;&lt;/div&gt; Javascript 读取文本内容并转为数据库 (使用 sql.js) 1234567891011121314LoadLocalFile(file) &#123; const fileurl: File = file.target.files[0]; const reader = new FileReader(); reader.onload = () =&gt; &#123; console.log('read file:', reader.result); const buffer = reader.result; const Uints = new Uint8Array(buffer as ArrayBuffer); const db = new SQL.Database(Uints); const nodes = db.exec('SELECT * From node'); console.log(nodes); &#125;; reader.readAsArrayBuffer(fileurl); &#125; 使用nix-file-helpers 插件 文档地址 演示地址 Html 12345&lt;ion-button ngxFilePicker #filePicker=\"ngxFilePicker\" [readMode]=\"readMode\" (readStart)=\"onReadStart($event)\" (filePick)=\"onFilePicked($event)\" (readEnd)=\"onReadEnd($event)\"&gt;导入案例&lt;/ion-button&gt; 代码,读取文件 123456onFilePicked(file: ReadFile) &#123; const Uints = new Uint8Array(file.content as ArrayBuffer); const db = new SQL.Database(Uints); const nodes = db.exec('SELECT * From node'); console.log(nodes); &#125; 测试 引用第三方js文件 在 angular.json 文件的 test--&gt;scripts 中添加需要引用的文件。","categories":[{"name":"IT","slug":"IT","permalink":"http://maiernte.github.io/wiki/categories/IT/"},{"name":"Code","slug":"IT/Code","permalink":"http://maiernte.github.io/wiki/categories/IT/Code/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://maiernte.github.io/wiki/tags/Hexo/"}]},{"title":"MathJax用于易学领域","slug":"IT/skill/MathJax用于易学领域","date":"2019-08-30T08:15:28.000Z","updated":"2020-05-08T09:38:08.489Z","comments":true,"path":"mathjax-yixue-usage.html","link":"","permalink":"http://maiernte.github.io/wiki/mathjax-yixue-usage.html","excerpt":"关于利用 MathJax 和 Katex 数学公式解释器，实现易学上排六爻盘和八字盘个功能。今天实现了易学上的核心功能。有望将来能添加更多的函数，以便利各位同门以及广大易友。","text":"关于利用 MathJax 和 Katex 数学公式解释器，实现易学上排六爻盘和八字盘个功能。今天实现了易学上的核心功能。有望将来能添加更多的函数，以便利各位同门以及广大易友。 效果与演示 无法观看油管的朋友请移步B站：[使用MathJax渲染六爻和八字盘](https://www.bilibili.com/video/av66317810/) 安装和使用 首先，你需要一个支持 Markdown (简称MD) 语言格式的文本编辑器。如果不知道什么是MD的话，请参阅以下介绍： Markdown介绍及使用教程 Markdown - 简单的世界 认识与入门 Markdown Markdown 语言简约而优美，可以自由转换成pdf、word、Html 等等各种其它格式的文本。可以推送到博客、微信公众号等等。虽然算卦是一个传统的行业，我们仍然不宜固步自封。MD语言支持MathJax和Katex书写Latex数学公式，可以写出非常漂亮的数学、物理、化学方面的公式。正式的科技刊物都要求用Latex格式。 这个易学解决方案是对 MathJax 进行扩展，加入指定的易学公式，让 MathJax 解释器去完成公式渲染。它并不是一个独立的程序。需要构建在已有的MD文本编辑器之上。我使用一个文件夹存放所有的关于易学方面的MD文件，并将这个文件夹同步到 坚果云，这样就可以实现多台电脑和移动端之间的同步，而不太需要一个独立的易学软件。甚至可以将MD文件导出为HTML文件，放到我的HEXO博客上(您正在阅读的这篇博文即是例子)。 理论上所有支持Markdown语言和MathJax的文本编辑器，都可以改装。改装过程需要两段代码和一个库文件。 文本编辑器 Typora Typora 是我个人最钟爱的MD编辑器，因此这里着重介绍。如果你喜欢用别的MD编辑器，比如iAWrte等，理论上可以用同样的方式改装。(无法百分百保证) 有需要的朋友可以私下联系我。 最新的安装教程请参考华鹤易学平台文档 VSCode 同样请移步华鹤易学平台文档。那里有详细描述。 Hexo博客 🔔 注意：首先要检查自己的 Hexo 博客使用的渲染器是否默认开启了Katex或者MathJax数学插件。如果有的话需要卸载或者禁用数学插件，如果不能禁用，就必须更换Markdown渲染器。 因为系统使用的数学插件会在网页生成之前就改动数学表达，这样无法使用我提供给的函数库。我提供给博客的方案是在浏览网页的时候，即时渲染易学公式。 比如我之前用了 “hexo-renderer-markdown-it-plus” 渲染器就是强制使用 Katex 数学渲染的。 12npm un hexo-renderer-markdown-it-plus --save // 卸载npm i hexo-renderer-markdown-it --save // 更换 然后将下列代码添加到文件模版就可以了。使用 swig 模版的是在 &lt;your thems&gt;/layout/_custom/header.swig 或者 &lt;your thems&gt;/layout/index.swig 。而使用 ejs 模版的是文件 &lt;your thems&gt;/layout/layout.ejs 123456789&lt;!--前三行最好添加到 &lt;header&gt;&lt;/header&gt; 头区块中--&gt;&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.11.0/dist/katex.min.css\" &gt;&lt;script defer src=\"https://cdn.jsdelivr.net/npm/katex@0.11.0/dist/katex.min.js\" &gt;&lt;/script&gt;&lt;script defer src=\"https://cdn.jsdelivr.net/npm/katex@0.11.0/dist/contrib/auto-render.min.js\"&gt;&lt;/script&gt;&lt;script src=\"https://raw.githack.com/maiernte/img/master/libs/katexYixue.js\"&gt;&lt;/script&gt;&lt;script src=\"https://raw.githack.com/maiernte/img/master/libs/bundle.js\"&gt;&lt;/script&gt; 注意搜索 _config.yml 文件，“math”, “katex”, “mathjax” 等字样，发现有的话把他们禁用。 Gitbook 最新的安装教程请参考华鹤易学平台文档 API 参数 使用易学函数库非常简单，在经过改装的Markdown编辑器中，输入易学公式，并用两个 $ 符号将公式前后围起来即可。MD语言一般默认两个 $ 符号之间的文本是数学公式，它会调用MathJax对公式进行渲染。否则，它会认为这是普通文本，而不会做任何动作。 易学通用 命令：纳音 \\nayin{干支名称} 【干支名称】 ：就是甲子、己卯等六十甲子。 例子1：\\nayin{戊午} --&gt; $\\nayin{戊午}$ 命令：干支日历 \\timegz{时间参数}{年月日} 【时间参数】 ：例如 2020-02-21。 【年月日】 ：省略时默认为111，即显示年月日。0表示不显示，1表示显示。 例子1：\\timegz{2020-02-21} --&gt; $\\timegz{2020-02-21}$ 例子2：\\timegz{2020-02-21}{011} --&gt; $\\timegz{2020-02-21}{011}$ 六爻 命令：爻符 \\yao{爻名} 【爻名】：laoyin， laoyang，shaoyin，shaoyang， x， o， =， -， 交，重，阴，阳，0，1，2，3 例子2：\\yao{x} --&gt; $\\yao{x}$ 例子3：\\yao{shaoyin} --&gt; $\\yao{shaoyin}$ 例子4：\\yao{重} --&gt; $\\yao{重}$ 命令：六爻排盘 \\paigua{时令}{卦辞}{标识} 其中 【时令】、【卦辞】这两个参数是必须的，**【标识】**参数可以省略。 【时令】允许的格式为：“1980-1-3 08:15”、“2019年3月4日”、“申月戊寅日” 【卦辞】允许的格式为：“解之师”、“离为火”、“–==x-”、“0121100”、“阴阳阴交阴阳” 【标识】由三部分组成：ID号、简排、字符大小。格式为：guadi/s/5 「ID号」：随便一串字符，空白则默认为“gua1”。:x:不允许只有数字，因为会与参数「字符大小」混淆。如果一个文本出现多个六爻卦，则每个卦都需要指定一个ID号。否则下面的命令卦爻细节不知道具体指向哪一个卦本。 「简排」：只允许s 和 l两个英文字符的其中一个。s 表示只显示短名，如“妻财”显示为“财”，“青龙”显示为“龙”。l 则显示完整名称。留白则按照用户全局设定来显示。（参阅用户设定） 「字符大小」：允许 0 - 9 档。数字越大文字越大。默认大小为5或者用户的全局设定。 例子5： $\\paigua{1978年7月1日}{101201}{gua1}$ 效果 $$\\paigua{1978年7月1日}{101201}{gua1}$$ :pencil2: 如果文章很长，需要在指定位置重新显示一遍卦本，则可以使用重排命令。即让【时令】和【卦辞】两个参数留白，只给出【ID号】。如 \\paigua{}{}{gua1} 。留白的参数，仍然需要用大括号括起来，否则解释器会出错。 命令：卦爻细节 \\guayao{标识}{位置} 使用前提：当前文本中已经排出至少一支六爻卦。 【标识】：与排盘命令的「标识」参数等同。由ID号、简排、字符大小三个部分组成。其中「ID号」标识已经存在的六爻盘。 【位置】：格式为 “ben1”、“fu3”、“bian5” 等，分别表示「本卦初爻」、「伏卦3爻」、「变卦5爻」 例子6：\\guayao{gua1}{ben4} --&gt; $\\guayao{gua1}{ben4}$ 例子6 中给出的「ID号」为例子5中指定的ID号 “gua1”，并要求显示本卦4爻的具体信息。 八字 命令：八字排盘 \\paibazi{时间}{性别}{标识}[细节] 【时间】和【性别】参数必填，【标识】和【细节】参数可选。(如果要第二次显示已有的八字盘，则【时间】和【性别】参数可留白，只给定【标识】参数中的「ID号」) 【时间】：允许格式 “1980-1-3 08:15”、“2019年3月4日 6时3分” 【性别】：允许格式 “m”、“f”、“男”、“女”、“乾”、“坤”、 【标识】：与排盘命令的「标识」参数等同。由ID号、简排、字符大小三个部分组成。 【细节】：允许“藏干”、“长生”、“纳音”这三个中的一个或者多个，也可以留白。格式为 藏干/纳音/长生 例子7：\\paibazi{1990年5月1日 6:45}{男}{小明/s/5} $\\paibazi{1990年5月1日 6:45}{男}{小明/5}$ 例子8：重排例子7的八字盘 \\paibazi{}{}{小明/s/5}[纳音/藏干/长生] ，并要求显示藏干和纳音等信息。 $\\paibazi{}{}{小明/s/5}[纳音/藏干/长生]$ 命令：八字细节 \\bazi{标识}{类别}[细节] 使用前提：当前文本中已经排出至少一个八字盘。 【标识】：与排盘命令的「标识」参数等同。由ID号、简排、字符大小三个部分组成。其中「ID号」标识已经存在的八字命盘。 【类别】：支持 “神煞”、“大运”、“流年”、“小运” 四个选项。 【细节】：具体含义视【类别】而定。 类别为「神煞」时：「细节」为 1～ 9 的数字，表示每行列数。 类别为「大运」时： 1-9 纳音/藏干/长生/神煞 前面的数字表示第几步大运，限定 1 到 10 类别为「流年」和「小运」时： 2015 - 2019 纳音/藏干/长生/神煞 前面的数字表示年份，注意不要超过命盘的生命周期，否则会出错。「纳音/藏干/长生/神煞」可以留白，也可只显示一两项。 例子9: \\bazi{小明}{神煞}[6] 显示小明命盘的神煞，每行6列。 $\\bazi{小明}{神煞}[6]$ 例子10: \\bazi{小明}{大运}[2-3 ] 显示小明的第二到第三步大运 $\\bazi{小明}{大运}[2-3]$ 例子11: \\bazi{小明}{流年}[2017-2019 纳音/藏干/长生/神煞] 显示小明的2017到2019年的流年信息。 $\\bazi{小明}{流年}[2017-2019 纳音/藏干/长生/神煞]$ 未来与展望 我知道这篇文章介绍的工具，并非所有人都能使用。所以在不久的将来，还是要制作一个独立易学软件，以便易友在PC端和移动端都能按照传统的方式使用。但由于时间和精力原因，我无法保证完成时间。 不断完善易学函数，提供更丰富的应用细节。在用户更为广泛的MD编辑器中实现此方式。比如有道云笔记、为知笔记、印象笔记等。并争取介绍移动端(Android &amp; iOS)实现此方式。也希望在Gitbook中实现。 希望能将师父的六爻和八字讲义，『增删卜易』等著作制作成Gitbook，将精彩的卦例和名人八字建成易学数据库。这样就可以通过我的易学函数直接获取， 比如 \\paibazi{蒋介石}。 附录: 命令列表 纳音 爻符 排卦 卦爻细节 排八字 八字细节 发布 脚本文件的原始路径是https://github.com/maiernte/img/raw/master/libs/bundle.js。因为涉及到跨域问题，要通过 Gitkack 重链接，把上述路径输入到 Githack 的地址框，会得到「应用地址」和「开发地址」。 应用地址： https://rawcdn.githack.com/maiernte/img/11a1bb572a6875dbf434a7fc457ea2fdd329f7db/libs/bundle.js 开发地址： https://raw.githack.com/maiernte/img/master/libs/bundle.js 查看当前易学函数库版本 在 chrome 浏览其中打开此博文，Mac 系统中按 ⌘+⌥+I ，Windows 系统 Ctr+⇧+I，或者 Chrome 菜单栏调出 “开发者工具”，选择 Console 页面，即可显示当前易学库版本和时间。","categories":[{"name":"IT","slug":"IT","permalink":"http://maiernte.github.io/wiki/categories/IT/"},{"name":"skill","slug":"IT/skill","permalink":"http://maiernte.github.io/wiki/categories/IT/skill/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://maiernte.github.io/wiki/tags/工具/"}]},{"title":"用TypeScript编写JS函数库","slug":"IT/skill/用Typescript编写JS函数库","date":"2019-08-16T20:15:28.000Z","updated":"2019-08-24T11:30:40.000Z","comments":true,"path":"TypeScript-build-JS-Package.html","link":"","permalink":"http://maiernte.github.io/wiki/TypeScript-build-JS-Package.html","excerpt":"本文具体介绍如何用TypeScript编写JavaScript库文件，以及制作npm工具包。主要参考下面两篇文章。我也省却一步步解释，只罗列相关的代码和我遇到的坑。想知道代码含义的请参阅原帖 TypeScript第一步 如何使用Gulp构建TypeScript 从Javascript迁移到Typescript 只看相关的那一章就可以","text":"本文具体介绍如何用TypeScript编写JavaScript库文件，以及制作npm工具包。主要参考下面两篇文章。我也省却一步步解释，只罗列相关的代码和我遇到的坑。想知道代码含义的请参阅原帖 TypeScript第一步 如何使用Gulp构建TypeScript 从Javascript迁移到Typescript 只看相关的那一章就可以 安装 TypeScript 终端执行 npm install typescript -g 12$ tsc --versionVersion 3.5.3 创建工程 初始化项目 12mkdir typescript_demo &amp;&amp; cd typescript_demonpm init -y # 初始化项目，会生成 package.json 文件 安装Gulp， 并在项目根目录下新建 gulpfile.js 文件 1npm install gulp-cli gulp typescript gulp-typescript --save-dev 在命令行中执行 tsc --init 可以在当前目录中快速创建一个 tsconfig.json 文件。 安装 Browserify ：目的是把所有ts文件打包成一个单一的js文件。 1npm install browserify tsify vinyl-source-stream --save-dev Watchify、Babel和Uglify ：目的是让编译器保持运行，无需每次修改手动编译。 npm install watchify gulp-util --save-dev 1npm install watchify gulp-util --save-dev 安装 Uglify ： 将输出文件 bundle.js 压缩 1npm install gulp-uglify vinyl-buffer gulp-sourcemaps --save-dev Babel ：允许按新标准ES6编写代码，而最终会编译es05标准，兼容低版本浏览器。 1npm install babelify babel-core babel-preset-env vinyl-buffer gulp-sourcemaps --save-dev ‼️ 安装中出现了错误, 显示babelify 版本太低. 将命令改为 npm install babelify@8 就能顺利进行下去了. 编写主文件 src/main.ts (名字随便起)，在 package.json 中改为 $ “main”: “./dist/main.js”, $。创建两文件夹 src 和 dist，分别放置原文件和编译后的文件。为演示调用，再新建一个 src/greet.ts 文件 1234567# src/greet.tsdeclare function require(path: string): any;export function sayHello(name: string) &#123; console.log(ln) return `Hallo von $&#123;name&#125;`;&#125; 123456789# src/main.tsimport &#123; sayHello &#125; from \"./greet\";function showHello(idName: string, name: string) &#123; const elt = document.getElementById(idName); elt.innerText = sayHello(name);&#125;showHello(\"greeting\", \"TypeScript\"); 新建 src/index.html 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;title&gt;Hello World!&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p id=\"greeting\"&gt;Loading ...&lt;/p&gt; &lt;script src=\"bundle.js\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 修改 gulpfile.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950const gulp = require(\"gulp\");const browserify = require(\"browserify\");const source = require('vinyl-source-stream');const tsify = require(\"tsify\");const watchify = require(\"watchify\");const gutil = require(\"gulp-util\");const uglify = require('gulp-uglify');const sourcemaps = require('gulp-sourcemaps');const buffer = require('vinyl-buffer');const paths = &#123; pages: ['src/*.html']&#125;;const watchedBrowserify = watchify(browserify(&#123; basedir: '.', debug: true, entries: ['src/main.ts'], cache: &#123;&#125;, packageCache: &#123;&#125;&#125;).plugin(tsify));gulp.task(\"copy-html\", function () &#123; return gulp.src(paths.pages) .pipe(gulp.dest(\"dist\"));&#125;)function browserifyBundle() &#123; return watchedBrowserify .transform('babelify', &#123; presets: ['env'], extensions: ['.ts'] &#125;) .bundle() .pipe(source('bundle.js')) .pipe(buffer()) .pipe(sourcemaps.init(&#123; loadMaps: true &#125;)) .pipe(uglify()) .pipe(sourcemaps.write('./')) .pipe(gulp.dest(\"dist\"));&#125;gulp.task(\"browserify\", function () &#123; return browserifyBundle();&#125;)gulp.task(\"default\", gulp.series('copy-html', 'browserify'));watchedBrowserify.on(\"update\", browserifyBundle);watchedBrowserify.on(\"log\", gutil.log); 修改 tsconfig.json 123456789&#123; \"files\": [ \"src/*.ts\" ], \"compilerOptions\": &#123; \"noImplicitAny\": true, \"target\": \"es2015\" &#125;&#125; 编译并在浏览器打开 dist/index.html 12# 通过gulp编译代码npx gulp 显示器中会显示 “Hello from TypeScript” 字样。 我们看到 main.ts 调用了 greet.ts 的函数, 并生成一个 bundle.js 文件, 在 index.html 中被加载使用. 调用JavaScript文件 为了使用以前已经存在的JavaScript库文件, 在 src 下新建一个文件夹 libs 用来存放第三方JavaScript. projectRoot ├── src/ │ ├── libs/ │ │ ├── lunar.js │ ├── main.ts │ └── greet.ts │ ├── dist/ └── tsconfig.json 1234567891011121314151617181920212223# src/libs/lunar.jsLunar = &#123; Name: \"Dick\", sayHallo:function()&#123; return 'i am Lunar'; &#125;&#125; function Ab () &#123; this.a = 1 &#125; Ab.prototype.seta = function (num) &#123; this.a = num &#125; Ab.prototype.geta = function (num) &#123; return this.a &#125; exports.Ab = Abexports.Lunar = Lunar; 修改 greet.ts 文件, 调用 src/libs/lunar.js 中的函数和对象 123456789declare function require(path: string): any;var ln = require(\"./libs/lunar\");export function sayHello(name: string) &#123; ln.Ab = 10 console.log(ln.Ab) return `Hallo von $&#123;name&#125;, $&#123;ln.Lunar.Name&#125;`;&#125; TypeScript使用tsconfig.json文件管理工程配置，例如想包含哪些文件和进行哪些检查。 123456789101112131415&#123; \"compilerOptions\": &#123; \"noImplicitAny\": true, //\"outDir\": \"./dist\", //不需要. gulpfile.js 已经处理过了 \"allowJs\": true, \"target\": \"es2015\", \"esModuleInterop\": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */ &#125;, \"files\": [ \"src/*.ts\" ], \"include\": [ \"./src/**/*.js\" ]&#125; 我们看到网页显示 Hallo von TypeScript, Dick, 打开chrome的开发者工具, 看到console 中写出 10. Unit-Test 参考：Unit testing node applications with Typescript – using nocha and chai 安装测试包文件 1npm install chai mocha ts-node @types/chai @types/mocha --save-dev 新建一个test目录专门存放测试文件，并新建一个测试文件 test/ganzhi.spec.ts 1234567891011import &#123; expect &#125; from 'chai';import 'mocha';describe('干支 function', () =&gt; &#123; it('should return hello world', () =&gt; &#123; const result = 'Hello world!'; expect(result).to.equal('Hello world!'); &#125;); &#125;); 在 package.json 文件中配置测试参数和路径 12345&#123; \"scripts\": &#123; \"test\": \"mocha -r ts-node/register test/**/*.spec.ts\" &#125;&#125; 运行测试 $ npm run test &gt; huahets@1.0.0 test /Users/mai/Projects/huahets &gt; mocha -r ts-node/register test/**/*.spec.ts 干支 function ​ ✓ should return hello world 1 passing (19ms) 错误处理 假设有以下函数调用中LandMaps.FindCity会给出一个异常。 123var result = LandMaps.FindCity(\"xx省\", \"xx市\");expect(LandMaps.FindCity.bind(LandMaps, \"err\", \"\")).throw(\"Error Message\") # 或者expect(LandMaps.FindCity.bind(LandMaps, \"err\", \"\")).throw(new Error(\"Error Message\")) 打包 用 TypeScript 编写函数库 require.js 官方文档 通过上述方式生成的 bundle.js 文件不能被浏览器直接使用。参考上面两个网页提供的方式，可以生成给浏览器用的单一js文件。 新建一个入口文件，将所有接口都连接起来，并统一导出 1234567891011# yixue.tsimport &#123;TYDate, TYLunar&#125; from \"./tylunar\";import &#123;GanZhi&#125; from \"./ganzhi\";import &#123;ShenSha&#125; from \"./shensha\";import &#123;WuXing, FetchWuXing&#125; from \"./wuxing\";import &#123;Gua&#125; from './gua'import &#123;LandMaps&#125; from \"./landmaps\"exports.GanZhi = GanZhiexports.TYDate = TYDateexports.Gua = Gua 设置tsconfig.json让编译后的文件导出到dist/cmjs目录 123456789101112&#123; \"compilerOptions\": &#123; \"target\": \"es5\", \"module\": \"commonjs\", \"moduleResolution\": \"node\", \"outDir\": \"dist/cmjs\", \"rootDir\": \"./src\", \"declaration\": true, \"sourceMap\": true, \"lib\": [\"dom\", \"es6\"] &#125;&#125; 通过命令 tsc 编译 1tsc -P tsconfig.json 也可以在 package.json 中设定，然后运行 npm run build:cmjs 编译。编译后的 yixue.js 文件就是统一入口。 yi xue.js 实际就是个目录，我需要将其打包成一个单一文件。 安装 browserify , 1browserify dist/cmjs/base/yixue.js --standalone huahejs -o dist/web/yixue.js 下载 require.js， 并放到项目目录中。以下方式将 yixue.js 中的 class GanZhi 设为当前网页的一个全局函数。其它函数就可以调用。 123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;title&gt;易学包&lt;/title&gt; &lt;script type=\"text/javascript\" src=\"libs/require.js\"&gt;&lt;/script&gt; &lt;body &gt; &lt;p id=\"greeting\"&gt;易学包测试&lt;/p&gt; &lt;script&gt; var newGanZhi requirejs([\"web/yixue\"], function(yixue) &#123; console.log(yixue) newGanZhi = function(arg)&#123; return new yixue.GanZhi(arg) &#125; init() &#125;); function init()&#123; console.log(\"init will be called\") var ele = document.getElementById(\"gz1\") var gz = newGanZhi(1) ele.innerText = gz.Name &#125; &lt;/script&gt; &lt;div id=\"gz1\"&gt;&lt;/div&gt; &lt;div name=\"gua\"&gt;gua&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 在 Node.js 中调用更简单 1const &#123;Gua, GanZhi, TYDate&#125; = require(\"./web/yixue\") 需要更详细代码请下载项目： 演示项目地址","categories":[{"name":"IT","slug":"IT","permalink":"http://maiernte.github.io/wiki/categories/IT/"},{"name":"skill","slug":"IT/skill","permalink":"http://maiernte.github.io/wiki/categories/IT/skill/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://maiernte.github.io/wiki/tags/工具/"}]},{"title":"还在用七牛?","slug":"IT/skill/还在用七牛","date":"2019-08-14T21:41:28.000Z","updated":"2019-08-15T06:54:53.000Z","comments":true,"path":"still-using-qiniu.html","link":"","permalink":"http://maiernte.github.io/wiki/still-using-qiniu.html","excerpt":"自从七牛换了服务条款，每个空间就只分配测试域名, 30天到期。想省钱的用户，必须每30天倒腾一次。如果忘记了，过了期限，据说图都找不回来。不想费那个劲的用户， 得绑定自己的域名。 这样不但增加费用，还要考虑到域名备案。 十分麻烦。","text":"自从七牛换了服务条款，每个空间就只分配测试域名, 30天到期。想省钱的用户，必须每30天倒腾一次。如果忘记了，过了期限，据说图都找不回来。不想费那个劲的用户， 得绑定自己的域名。 这样不但增加费用，还要考虑到域名备案。 十分麻烦。 这是我弃用七牛的主要原因。 第二个原因就是——慢! 也许我人在国外的原因吧， 每次打开七牛的后台，刷好几遍都打不开对象存储的页面，只能用第三方软件进行上传下载，那样会相对好一些. 第三个原因是七牛的图床不能分目录存储。 当图片越积越多的时候，管理和查找起来非常麻烦。比如我昨天用Typora的Pandoc功能将一个Word技术文档转换成MD文件，一个文件就有100来张图。放在七牛得分好几页显示了。如果再想找别的图, 那得多费劲. 后来还是把心思用在了Github上。 在自己的账号下新开一个仓库， 然后在自己的本地电脑专建立一个文件夹， 用来存放MD文档或者博客中使用到的图片， 把这个专门的文件夹推送到新的仓库就完了! 相比七牛, Github还有不少优势: 可以分多级目录存储 传输速度快 !(可能国内慢吧, 但国内可以同样的思路, 放到 Coding 或者 CSDN 上 ) 免费 不限流量 还要我说啥呢? 但引用Github图片, 要做一个小小的改动. 比如Github上一个图片的原始地址是: https://github.com/maiernte/img/blob/master/books/ng-book2-71/image100.png 需要把其中的 blob 改成 raw, 变成 https://github.com/maiernte/img/raw/master/books/ng-book2-71/image100.png 自打有了Github这个神器, 可以跟七牛说再见! 再也不见!","categories":[{"name":"IT","slug":"IT","permalink":"http://maiernte.github.io/wiki/categories/IT/"},{"name":"skill","slug":"IT/skill","permalink":"http://maiernte.github.io/wiki/categories/IT/skill/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://maiernte.github.io/wiki/tags/工具/"}]},{"title":"Gitbook攻略","slug":"IT/Tools/Gitbook攻略","date":"2019-08-14T21:02:14.000Z","updated":"2019-08-15T09:46:18.000Z","comments":true,"path":"gitbook_with_typora_gh-pages.html","link":"","permalink":"http://maiernte.github.io/wiki/gitbook_with_typora_gh-pages.html","excerpt":"本文为你介绍如何使用利用 Typora + gitbook-cli + Github Pages 书写Gitbook. 在本地用 Typora 书写 md 文件, 用 gitbook-cli 编译, 最后发布到 Github Pages 上.","text":"本文为你介绍如何使用利用 Typora + gitbook-cli + Github Pages 书写Gitbook. 在本地用 Typora 书写 md 文件, 用 gitbook-cli 编译, 最后发布到 Github Pages 上. 安装 前提是已经安装了Node, 直接用npm包管理工具安装: 12sudo npm install -g gitbook-cligitbook -V # 注意是大写V CLI version: 2.3.2 GitBook version: 3.2.3 新建书籍 为新书建立一个根目录 mkdir pytho_finance 在该目录下执行（命令行下）：gitbook init，之后会在该目录下产生2个文件，分别是README.md（书籍的介绍）和SUMMARY.md（书籍的目录结构）。 按照上图格式填写目录和文件, 然后再次执行 gitbook init , GitBook 会查找 SUMMARY.md 文件中描述的目录和文件，如果没有则会将其创建. 然后就可以预览书籍了 gitbook serve. 执行命令后会对 Markdown 格式的文档进行转换，默认转换为 html 格式，提示Serving book on http://localhost:4000，打开网址即可查看. 构建书籍 1gitbook build 默认将生成的静态网站输出到 _book 目录。实际上，这一步也包含在 gitbook serve 里面，因为它们是 HTML，所以 GitBook 通过 Node.js 给你提供服务了。 build 命令可以指定路径, 或者指定端口, 或者生产 pdf , epub, mobi 等格式. 具体参考文章. 发布到Github Pages 12345git initgit remote add origin https://github.com/maiernte/gitbook_python_finance.gitgit add .git commit -m \"new book\"git push -u origin master # 将源代码推送到master 在GitHub的仓库中新添一个 gh-pages 的Branch. 1234567891011121314mkdir new_foldcd new_foldrm -rf . # 删除这个目录下所有文件, 注意那 .git 文件夹不能删除# 在源代码目录中,也就是md文件的目录gitbook build # 将会产生一个 _book 目录# 添加忽略, 以免下次推送的时候 _book 目录被推送.echo \"*~\" &gt; .gitignoreecho \"_book\" &gt;&gt; .gitignoreecho \"/node_modules\" &gt;&gt; .gitignorecp -r _book/* path_to/new_fold 🖊 忽略文件夹，windows下的测试是 /node_modules， 不加双引号。 进入新目录, 推送编译后的html 和 js 文件到 gh-pages 的分支中去. 1234cd path_to/new_foldgit add .git commit -m \"to gh-pages\"git push -u origin gh-pages 如此实现了将源代码保存到master, 将静态网站推送到gh-pages, 一个仓库搞定! 在浏览器输入仓库地址, 就可以看到自己的Gitbook. 比如我新书地址 https://maiernte.github.io/gitbook_python_finance/ 更新和维护 因为master 和 gh-pages 上存放的是不同的文档，所以拉取的时候也有指定 branch 12345# 拉取源代码git clone https://github.com/maiernte/gitbook_python_finance.git --branch master new_fold# 拉取静态网站git clone https://github.com/maiernte/gitbook_python_finance.git --branch gh-pages new_fold 个性化配置 在项目的根目录上添加一个 book.json 文件, 用来更全面的配置项目. 比如头文件, 插件等等. 123456789101112&#123; \"title\": \"使用Python处理金融数据\", \"author\": \"鎏金天涯 &lt;mai.yongfeng@gmail.com&gt;\", \"description\": \"使用Python处理金融数据的各种技术\", \"generator\": \"site\", \"plugins\": [\"mathjax\"], \"links\": &#123; \"sidebar\": &#123; \"鎏金天涯个人博客\": \"http://goldentianya.pub\" &#125; &#125;&#125; 数学插件 在上述文件添加了 &quot;plugins&quot;: [&quot;mathjax&quot;], 并执行命令 1gitbook install ./ # 会添加一堆 node_modules 包 更详细的配置请参阅官方文档. 目录插件 项目地址和文档 将 book.json 文件修改为 &quot;plugins&quot;: [&quot;mathjax&quot;, &quot;page-toc&quot; ], ​ 每一页的目录就会出现在右上角。 编译错误列表 版本 12CLI version: 2.3.2GitBook version: 3.2.3 sharing 插件出错 添加了 page-toc 插件后，gitbook serve 的时候总是出现错误。就算把文章改回原来的样子也无补于事。 info: 7 plugins are installed info: loading plugin “livereload”… OK info: loading plugin “highlight”… OK info: loading plugin “search”… OK info: loading plugin “lunr”… OK info: loading plugin “sharing”… OK info: loading plugin “fontsettings”… OK info: loading plugin “theme-default”… OK info: found 1 pages info: found 0 asset files Error: ENOENT: no such file or directory, stat ‘D:\\f040371\\git_book\\plattform_finance_book\\gitbook\\gitbook-plugin-sharing\\buttons.js’ 解决方法 修改 C:\\Users\\f040371\\.gitbook\\versions\\3.2.3\\lib\\output\\website\\copyPluginAssets.js 文件中的 112 行 将 confirm: true 改为 confirm: false 参考文章: 使用GitBook和Typora写知识库 gitbook+git+typora 的使用过程 GitBook + Typora + Git 编写电子文档 Gitbook 发布到 Github Pages","categories":[{"name":"IT","slug":"IT","permalink":"http://maiernte.github.io/wiki/categories/IT/"},{"name":"Tools","slug":"IT/Tools","permalink":"http://maiernte.github.io/wiki/categories/IT/Tools/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://maiernte.github.io/wiki/tags/工具/"}]},{"title":"配置服务器端MySQL","slug":"IT/Tools/配置服务器端MySQL","date":"2019-08-06T15:26:28.000Z","updated":"2019-08-14T13:10:45.000Z","comments":true,"path":"config-mysql-access-privileges-on-vps.html","link":"","permalink":"http://maiernte.github.io/wiki/config-mysql-access-privileges-on-vps.html","excerpt":"","text":"文章 问题一：端口状态 查看 3306 端口状态 sudo netstat -an | grep 3306 tcp 0 0 127.0.0.1:3306 0.0.0.0:* 3306端口是默认绑定在本地IP 127.0.0.1上的，所以外网无法访问该主机的3306端口。 打开MySQL的配置文件：sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf 找到如下内容的一行并注释掉： bind-address = 127.0.0.1 重启MySQL服务 sudo systemctl restart mysql 然后使用如下命令查看端口绑定状态 sudo netstat -an | grep 3306 问题二：用户权限 查看用户权限 123sudo mysql -uroot -p[你的密码]use mysqlselect user,host from user 当显示如下，表示用户root只允许内网访问 root localhost 给用户授权 12grant all privileges on *.* to &apos;root&apos;@&apos;[允许的ip]&apos; identified by &apos;[密码]&apos; with grant option;flush privileges; 其中*[允许的ip]如果设置为*%**的话则表示所有ipipip都可以访问，*[密码]*表示外网访问的密码是什么。比如我设置成所有ipipip都可访问，密码是rootrootroot，则命令如下： 123grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;root&apos; with grant option;flush privileges;select user,host from user; 重新查看，会显示 root % root localhost 安装 phpMyAdmin","categories":[{"name":"IT","slug":"IT","permalink":"http://maiernte.github.io/wiki/categories/IT/"},{"name":"Tools","slug":"IT/Tools","permalink":"http://maiernte.github.io/wiki/categories/IT/Tools/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://maiernte.github.io/wiki/tags/工具/"}]},{"title":"斯多葛主义手册","slug":"读书笔记/斯多葛主义手册","date":"2019-08-03T19:16:47.000Z","updated":"2019-08-14T06:31:28.000Z","comments":true,"path":"storic-summary.html","link":"","permalink":"http://maiernte.github.io/wiki/storic-summary.html","excerpt":"世间的事，有些可控，有些不可控。可控的有：观点，追求，欲望，和喜恶等。这些都是我们自己可以做出选择的。不可控的是身体，财物，名声，指令等。这些我们都无法选择。","text":"世间的事，有些可控，有些不可控。可控的有：观点，追求，欲望，和喜恶等。这些都是我们自己可以做出选择的。不可控的是身体，财物，名声，指令等。这些我们都无法选择。 可控范围之内的东西在本质上是自由的，不被束缚、阻碍的。那些不可控的是虚的，是被奴役的，是我们受控于他人。记住，如果你觉得那些不可控的事物是自由的，那些受控于别人的也是你的，那么你就会被控制，被束缚。你会悲痛，你会受扰，你会指责神以及他人。但如果你只专注于你所能控制的，不被他人所拥有的干扰，那么就没有人能够影响你、束缚你。并且，你不会把过错推在他人身上。你不会去做违背你的意志的事。你不会有敌人。你也不会被伤害。 把这些当做你的目标，不让自己受那些没有意义的事诱惑，哪怕就一点点也不可以。放弃那些不可控的。如果你既想把握住可控的，又想拥有财富和权力，那么你将会什么都得不到，更不用说幸福和自由－因为幸福和自由是依赖于可控事物。 尽你最大的努力。这样你就可以对看似艰难的每一件事说：“你只不过是看起来艰难而已。” 然后比照你为自己制定的原则：这件事是否可控。如果在你控制范围之外，那么结果就无关乎于你。 欲望要求你去追求你想要的；厌恶则让你尽量避免你所讨厌的。但是，如果你得不到你想要的，你就会十分失望；如果你无法避免你所讨厌的，那你就会被厌恶扭曲。那么，如果你只讨厌那些在你出自本质所做选择的对立事物（即在你控制范围内你不会选择的事物），那么你就永远不需要去为之伤神。但是，如果你厌恶疾病、死亡、贫穷等你无法选择和改变的，那你就会被厌恶扭曲。不厌恶你所不能控制的，把厌恶限制在和你本性对立的事物。但是，就目前来说，压制你的欲望：因为如果你追求任何可控范围之外的事物，那你就必然会失望。不要轻易追求或者厌恶。 对于给你带来乐趣、有用处以及你十分喜欢的东西，从最不重要的事情开始，记得提醒你自己：他们真正的本质是什么。比如说，你很喜欢某个陶瓷杯，提醒你自己那只是因为你喜欢陶瓷杯而已，而不在于具体是哪个杯子。这样，如果杯子碎了，你也不会太伤心。当你亲吻你的家人时，提醒你自己你只是在亲吻和你亲近的人，这样当他们离世时，你就不会太难过。 当你做事情时，提醒你自己事情的本质是什么，你可能遇到哪些情况。比如说洗澡。在你洗澡之前，先想想洗澡时会发生哪些事情。有的人可能会把水溅得哪都是，有人可能会推娜，有人会诅咒，有人会偷东西。这样你在洗澡之前就可以跟自己说：“我现在要去洗澡了，任何这些事都有可能发生，但是这不是我能控制的，所以我会保持好的心态”。如果你以同样的心态去对待任何其他事情，你内心的平和就不会被打扰。因为你可以对自己说：”我希望的不仅仅是洗澡，还有不被任何意外困扰”。 人内心困扰时，通常不是被事物本身困扰，而是被他们自己的原则和概念所困扰。比如说，死亡本身并不可怕，要不然苏格拉底面临死亡时该有多么惊慌。我们对死亡的恐惧是源于我们对死亡的概念：死亡是可怕的。当我们被困扰、阻碍，伤心难过时，我们不要从事物本身或者他人身上找原因，而应该反省我们自己，还有我们的原则。一个还不通明的人，会把自己的糟糕情况怪罪于他人。一个刚刚开始学习处理这些情况的人，会从自己身上找原因。而一个已经通彻的人，既不会怪罪别人，也不会苛求自己。 不要为任何身外之物骄傲。一匹马可以因为自己的英爽豪气自豪，因为这是它本身拥有的。但是如果你因为拥有这样一匹马儿骄傲，事实上，你所自豪的，不过是马所拥有的好。那么，什么才是属于你的呢？你对事物的反应和态度。如果你对任何事物的形态的处之泰然，那么你就可以为你的理性自豪，因为这是属于你的。 想象以下情况：在一次航海旅行中，你的船抛锚靠岸了，你上岸去找水，途中你还捡了些你喜欢的贝壳，或者买个洋葱。但是，你的所有注意力必须一直集中在那艘船上，注意船长什么时候呼叫大家上船继续航行。当船长呼叫时，你必须立刻放下手中所有的东西，否则你就会被手脚捆绑得像只羊一样抛到船上。生活也是这样。生活给你老婆孩子，而不是洋葱贝壳。如果生活的船长呼叫了，你必须离开他们，立马跑到船上，而不是光顾着他们。如果你年纪大了，那你就不能离开船太远，否则你可能来不及回到船上。 不要苛求生活给予你所有你想要的，该发生的就会发生，随遇而安就好。 疾病影响的只是你的身体，而不是你选择的能力，除非那是你的选择。瘸的是腿，而不是你的脑子。不管发生什么事，只要这么跟自己说，你就会明白困难阻碍的是事物，而不是你。 对于每一件发生的事，检视你自己的能力，问你自己能够用哪些能力从每一件事情中获得什么适当的用处。遇到一个十分有吸引力的人时，你就会发现你的自控就是你的能力。当你痛苦时，你会发现自己的坚强。听到坏话时，你会发现自己的耐心。形成了这样的习惯之后，你就不会被事物的表象所影响。 不要说：“我失去了什么”。而应该说：“我归还了什么”。如果你的孩子或者妻子不幸离世了，你不是失去他们了，而是他们回归了。如果你的房子被夺走了，同样的，你是归还它们了。你可能会说：“可是那些夺走我房子的人是坏人！“。可是，给予你的人让谁来夺走你的房子真的那么重要吗？当你拥有时，照顾好它，但不要把它当做永久财物，就当自己是一个在那暂住的旅行者。 如果你想要提高自己，那就要拒绝以下思考方式：“如果我忽视那些琐事，那我就没有收入；如果我不更正我的仆人，那他们就会变坏”。 如果能够免于悲伤和恐惧，即使死于饥饿，那也比富得流油但备受精神困扰好得多。比起坏仆人，难道你的开心不是更重要吗？ 如果你想要让自己变得更好，那就从小事做起。油洒了，酒被偷了，没关系，告诉你自己：“那只不过是平静生活的一点点代价。任何事情都是有代价的”。当你召集你的仆人时，他们可能不会来，也可能来了但是做的事情不合你意。但是他们并没有重要得以至于你必须打破自己的平静。 如果你想要让自己变得更好，那就不要在乎被人认为你是愚蠢的。不要希望别人认为你无所不知。即使你看上去好像对别人来说很重要，也不要被这种虚名欺骗。因为想要既保持内心平和又拥有外在事物是非常困难的。当你专注于二者之一时，你必然会忽略剩下的那个。 如果你希望你的家人、朋友长生不老，那是很愚蠢的想法。因为生死是在你控制范围之外的，是关乎他人的。同样地，如果你希望你的仆人不犯错，那你和傻瓜无异，因为你希望错误不是错误。但是，如果你希望你的欲望不带来失望，那是在你所能控制的范围之内的。练习控制你所能控制的。一个能够控制自己的喜恶的人，是自己生活的主人。这样的人，是真正自由的，不会成为被自己的欲望控制的奴隶，不会喜欢或者厌恶那些受别人控制的事物。 记住生活就像是一个晚餐聚会一样。如果别人递给你一盘食物，你应该伸出手去接，舀起适当份量给自己。如果盘子从你身边递过，不要试图去截取。如果还没轮到你这，不要起身去拿，而是等着别人递到你面前。用相同的态度对待孩子，配偶，财物，公共职位，这样你最终自然就会成为诸神宴会的搭档。如果你不仅能够做到这些，还能够做到不去拿你面前的食物，甚至是有能力拒绝你自己的欲望，这样你不仅仅能够成为诸神宴会的搭档，你还能进入他们的国度，成为为他们的一员。像Diogenes, Heraclitus这些人就是因为他们的尊贵行为而被视为神一般神圣。 当你看到别人因为孩子出国了，或者离世了，或者因为被琐事困扰而哭泣伤心时，不要让这些情感表象误导你。你必须作出自己的判断，明白他的伤心难过不是因为发生的事情本身，因为其他同样身处其中的人并没有受到同样的影响。他之所以受到那么大的困扰，是因为他自己本身对事情的判断。不要让自己和他一样受影响，不要让自己一样受困扰，不管是外在表现还是内心感受上。 记住你只是一出戏里的一个演员，而戏份角色并不是由你决定的。不管角色故事长短，不管你是一个穷人，瘸子，政府官员，或者是一个很私密的人，把你的角色演好演自然了就行。把分配给你的角色演好，那是你的本分；而到底是哪个角色，那不是由你决定的。 如果一只乌鸦向你预示不幸的事即将发生，不要让你内心的平静被这个表象破坏。要即刻告诉自己，“我不知道会发生什么，我不知道我的身体，财物，名声，或者家人会受什么影响，如果我愿意理性地去想，那么所有的这些恶兆就会变成幸运，因为我可以控制我要用什么态度去对待这些事情。不管发生什么，我都可以从中获得对我有利的。 如果你不去参与在你控制范围之外的任何战斗，那你就不会被打败。当你看到那些声名显赫，社会地位高，或者在任何方面做得很好的人，不要着急认为他们是开心的。因为如果我们清楚明白幸福只在于我们所能够控制的范围内，那我们就不会去羡慕或者攀比。不要向往头衔，而是要向往内心自由和平静。而要做到这一点，唯一的途径是要看轻我们控制范围之外的一切事物。 记住，那些对你出言不逊或者动手的人他本身并不是一种羞辱，而是代表那些言行的原则让你感觉到被羞辱。如果有人激怒你了，那是你对这种行为的观点激怒了你。试着不要被事情的表象牵引你的情感。给予适当的时间和稍作休息，你就能够很好地调整控制自己的情感。 把死亡和流放这些看似可怕的事看作是日常，那你就赢了。不用害怕贫穷，也不要刻意贪求任何东西。 如果你真心希望从哲学中获益，那么就要做好被众人嘲笑的准备：“她这是准备要成为一个哲学家呢”，“瞧她那傲慢的样子”……这个时候，你该做的，不是摆起傲慢的样子，而是要以神圣的态度忠诚于你所认定的，这样总有一天嘲笑你的人会开始尊敬你崇拜你。但是如果你被这些嘲笑打败，那你就成了双重的笑话。 如果你为了取悦他人而把你的注意力转移到那些外在的你无法控制的事物上，那么恭喜你，你已经成功地毁了你自己的生活了。 不要让以下这些思考方式困扰你：“我将会颜面丢尽，而且什么都不是。”耻辱是邪恶的，我们不应该被耻辱感所控制。因为获取权力或着被人嘲笑，这些都在你的控制范围之外。我们不用为任何在我们控制范围之外的事而感到耻辱。在我们可控范围之内，我们是自由的，能够左右我们自己的事情，是自我的主人－从这个角度看，我们永远不会什么都不是。“可是我帮不了我的朋友啊”，你可能会这么说。可是，怎么算是帮助朋友呢？你不能给他们钱，或者帮他们成为罗马市民。这些都是你所能控制范围之内的，是他们自己应该处理的事情。而且，如果这些都是你自己所没有的，那你怎么能够给他们呢？你可能会说：“如果我帮助他们获得这些的话，说不定我也能够得到一份呢“。如果我能够在保存我自己的尊严，忠诚和思想得到这些的话，请你帮我指明道路。可是如果你要我损害自己去得到你的利益，那这样的做法不仅不公平，而且愚蠢至极。 如果别人，而不是你，被邀请去宴会，或者被赞美，或者被别人咨询，不要懊恼。如果这些是好事，你应该为他人高兴。如果是坏事，不要难过。记住：这些都是在你的控制范围之外的，这样的对待一般是有对应的代价的。如果你不愿意付出这样的代价而希望得到同样的对待，那是不公平的。比如说别人用50分买了一棵生菜，但是你不想花这50分，那你就不应该认为拥有生菜的人占了便宜。那个人付出50分得到了生菜，而你口袋里还有那没有花出去的50分。同理，宴会邀请，别人的赞美，这些都是有代价的。如果你觉得这些对你是有价值的，那你就要付出同等的价值去拥有。如果你不付出就想要得到这些，那么你就是个贪得无厌的傻瓜。换个角度想，在决定不和别人交换价值的时候，你真的什么都没有得到吗？不是的：你得到了不赞美你不想赞美的人的自由，而且也不需要容忍你不想容忍的行为。 记住：很多事情不应该分自我或者他人。举个例子，如果邻居家的孩子打破了个杯子或者其他什么东西，我们很容易会说：“没事的，打碎东西是正常的”。可是如果打碎的是你自己的杯子呢？你应该作出相同的反应，而不是心生懊恼。同理，当别人的孩子或者妻子去世了，我们知道死亡的悲剧有时候是不可避免的，但是如果发生在我们自己身上的时候，我们却心如刀割。但是，我们应该清醒的认识到类似的悲剧不是我们能够控制的，我们所能够控制的是自己的情绪和反应，因为即使是发生在自己的身上，死亡本身并没有因为我们和死者的关系而变的更糟糕。 立一个靶子的目的，不是为了射失它（靶子的目的都是为了让人射中它）。那么同样的道理，大道创造出一个“恶”的事物（至少看起来如此），不是为了让人绕开它。 如果别人把你的身体交给一个路上遇到的陌生人，你一定会很生气。可是当别人用恶语打击你的时候，你为什么要心甘情愿地让别人控制你的思想，困惑你呢？ 做每件事情都要考虑缘由和后果之后才能开始行动。如果你兴高采烈地开始而没有考虑可能发生的后果，当某些不好的后果开始出现时，你就会停止前进。拿参加奥林匹克赛事为例子。如果你把所有前因后果都考虑周全后认为参加比赛对你时有益的，那就全力以赴。其中，应该考虑的事情包括：你要遵守规则，节制饮食；不管风吹日晒雨淋都要雷打不动地坚持按时锻炼；你不能喝凉水活着酒。你必须全身心地、完全忘我地投入训练。而且，要做思想准备准备，比赛中你有可能会摔入沟里，胳膊脱臼，脚踝受伤，吃入尘土，被鞭打，甚至最后以失败告终。当你评估完所有的可能性之后还是一心想比赛，那就以战争的姿态出发。否则，你就会像孩子过家家一样：一会扮摔跤手，一会扮角斗士，一会吹喇叭，一会又想参加戏剧演出。这样，即使你什么都做过，但是什么都不是。就想大猩猩一样，你模仿你所看到的一切，不停地换把戏可能是一件好玩的事，但是你很快就玩腻了。你从来都没有完全投入过任何事，没有深度地从各个角度考虑和研究所有相关的细节，而只是凭一时的兴趣蜻蜓点水般地接触了各种行业。有些人当他们看到一个人说话的方式和Euphrates十分相像（不过事实上，真的有人能和Euphrates一样犀利善辩吗？），他们认为自己也能够拥有和哲学家一样的思想。但是，如果你细想一下，如果你想要成为一个摔跤手，那么你必须具备有摔跤手的宽阔肩膀，强有力的背部和大腿。但是每一个人的身体构造都是不一样的，你必须具有必备的条件才能称为一个好的摔跤手。同理，要想成为一个哲学家，你不能像你现在这样随心所欲地吃喝，不能让愤怒和不满控制你的情绪，你必须细心观察，劳作，控制自己的欲望，你必须能够忍受孤独，仆人的不敬，和外人的嘲笑，你必须能够接受别人在其他方面做得比你好。如果你已经仔细考虑过这些情况，如果你认为如果做到以上这些可以让你享受自由和宁静，那就尽情去追求哲学家的道路。如果你无法做到这些的话，那么就请不要继续，不要像孩子一样，一会试试做哲学，一会又想当政治家，演讲者，或者凯撒的军官。这些追求是互相矛盾的，你只能成为其中一个，不管做得好坏。你必须培养你自己内在的能够掌控行为的能力，或者外在的技术，二者只能取其一。 一个人的责任是由和别人的关系定义和衡量的。如果一个人拥有父亲的角色，那么他就有以下权利：他的孩子要照顾他，遵从他，耐心听他训话和教导。那如果他不是一个好父亲呢？他也应该受到同等的对待，因为我们无法选择我们的父亲是谁。不管他做了什么，你必须做到让自己心安理得。因为只有你能够让别人的行为伤害到你。当你觉得你被伤害了，那你就会被伤害。如果你以同样的逻辑看待邻居，市民，将军这些不同的角色，你就能够清楚地明白与这些角色相对应的社会责任。","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://maiernte.github.io/wiki/categories/读书笔记/"}],"tags":[{"name":"哲理","slug":"哲理","permalink":"http://maiernte.github.io/wiki/tags/哲理/"},{"name":"书籍","slug":"书籍","permalink":"http://maiernte.github.io/wiki/tags/书籍/"}]},{"title":"同步Hexo文章与Mac上原笔记的分类和标签","slug":"IT/Web/同步Hexo文章与Mac上原笔记的分类和标签","date":"2019-08-01T15:30:00.000Z","updated":"2019-08-03T12:58:26.000Z","comments":true,"path":"synchron-the-tag-and-categories-btw-pc-hexo.html","link":"","permalink":"http://maiernte.github.io/wiki/synchron-the-tag-and-categories-btw-pc-hexo.html","excerpt":"","text":"最近才搞明白，原来Hexo博客的_post文件夹里面的Markdown原文件是可以按照分级嵌套的目录结构摆放的。编译的时候才放到public这个单一目录下。如果能让文章在Hexo的分类严格跟md文件的存储目录一一对应，将来需要找原文件的时侯会方便很多。😄 使用Mac系统的同学也知道，mac有个很风骚的操作，就是给文件分配不同颜色的标签，非常方便文件寻找。我也希望博客上的文章标签，能跟Mac系统里的标签统一起来。😄 实现物理存储目录与Hexo分类统一很简单，将源md文件的相对存储路径写到文件meta元素的categories里面就行了。比如源文件放在我的博客--&gt;IT--&gt;前端，文章的头文件就写成这样：categories：[IT, 前端]。 实现标签的统一稍微麻烦一点，需要先读取文件实际分配到的标签。网上已经有一个公开的项目， tag 。下载并安装，就可以通过 tag 命令读取文件和文件夹的标签。 123456# 安装brew install tag# 查看版本tag --version# 读取文件标签tag --list fileUrl 我已经写好了相应的脚本文件，下载并执行脚本文件就好了。脚本文件里的dirPath变量是我的统一存放md源文件的文件夹，你需要改成自己的存放路径，那样就不用每次运行的时候输入一遍。 我在Hexo项目的根目录新添一个文件夹专门存放管理的脚本文件，每次都在终端运行这个脚本，所以默认执行路径是 ./source/_post。 运行脚本的时候可以设定时间参数，过滤掉太久远的文件。默认情况不会更改文件内容，只查看文件的实际分类和标签是否与文内头文件相同。然后按照给出的列表手动更改。如果想让程序自动更改，按照提示输入fix参数就好。","categories":[{"name":"IT","slug":"IT","permalink":"http://maiernte.github.io/wiki/categories/IT/"},{"name":"Web","slug":"IT/Web","permalink":"http://maiernte.github.io/wiki/categories/IT/Web/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://maiernte.github.io/wiki/tags/Hexo/"},{"name":"Mac","slug":"Mac","permalink":"http://maiernte.github.io/wiki/tags/Mac/"}]},{"title":"有用的Shell命令","slug":"IT/Tools/有用的shell命令","date":"2019-07-30T15:30:28.000Z","updated":"2019-08-14T13:12:36.000Z","comments":true,"path":"helpfull-shell-command.html","link":"","permalink":"http://maiernte.github.io/wiki/helpfull-shell-command.html","excerpt":"在线网站可以找到基本的东西：Linux命令大全 shell 正则表达式 文件&amp;内容检索 正则表达式注意的地方 花括号之前要加转义字符 [a-z]\\{3\\} 空格就是转义加空格\\，而不是\\s 。如 [a-z0-9_\\ ]\\{3,\\} 这几个符号 _ - . #都不需要加转义符。 不要轻易加行结束符$，可能回车才是最后符号，所以可能找不到。","text":"在线网站可以找到基本的东西：Linux命令大全 shell 正则表达式 文件&amp;内容检索 正则表达式注意的地方 花括号之前要加转义字符 [a-z]\\{3\\} 空格就是转义加空格\\，而不是\\s 。如 [a-z0-9_\\ ]\\{3,\\} 这几个符号 _ - . #都不需要加转义符。 不要轻易加行结束符$，可能回车才是最后符号，所以可能找不到。 grep 12345678910# -r 递归搜索子目录# -l 只显示文件# -n 显示文件和匹配的行# 搜索 “markdown” 字符串并输入到文件里# Formating the Results...grep $begrif $directory $args |awk '&#123; print \"[\" $1 \"](\" $1 \")\\n\" &#125;' &gt; suchergebnisse.md# 将结果转为Windows目录sed -i -- 's/\\/D\\//D:\\/\\//g' suchergebnisse.mdecho \"Fertig! Ergebnisse siehe Datei 'suchergebnisse.md'\"read 更多参数请读此文 示例脚本 grep 正则表达式的例子 1234567891011#!bin/bash# &#123;#part0000_split_050.html#nav_point-99 .calibre13&#125;result=$(grep '&#123;#part0000_split_[0-9]\\&#123;3\\&#125;.html[a-z0-9_\\ -.#]\\&#123;3,\\&#125;calibre13&#125;' 文件名)if [ \"$result\" = \"\" ];then echo \"Nichts gefunden!\"fiecho $resultread grep或操作 123grep -E '123|abc' filename // 找出文件（filename）中包含123或者包含abc的行egrep '123|abc' filename // 用egrep同样可以实现awk '/123|abc/' filename // awk 的实现方式 grep与操作 1grep pattern1 files | grep pattern2 //显示既匹配 pattern1 又匹配 pattern2 的行。 其它常用选项 12345grep -i pattern files //不区分大小写地搜索。默认情况区分大小写，grep -l pattern files //只列出匹配的文件名，grep -L pattern files //列出不匹配的文件名，grep -w pattern files //只匹配整个单词，而不是字符串的一部分（如匹配‘magic’，而不是‘magical’），grep -C number pattern files //匹配的上下文分别显示[number]行， 点击显/隐代码 sed 命令 参考文献 文本替代 以下文本替换通过pandoc导入后的文件，残留很多内部跳转链接：如 1&#123;#part0000_split_003.html#nav_point_1 .not-in-toc&#125; 12345678910#!bin/bashecho running#sed 's/^#part0000_split_$/p' -f ../Linux_shell_Anleitung.md ;sed -i -- 's/^\\[\\]&#123;#part0000_split_[0-9]\\&#123;3\\&#125;.html&#125;$//g' ../Linux_shell_Anleitung.md #&#123;#part0000_split_017.html#nav_point_21 .calibre8&#125; &#123;#part0000_split_003.html#nav_point_1 .not-in-toc&#125;sed -i -- 's/&#123;#part0000_split_[0-9]\\&#123;3\\&#125;.html#[a-z0-9_-]\\+ .[a-z0-9_-]\\+&#125;//g' ../Linux_shell_Anleitung.md echo fertig!read 整行替代 参考文献 替代以 categories: 开头的整行（允许行开头有空格或制表符）。c 代表整行，以字符串 categories: [IE] 替代整行。 1234# Linux 下的写法sed -i -- '/^[[:blank:]]*categories:/c categories: [IE]' result.txt # Mac 下的写法sed -i '' 's/^[[:blank:]]*tags:.*/tags: [心理]/' $1 错误：如果将参数 c 写在前面，会将整个文本每一行都替换掉。 12# Linux 下的写法sed -i -- 'c/^[[:blank:]]*categories:/categories: [IE]/' result.txt find 1234# 查找所有的 md 文件find /root/bibliothek/markdowns/blog_posts/ -type f -name \"*.md\" # 查找一天之前的文件， 一小时前时 -1h，一周 -1wfind . -type f -mtime -1d 如果要处理复杂的事情，就要用到函数 123456789# 定义函数showFileInfo()&#123; echo $1&#125;# 声明函数export -f showFileInfo# 使用函数find $dirPath -name \"*.md\" | xargs -n 1 -P 10 -I &#123;&#125; bash -c 'showFileInfo \"$@\"' _ &#123;&#125; \\; 查找最新文件 将文件按从新到旧排列，取第一个。 ls -t *.cpp | head -1 将文件按从旧到新排列，取最后一个。 ls -rt *.cpp | tail -1 列出文件时间戳 ls -l simpleNode.js |awk '{print $6 &quot;-&quot; $7 &quot;-&quot; $8 }' 整合以上两个命令，找到最新的文件，读取时间戳 ls -t *.* | head -1 | xargs ls -l | awk '{print $6 &quot;-&quot; $7 &quot;-&quot; $8 }' 字符串处理 字符串处理参考文献 将分隔符的字符串转为数组的几种方法 配合使用，可以直接用 shell 实现文件内标签和分类的替换。 数组转字符串 使用分隔符将数组转字符串： 1234ids=(1 2 3 4); lst=$( IFS='/'; echo \"$&#123;ids[*]&#125;\" ); echo $lst# 结果是：1/2/3/4 字符串转数组 懒得写，看范例 字符串替换 12345# 原串 [娱乐,经济,重要] =&gt; 目标串 [娱乐, 经济, 重要]$&#123;tags/,/, &#125; # 只替换了一个，结果变成 [娱乐, 经济,重要]$&#123;tags//,/, &#125; # 替换了所有符合的，结果变成 [娱乐, 经济, 重要]# 原串 [重要] =&gt; 目标串 重要$&#123;tags//[\\[\\] ]/&#125; 消除回车符、换行符、制表符 123# arg是个字符串变量， 可能带有回车符\\r# 把它整个作为参数使用会带来很多麻烦。用以下命令将其替换掉newvar=$&#123;arg//[$'\\t\\r\\n']/&#125; 详细用法 参考文献 ${var##*/} 该命令的作用是去掉变量var从左边算起的最后一个’/‘字符及其左边的内容，返回从左边算起的最后一个’/’（不含该字符）的右边的内容。使用例子及结果如下： 12var=dir1/dir2/file.txt --&gt; file.txt 从运行结果可以看到，使用该命令，可以提取出我们需要的文件名file.txt。 若使用时在shell程序文件中，可以使用变量来保存这个结果，再加以利用，如file=${var##*/} ${var##*.} 该命令的作用是去掉变量var从左边算起的最后一个’.‘字符及其左边的内容，返回从左边算起的最后一个’.’（不含该字符）的右边的内容。使用例子及结果如下： 12var=dir1/dir2/file.txt --&gt; txt 从运行结果可以看到，使用该命令，可以提取出我们需要的文件后缀。 如果文件的后缀不仅有一个，例如，file.tar.gz，命令${var##*.}仅能提取最后一个后缀，而我想提取tar.gz时该怎么办？那么就要用下面所说的${var#*.}命令了。 ${var#*.} 该命令的作用是去掉变量var从左边算起的第一个’.‘字符及其左边的内容，返回从左边算起第一个’.’（不含该字符）的右边部分的内容。使用例子及结果如下： 12var=dir1/dir2/file.tar.gz --&gt; tar.gz 从运行结果可以看到，使用该命令，可以提取出文件的多个后缀。 ${var%/*} 该命令的使用是去掉变量var从右边算起的第一个’/‘字符及其右边的内容，返回从右边算起的第一个’/’（不含该字符）的左边的内容。使用例子及结果如下： 12var=dir1/dir2/file.txt --&gt; dir1/dir2 从运行的结果可以看到，使用该命令，可以提取出我们需要的文件所在的目录 ${var%%.*} 该命令的使用是去掉变量var从右边算起的最后一个’.‘字符及其右边的内容，返回从右边算起的最后一个’.’（不含该字符）的左边的内容。使用例子及结果如下： 12var=dir1/dir2/file.txt --&gt; dir1/dir2/file 当我们需要建立一个与文件名相同名字（没有后缀）的目录与对应的文件相对应时，就可以使用该命令来进行操作。例如，解压文件的情况就与此类似，我们压缩文件file.zip时，会在与file.zip同级目录下建立一个名为file的目录。 总结 其实${}并不是专门为提取文件名或目录名的，它的使用是变量的提取和替换等等操作，它可以提取非常多的内容，并不一定是上面五个例子中的’/‘或’.’。也就是说，上面的使用方法只是它使用的一个特例。 看到上面的这些命令，可能会让人感到非常难以理解和记忆，其实不然，它们都是有规律的。 #：表示从左边算起第一个 %：表示从右边算起第一个 ##：表示从左边算起最后一个 %%：表示从右边算起最后一个 换句话来说，＃总是表示左边算起，％总是表示右边算起。 ＊：表示要删除的内容，对于#和##的情况，它位于指定的字符（例子中的’/‘和’.’）的左边，表于删除指定字符及其左边的内容；对于%和%%的情况，它位于指定的字符（例子中的’/‘和’.’）的右边，表示删除指定字符及其右边的内容。这里的’'的位置不能互换，即不能把号放在#或##的右边，反之亦然。 例如：${var%%x*}表示找出从右边算起最后一个字符x，并删除字符x及其右边的字符。 看到这里，就可以知道，其实该命令的用途非常广泛，上面只是指针文件名和目录名的命名特性来进行提取的一些特例而已。 basename和dirname ${}并不是专门为提取文件名和目录名设计的命令，那么basename和dirname命令就是专门为做这一件事而已准备的了。 basename 该命令的作用是从路径中提取出文件名，使用方法为basename NAME [SUFFIX]。 1.1 从路径中提出出文件名（带后缀），例子如下： 1.2 从上面命令的用法中可以看到，后缀（SUFFIX）是一个可选项。所以，若只想提取出文件名file，而不带有后缀，还可以在变量的后面加上后缀名，例子如下： dirname 该命令的作用是从路径中提取出目录名，使用方法为 dirname NAME。使用例子如下： 这样就提取出了file.txt文件所在的目录。 注：该命令不仅能提取出普通文件所的目录，它能提取出任何文件所在的目录，例如目录所在的目录，如下： 它提取出了目录dir2所在的目录dir1. 查看硬盘剩余空间 12345# 整个硬盘空间df -hl# 查看某个文件夹大小du -h your_directory # 列出每个子文件夹大小du -hcs your_directory # 汇总 查看 package 版本 1apt-cache show packagename Windwos 下的脚本 windows 下显示环境变量 echo %http_proxy% windows 下设置代理服务器 12set http_proxy=http://username:pwd$$$@proxy-rzf:8080set https_proxy=http://username:pwd$$$@proxy-rzf:8080","categories":[{"name":"IT","slug":"IT","permalink":"http://maiernte.github.io/wiki/categories/IT/"},{"name":"Tools","slug":"IT/Tools","permalink":"http://maiernte.github.io/wiki/categories/IT/Tools/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://maiernte.github.io/wiki/tags/工具/"}]},{"title":"Hexo日常管理","slug":"常用文件/Hexo日常管理","date":"2019-07-30T15:27:28.000Z","updated":"2019-08-02T03:54:52.000Z","comments":true,"path":"hexo-blog-alltag-verwalten.html","link":"","permalink":"http://maiernte.github.io/wiki/hexo-blog-alltag-verwalten.html","excerpt":"","text":"复制MD文件 查找最新文件 1234ls -t /Users/mai/Projects/hexo/source/_posts/*.md | head -1 | xargs ls -l | awk '&#123;print $6 \"-\" $7 \"-\" $8 &#125;'# 最旧的文件就应该是ls -t /Users/mai/Projects/hexo/source/_posts/*.md | tail -1 | xargs ls -l | awk '&#123;print $6 \"-\" $7 \"-\" $8 &#125;' 其它 Hexo 代码折叠 123&#123;% fold 点击显/隐内容 %&#125;需要隐藏的内容。。。&#123;% endfold %&#125; 参考文件 有用的shell命令 会导致编译奔溃的错误 大括号和井号连在一起 123&#123;#、 #&#125;、&#123;#&#125; 这三种情况都会导致系统奔溃&#123;&#125; 和 # 之间如果有别的字符就不会。如 &#123; # &#125;或者放在代码段内也不会。行内代码不能避免这种情形。","categories":[{"name":"常用文件","slug":"常用文件","permalink":"http://maiernte.github.io/wiki/categories/常用文件/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://maiernte.github.io/wiki/tags/Hexo/"}]},{"title":"佛偈集合","slug":"摘录/片段/佛偈集合","date":"2019-07-29T07:10:50.000Z","updated":"2019-08-15T21:46:14.000Z","comments":true,"path":"budahlisisch-poeim-collection.html","link":"","permalink":"http://maiernte.github.io/wiki/budahlisisch-poeim-collection.html","excerpt":"佛偈（jì） 虚云老和尚悟道偈 杯子扑落地，响声明历历。 虚空粉碎也，狂心当下息。 烫着手，打碎杯，家破人亡语难开。 春到花香处处秀，山河大地是如来。","text":"佛偈（jì） 虚云老和尚悟道偈 杯子扑落地，响声明历历。 虚空粉碎也，狂心当下息。 烫着手，打碎杯，家破人亡语难开。 春到花香处处秀，山河大地是如来。 布袋和尚 手把青秧插满田，低头便见水中天。 心地清净方为道，退步原来是向前。 赠药山高僧惟俨 练得身形似鹤形，千株松下两函经。 我来问道无馀说，云在青天水在瓶。 ——李翱 牛头山法融禅师 恰恰用心时，恰恰无心用。曲谭名相劳，直说无繁重。 无心恰恰用，常用恰恰无。今说无心处，不与有心殊。 ——唐永徽年中 天衣义怀禅师 雁过长空，影沉寒底，雁无留影之心，影无遗踪之意。 《菜根谭》中的一句古诗：“风来疏竹，风过而竹不留声；雁渡寒潭，雁过而潭不留影。 另一版本：竹影扫阶尘不动，雁过寒潭水无痕。","categories":[{"name":"摘录","slug":"摘录","permalink":"http://maiernte.github.io/wiki/categories/摘录/"},{"name":"片段","slug":"摘录/片段","permalink":"http://maiernte.github.io/wiki/categories/摘录/片段/"}],"tags":[{"name":"文学","slug":"文学","permalink":"http://maiernte.github.io/wiki/tags/文学/"}]},{"title":"简短书摘","slug":"摘录/片段/简短书摘","date":"2019-07-29T07:00:50.000Z","updated":"2019-07-31T03:51:35.000Z","comments":true,"path":"brief-notions-collection.html","link":"","permalink":"http://maiernte.github.io/wiki/brief-notions-collection.html","excerpt":"癌症 “以我个人有限的接触癌症的经历总结，似乎越是传统意义上的“好人”越是容易生癌。这些人往往脾气很好，性格内向，照顾周围，万事替别人考虑，总是在乎别人眼里的自己，总是担心一些可能发生的小概率负面事件。” —— 冯唐. “无所畏【冯唐2018全新作品，一部坦露自我的真诚之作！】。”","text":"癌症 “以我个人有限的接触癌症的经历总结，似乎越是传统意义上的“好人”越是容易生癌。这些人往往脾气很好，性格内向，照顾周围，万事替别人考虑，总是在乎别人眼里的自己，总是担心一些可能发生的小概率负面事件。” —— 冯唐. “无所畏【冯唐2018全新作品，一部坦露自我的真诚之作！】。” 暗算 金风未动蝉先觉，暗算无常死不知。 青山只会明今古，绿水何曾洗是非? 五个人生思维 能把问题清楚的写下来，就是解决了问题的一半。发现问题比解决问题更重要。 墨菲定律：如果事情有变坏的可能，那它就一定会发生。 吉伯特法则：真正的危险是没有人告诉你有危险。「人在事中迷，就怕没人提」。 福克兰定律：当你不知道如何行动时，最好的行动就是不要行动，最好的决策就是没有决策。 费斯诺定律：人有两只耳朵，却只有一张嘴巴。就是说，人应该多听少讲。","categories":[{"name":"摘录","slug":"摘录","permalink":"http://maiernte.github.io/wiki/categories/摘录/"},{"name":"片段","slug":"摘录/片段","permalink":"http://maiernte.github.io/wiki/categories/摘录/片段/"}],"tags":[{"name":"文学","slug":"文学","permalink":"http://maiernte.github.io/wiki/tags/文学/"}]},{"title":"零散句子","slug":"摘录/片段/零散句子","date":"2019-07-29T06:50:50.000Z","updated":"2019-08-04T18:15:28.000Z","comments":true,"path":"funny-sloga-collection.html","link":"","permalink":"http://maiernte.github.io/wiki/funny-sloga-collection.html","excerpt":"幸福的路有两条 中岛美雪写的歌《幸福》（任贤齐翻唱的伤心太平洋）：到幸福的路有两条，一条是所有愿望都成真，另外一条是把愿望这东西扔掉。","text":"幸福的路有两条 中岛美雪写的歌《幸福》（任贤齐翻唱的伤心太平洋）：到幸福的路有两条，一条是所有愿望都成真，另外一条是把愿望这东西扔掉。 Matrix Cypher: You know, I know this steak doesn’t exist. I know that when I put it in my mounth, the Matrix is telling my brain that it is … juicy and delicious. After nine years, you know what I realize? en … Ignorance is bliss 几个顺口溜 认认真真说假话，扎扎实实走过场。 失败乃成功之母——失败生了100个孩子，其中一个叫「成功」，其它99个还叫「失败」。 “人类一思考，上帝就发笑。” —— “你一说要学什么东西，人们就发笑。” 晚上想想千条路，早上起来走原路。（有个共同特点：不困难、不痛苦） 暂时的失败要比暂时的成功要好得多。 别让「半途而废」 成为你唯一坚持下来的事情。 世上没有听一遍就管用的道理。 （你的脑袋）不要做别人思想的跑马场。 路是自己走的，脚上的泡也是自己好的。 忍一时越想越气，退一步越想越亏。（总是忍的人，从来都不开心。总是退让的人，却从来没有真的海阔天空） 遇到烂事不纠结，遇到烂人不纠缠。 每个人都想努力做，却总是做不好。 曹操评袁绍：「色厉胆薄，好谋无断，干大事而惜身，见小利而忘命。」","categories":[{"name":"摘录","slug":"摘录","permalink":"http://maiernte.github.io/wiki/categories/摘录/"},{"name":"片段","slug":"摘录/片段","permalink":"http://maiernte.github.io/wiki/categories/摘录/片段/"}],"tags":[{"name":"文学","slug":"文学","permalink":"http://maiernte.github.io/wiki/tags/文学/"}]},{"title":"典故","slug":"摘录/典故","date":"2019-07-29T06:45:50.000Z","updated":"2019-07-31T03:51:35.000Z","comments":true,"path":"old-stories-collection.html","link":"","permalink":"http://maiernte.github.io/wiki/old-stories-collection.html","excerpt":"豫让刺赵简子 晋毕阳之孙豫让，始事范、中行氏而不说，去而就知伯，知伯宠之。及三晋分知氏，赵襄子最恐知伯，而将其头以为饮器。豫让遁逃山中曰：“磋乎！士为知己者死，女为悦己者容。吾其报知氏之仇矣。”","text":"豫让刺赵简子 晋毕阳之孙豫让，始事范、中行氏而不说，去而就知伯，知伯宠之。及三晋分知氏，赵襄子最恐知伯，而将其头以为饮器。豫让遁逃山中曰：“磋乎！士为知己者死，女为悦己者容。吾其报知氏之仇矣。” 乃变姓名，为刑人，入宫涂厕，欲以刺襄子。 襄子如厕，心动，执问涂者，则豫让也。 刃其曰：“欲为知伯报仇！”左右欲杀之。 赵襄子曰：“彼义士也，吾谨避之耳。且知伯已死，无后，而其臣至为报仇，此天下之贤人也。”卒释之。 豫让又漆身为厉，灭须去眉，自刑以变其容，为乞人而往乞，其妻不识，曰：“状貌不似吾夫，其音何类吾夫之甚也。”又吞炭为哑，变其音。 其友谓之曰：“子之道甚难而无功，谓子有志，则然矣，谓子知，则否。以子之才，而善事襄子，襄子必近幸子；子之得近而行所欲，此甚易而功必成。”豫让乃笑而应之曰：“是为先知报后知，为故君贼新君，大乱君臣之义者无此矣。凡吾所谓为此者，以明君臣之义，非从易也。且夫委质而事人，而求弑之，是怀二心以事君也。吾所为难，亦将以愧天下后世人臣怀二心者。” 居顷之，襄子当出，豫让伏所当过桥下。 襄子至桥而马惊。 襄子曰：“此必豫让也。”使人问之，果豫让。 于是赵襄子面数豫让曰：“子不尝事范中行氏乎?知伯灭范中行氏，而子不为报仇，反委质事知伯。知伯已死，子独何为报仇之深也?”豫让曰：“臣事范中行氏，范中行氏以众人遇臣，臣故众人报之；知伯以国士遇臣，臣故国士报之。”襄子乃喟然叹泣曰：“嗟乎，豫子！豫子之为知伯，名既成矣，寡人舍子，亦以足矣。子自为计，寡人不舍子。”使兵环之。 豫让曰：“臣闻明主不掩人之义，忠臣不爱死以成名。君前已宽舍臣，天下莫不称君之贤。今日之事，臣故伏诛，然愿请君之衣而击之，虽死不恨。非所望也，敢布腹心。”于是襄子义之，乃使使者持衣与豫让。 豫让拔剑三跃，呼天击之曰：“而可以报知伯矣。”遂伏剑而死。 死之日，赵国之士闻之，皆为涕泣。 —— 《战国策》","categories":[{"name":"摘录","slug":"摘录","permalink":"http://maiernte.github.io/wiki/categories/摘录/"}],"tags":[{"name":"历史政治","slug":"历史政治","permalink":"http://maiernte.github.io/wiki/tags/历史政治/"}]},{"title":"缠中说禅","slug":"摘录/片段/缠中说禅","date":"2019-07-29T06:40:50.000Z","updated":"2019-07-31T03:51:35.000Z","comments":true,"path":"funny-things-collection.html","link":"","permalink":"http://maiernte.github.io/wiki/funny-things-collection.html","excerpt":"","text":"[TOC] 诗词 满江红 万古长空，今犹昔，一朝风月。何处住？ 春花夏雨，秋鸿冬雪。 百代浮华皆作土，千江吸尽无堪说。 问世间，多少梦消磨、英雄血。 星旋轨，天补裂，山崩柱，河倾缺。 捣神宫鬼府，凤巢龙穴。 怒剑穿云惊浩宇，狂涛卷日横孤筏。 纵生死，劫火洗乾坤，齐欢悦。 临江仙 浊水倾波三万里，愀然独坐孤峰。 龙潜狮睡侯飙风。 无情皆竖子，有泪亦英雄。 长剑倚天星斗烂，古今过眼成空。 乾坤俯仰任穷痛。 半轮沧海上，一苇大江东。 卜算子 本是后山人，偶做堂前客。 醉舞经阁半卷书，坐井说天阔。 大志戏功名，海斗量祸福。 论到囊中羞涩时，怒指乾坤错。 —— 丁元英","categories":[{"name":"摘录","slug":"摘录","permalink":"http://maiernte.github.io/wiki/categories/摘录/"},{"name":"片段","slug":"摘录/片段","permalink":"http://maiernte.github.io/wiki/categories/摘录/片段/"}],"tags":[{"name":"文学","slug":"文学","permalink":"http://maiernte.github.io/wiki/tags/文学/"}]},{"title":"名人语录","slug":"摘录/片段/名人语录","date":"2019-07-29T06:40:50.000Z","updated":"2019-07-31T03:51:35.000Z","comments":true,"path":"prominaent-slogen-collection.html","link":"","permalink":"http://maiernte.github.io/wiki/prominaent-slogen-collection.html","excerpt":"","text":"祈祷文 上帝，请赐予我平静让我可以接受我所不能改变的，赐予我勇气让我可以改变我能够改变的，赐予我智慧以分辨这二者的不同。 God grand me the serenity to accept the things I cannot change, Courage to change the things I can, and wisdom to know the difference. 尼采 He who has a strong enough why can bear almost any how. – Friedrich Nietzsche 苏格拉底 Beware the barrenness of a busy life. – Socrates 亚里士多德 We are what we repeatedly do. Excellence, then, is not an act, but a habit. – Aristotle 维克多 弗兰克 人所拥有的任何东西都可以被剥夺，唯独人性最后的自由——也就是在任何境遇中选择一己态度和生活方式的自由——不能被剥夺。 马克吐温 让你陷入困境的并不是这个世界；真正让你陷入困境的，是这个世界最终并非你所想象。 赛斯 每一个心愿都预设了对于一个缺憾的承认，每一个挑战也预设了有一个要征服的阻碍。 叔本华 痛苦和无聊是人类幸福的两个死敌。欲望不满足就痛苦，满足就无聊。人生如同钟摆在痛苦和无聊两个极点之间摆动。离开一个极点就意味着正在走向另一个极点。 谚语 Don’t shoot the messenger. 英文有句谚语叫“不要枪毙信使”。枪毙信使并不能改变坏消息。 曾国藩 既往不恋，当下不染， 未来不迎。天涯：染，不被当下的情绪感染。要跳出情绪来观察当下。 倚天照海花无数， 流水高山心自知。 久利之事勿为，众争之地勿往。 勿以小恶弃人大美， 勿以小怨忘人大恩。 宗棠 人生最不幸處，是偶一失言而禍不及，偶一失謀而事倖成，偶一恣行而獲小利， 後乃視為故常，而恬不為意。則莫大之患，由此生矣。 俞敏洪 优秀是一种习惯。","categories":[{"name":"摘录","slug":"摘录","permalink":"http://maiernte.github.io/wiki/categories/摘录/"},{"name":"片段","slug":"摘录/片段","permalink":"http://maiernte.github.io/wiki/categories/摘录/片段/"}],"tags":[{"name":"文学","slug":"文学","permalink":"http://maiernte.github.io/wiki/tags/文学/"}]},{"title":"搞笑段子","slug":"摘录/娱乐/搞笑段子","date":"2019-07-29T06:40:50.000Z","updated":"2019-07-31T03:51:35.000Z","comments":true,"path":"funny-things-collection.html","link":"","permalink":"http://maiernte.github.io/wiki/funny-things-collection.html","excerpt":"慢慢就习惯了 某人四十多岁了还碌碌无为，于是跑去找算命先生。算命先生掐指一算，然后问：“一个好消息，一个坏消息，你先听哪个？”哥们说：“那就先听坏的吧”。算命先生说：“坏消息是，你四十岁之前穷困潦倒……”那哥们眉头一挑，问：“那好消息呢？”算命先生幽幽的说到：“四十岁以后，你就习惯了。”","text":"慢慢就习惯了 某人四十多岁了还碌碌无为，于是跑去找算命先生。算命先生掐指一算，然后问：“一个好消息，一个坏消息，你先听哪个？”哥们说：“那就先听坏的吧”。算命先生说：“坏消息是，你四十岁之前穷困潦倒……”那哥们眉头一挑，问：“那好消息呢？”算命先生幽幽的说到：“四十岁以后，你就习惯了。” 身体就像一辆车子 身体就像一辆车子，还新的时候，遇到问题花点钱修理一下，就又能风驰电掣。车子越旧，修理费越高。旧到不行了，修理费比换辆新的还贵，还修个啥劲？你「身体」这家企业，当对它的投入远大于产出的时候，上帝都要考虑撤资了，你还拼命追加投资？ 凌凌漆 外景：深圳某一市场猪肉摊前。 某女甲：你以为你匿喺度就揾唔到你咩？ 冇用架！ 你啲咁出色嘅难忍（男人），无论喺边度，都好似漆黑中嘅萤火虫一样，咁鲜明，咁出众。 你忧郁嘅眼神，唏嘘嘅须根，神乎其技嘅刀法，同埋嗰杯Dry Martine，都彻底噉将你出卖咗。 不过，你虽然系咁出色，始终行有行规，无论典（点）你都要找埋寻晚嗰条过夜数，叫鸡唔使畀钱呀？ 凌凌漆：我重估我哋嘅交往系建筑喺感情之上，估唔到，原来都系一盘生意。 某女甲：讲感情都要畀钱架。 凌凌漆：明白嘅，有一早畀咗你啦。 但系近排兴食斋，冇乜人帮衬，不如噉啦，攞篘猪肉返去顶住数先啦。 嚟吖，粗粗地，唔该。 某女甲：你好嘢，山水有山逢。 （某女甲提猪肉转身走。） 凌凌漆： 有兴趣嘅不如今天再相逢啦。 （某女甲把猪肉投向凌凌漆） 凌凌漆（用刀接住猪肉）：悭番。 （顺势将猪肉切成两半，挂喺猪肉钩上） 某女乙：咩话？ 个衰佬唔肯畀钱？ 我帮你拖马喐佢！ 某女甲：算啦，话到尾，佢始终都系一个独一无二、风度翩翩嘅猪肉佬。 （阿漆依着猪肉摊，品着白兰地。） 情人节广告 14号晚报名打麻将，只报不打，报名费100元，报完名爱干嘛干嘛，爱去哪去哪，爱跟谁跟谁。本人承诺：保证任何人问你的行踪都可以证明你跟我一起打麻将了，你所有报不了的花费都可以说成是被我赢了，具体时间为2月14日17点至凌晨2点，时间地点任选。额外业务：如支付200元，还提供大牌合照以及朋友圈回复业务，做戏做全套！小本经营，童叟无欺！有意者私聊。","categories":[{"name":"摘录","slug":"摘录","permalink":"http://maiernte.github.io/wiki/categories/摘录/"},{"name":"娱乐","slug":"摘录/娱乐","permalink":"http://maiernte.github.io/wiki/categories/摘录/娱乐/"}],"tags":[{"name":"娱乐","slug":"娱乐","permalink":"http://maiernte.github.io/wiki/tags/娱乐/"}]},{"title":"如何系统化管理Hexo博客","slug":"IT/Web/如何系统化管理Hexo博客","date":"2019-07-28T19:30:00.000Z","updated":"2019-08-15T21:51:57.000Z","comments":true,"path":"how-to-manage-big-hexo-blog.html","link":"","permalink":"http://maiernte.github.io/wiki/how-to-manage-big-hexo-blog.html","excerpt":"管理？","text":"建立博客的初衷 虽说这篇笔记的题目是「如何管理」，为了更好的回答这个问题，必须要回到最原始问题上来——我为何要建一个博客，而且是费那么大劲。而我的初衷是建立和维护一个属于自己的「知识库」。通常来说，为了达成这个目的，更好的选择是笔记APP，而不是博客。我确实也是这么做的。一开始用印象笔记，因为它死活不支持多级目录，我又转到国内的为知笔记，做了五年的VIP用户。但它五年来似乎从没改进过。随着近年来有道云异军突起，以及IOS生态圈中琳琅满目的APP，如熊掌记、Notion、谷歌的Keep、阿里的语雀。。。。。。各有各的惊艳，各有各的槽点。 随着国外的Github和国内的Coding等公司，相继开放永久免费、不限流量的静态网页托管平台，如Github Pages。我走上了自建Bolg的不归路。当然不是说，搭博客这条路完全没有槽点。而是——自己造的孽，含着泪也会继续造下去。至少它满足了我以下几点「必不可少」的要求： [x] 多级目录 [x] 支持Markdown文本 [x] 支持分类、标签、以及站内全文检索 [x] 没有IOS、Windows、Android等平台限制 说白了，我是利用Github提供的免费平台，把Blog当笔记本来用。最后选了Hexo，简单易用、界面绚丽、插件丰富。除开自用的「知识平台」功能以外，偶尔还能发发博文装大尾巴狼，也是蛮不错的感觉。 网上介绍怎么搭建Hexo以及添加绚丽功能的帖子海了去了，但我基本没有发现分享「如何管理」的。因为绝大多数这些博主，搭建Hexo只是用来玩一阵子。回头有更新更好玩的东西，就跑去玩别的了。极少数有博客，站内文章超过50篇的。所以，对他们来说，根本不存在——管理——这个议题。 虽然Hexo在逻辑上支持分类和标签，但物理上它把所有的Post都放到一个单一的目录下面。而我是打算把它当作知识库，长期、密集使用的。可预见的将来，站内笔记会非常多。不但写新贴，还可能经常更改旧贴。那势必会带来一个问题：如何管理数量少日益膨胀的笔记？ 解决思路 我能想到的办法很简单，也很传统。就是不但逻辑分类，而且也必须物理上分目录存放。理论上在自己的PC分目录保存就好了。但我有好几台电脑，单位一台、自己Windows一台、Mac一台，还有平板。为了让能在不同的电脑上能随时修改、添加笔记，必须放在托管在云端。 硬件 没有必要租用传统的VPS，太贵了，而且连10%的运算能力都用不上。用共享的Web Hosting就完全能解决需求。比如百度云，或者Azure的Web App。而我是租用 1&amp;1 公司的Web Hosting，每个月 1€ 1 CPU 500M 内存 20G SSD 就算那么低的运算能力，平时我的网站也用不到25%的运算能力。应付起啦，绰绰有余。 软件 我采用了MM-Wiki 管理平台（以下简称维基平台）。这是一个非常优秀的开源项目，具体请参看作者的文档。部署超级简单，可以说一键部署，然后就可以用起啦了。简单来说这个平台有以下几个特点： [x] 支持空间管理、空间内支持多级目录。 [x] 支持Markdown编辑。 [x] 支持附件。 [x] 有修改记录。 [ ] 不支持内容搜索，只支持笔记的题目搜索。 [ ] 标签只支持到空间级别，目录和笔记都没有标签。 但它跟Hexo博客搭配使用，就完全满足我的需求了。其实Hexo博客中，有个仿维基的Wikitten主题，跟MM-Wiki项目非常像。但毕竟不是所有内容，都适合摆在公开的地方。以MM-Wiki 作为私用平台，增加了私隐保护。 我的做法是，在维基平台中开辟一个独立的空间，用来存放博客上所有的源文件。而在Github Pages上托管的静态网站其实都是HTML文件。所有的改动，都必须在源Markdownn文件上修改，然后再推送到博客网站的。 在维基平台修改、添加、删除笔记的源文件。然后复制到Hexo的项目目录，编译后推送到Github Pages站点。维基百科内置的在线版Editor.md编辑器，非常美观实用。基本上我都不太需要在自己的电脑上用Typora等编辑器写MD文本了。思路有了，实现起来还是有一点问题。 难点的解决办法 首先，在维基平台内，MD文件是分目录存储的。这个目录不能直接拷贝到Hexo的_post目录。懒得每修改一个，或者添加一个笔记，就立马拷贝到博客中去。解决笔记复制的问题。 其次，笔记的物理保存目录，必须跟Hexo上的「分类」是一一对应的。否则，管理起来会很麻烦。在维基平台移动了笔记的保存目录后，在一一修改内容，也是很吃力的事情。 笔记复制的解决办法 说来也超级简单，一个脚本命令就够了。先用find命令在指定目录找出所有的MD文件，然后通过管道传给复制命令cp，搞定！ 1find /root/bibliothek/markdowns/博客草稿/ -type f -name \"*.md\" -exec cp &#123;&#125; /home/_post/ \\; 然后hexo d -g编译、发布，结束！ 管理笔记的分类 这个问题有一点麻烦。因为必须打开每一个文件，读取笔记的头文件描述，然后再比较跟文件的物理位置是否符合。我尝试用shell脚本解决这难题。无奈我的的shell脚本功底是在很差，搞半天未果就放弃了。用Java或者.NET Core啥的，正儿八经写一个Console程序，也不是不行。但有种杀鸡用牛刀的感觉。 最后想到了用Javascript。因为编译Hexo是需要安装Node.js的，写一段JavaScript，让Node跑起来。通往罗马的道路千万条，选一条自己最熟悉的就完了。 点击查看代码 上面这个脚本使用的都是我个人设置，你如果要用的话需要改成自己实际文件目录。","categories":[{"name":"IT","slug":"IT","permalink":"http://maiernte.github.io/wiki/categories/IT/"},{"name":"Web","slug":"IT/Web","permalink":"http://maiernte.github.io/wiki/categories/IT/Web/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://maiernte.github.io/wiki/tags/Hexo/"}]},{"title":"《驴得水》——影评","slug":"摘录/《驴得水》影评","date":"2019-07-28T13:17:19.000Z","updated":"2019-08-15T21:48:56.000Z","comments":true,"path":"lvdeshui-film.html","link":"","permalink":"http://maiernte.github.io/wiki/lvdeshui-film.html","excerpt":"","text":"追求自由的人，疯了，死了。 不愿低头的人，成了听话的牲口。 宽容大度的人，成了唯利是图的小人。 淳朴憨厚的人，成了狡诈的恶棍。 正面积极的人，用谎言掩盖真相。 你觉得这是电影吗？其实，这是现实。我们先来看一下电影故事讲的是什么： 一群怀揣伟大梦想的人，却敌不过山区缺水的现实，养了一头驴拉水。上头却不给养驴费，于是就把驴谎报成老师。上头来检查，不能因为一头驴毁了梦想啊。于是为了捍卫梦想的道路，却失去了梦想的意义。《驴得水》的海报上说，“讲个笑话，你可别哭啊”。 就像另一句笑话讲的那样， “小的时候我想拯救世界，长大后却发现世界都拯救不了我”。 好笑，但却想哭。 谁TM还没点梦想啊。但有时梦想很脆弱，甚至敌不过一碗炸酱面。你想让自己闪闪发光，但总得先养活自己，饿着肚子的人怎么去谈梦想？这也是很多刚毕业不久的人，所要面对的最为矛盾的情况。“我有很多想法，有很多想做的事。但我现在没钱、没人脉、没背景，甚至还没长相。想要出去闯一片天地， 但还要为一日三餐和落脚地打拼。梦想是高潮，现实却是性冷淡。还能怎么办呢？先养活自己再说吧”。于是，你找了一份莫名其妙的工作，你一日三餐是不愁了，你做着日复一日重复的工作，但是你不敢停，你越来越迷茫，越来越看不清生活的方向。 你害怕那种怀揣梦想，但却又碌碌无为的日子，但你却不知道从哪里开始改变。于是你只能在焦虑中慢慢对现实妥协，然后你变成了自己曾经最讨厌的那种人。冷漠、没有激情、不思进取、浑浑噩噩，就像影片中的人物一样。曾经那些他们坚信的东西在面对现实时，都变得不堪一击。铁男说，“我没有办法啊，你知道子弹从脸上呼啸而过的感觉吗”？像不像我们经常说的，“我没办法啊，现实就是这样”。 是啊，现实就是这样！作为芸芸众生，普通屁民，谁TM还没被现实强奸过啊。但想要活得更好，重要的不是治愈，而是带着病痛活下去。而且我们要清醒的认识到一个事实，有时我们之所以像傻逼一样努力，不是为了改变世界，而是为了不让世界改变我们。或许，这才是我们对这个世界最大的善意。","categories":[{"name":"摘录","slug":"摘录","permalink":"http://maiernte.github.io/wiki/categories/摘录/"}],"tags":[{"name":"影视","slug":"影视","permalink":"http://maiernte.github.io/wiki/tags/影视/"}]},{"title":"编辑器工具使用技巧汇总","slug":"IT/Tools/编辑器工具使用技巧汇总","date":"2019-07-27T06:24:33.000Z","updated":"2019-09-01T17:11:47.000Z","comments":true,"path":"Editor-Skills-Summary.html","link":"","permalink":"http://maiernte.github.io/wiki/Editor-Skills-Summary.html","excerpt":"VSCode Wechseln zwischen Text-Editor und Terminal Command+K+S oder in Menü Code-&gt;Pereferenc-&gt;Hotky, öffnet Hot-Key Editor Fenster. Tip terminal in Suchfeld, findet die Binding `^``, löscht diese Einstellung. Sucht den “workbench.action.terminal.focus”, bindet es mit Key ⌃&lt;. Sucht den “workbench.action.focusActiveEditorGroup”, bindet es wiederum mit Schlüssel ⌃&lt;, und Wenn-Kondition “terminalFocus”.","text":"VSCode Wechseln zwischen Text-Editor und Terminal Command+K+S oder in Menü Code-&gt;Pereferenc-&gt;Hotky, öffnet Hot-Key Editor Fenster. Tip terminal in Suchfeld, findet die Binding `^``, löscht diese Einstellung. Sucht den “workbench.action.terminal.focus”, bindet es mit Key ⌃&lt;. Sucht den “workbench.action.focusActiveEditorGroup”, bindet es wiederum mit Schlüssel ⌃&lt;, und Wenn-Kondition “terminalFocus”. Typora 更多更详细的内容请参阅 Typora Wiki Typora Wiki (wiki-website Project) 个性化快捷键 Windows 文件—&gt;偏好设置—&gt;往高级设置 ，点击看到两个json格式的文件，打开第二个（conf.user.json）, 用记事本打开，第17行keyBinding,在大括号中写 代码块：“你要设置的快捷键”，比如我的是代码块:Ctrl+Alt+P,保存文件，重启typora即可生效。更详细介绍 12345678// Custom key binding, which will override the default ones. \"keyBinding\": &#123; // for example: // \"Always on Top\": \"Ctrl+Shift+P\" \"注释\":\"Ctrl+Alt+/\", \"代码块\":\"Ctrl+Alt+P\", \"打开文件夹…\":\"Ctrl+Alt+O\" &#125;, Mac 官方说明 需要到系统偏好设置—&gt;键盘--&gt;快捷键--&gt;应用快捷键那边设置。找到 Typora.App，菜单名称填 代码，然后输入希望的快捷键。我的设置是***⌃+⌘+C***。 更改风格 开发好的工具 如何客制化格式 简单使用：添加 base.user.css 文件，并改变行内代码的颜色，以及公式颜色 123456789# 行内代码code &#123; color: red&#125;# 行内公式.MathJax_SVG&#123; color: DarkBlue;&#125; Typora的代码使用 CodeMirror 项目，尝试了一下修改 base.user.css 文件确实可以改变代码段的高度，并带滚动。但同时也限定了进行代码编辑时的整个窗口高度。所以没有用 123456789# 缺点：打开源代码模式的时候，整个页面也被限制成了只有300px高.CodeMirror &#123; max-height: 300px;&#125;.CodeMirror-scroll &#123; overflow-y: auto; overflow-x: auto; max-height: 300px;&#125; 注意到书写模式的时候，整个编辑器都被包裹在 &lt;div id=&quot;write&quot;&gt; &lt;/div&gt; 里面。在源代码模式的时候，没有这个 write 元素的包裹，而整个源代码窗口都被作用为一个 CodeMirror 元素对待。因此，作一些改变就能满足要求 1234567891011#write .CodeMirror &#123; max-height: 350px;&#125;# 设定上下 padding 会让滚动条在小代码区消失#write .CodeMirror-scroll &#123; overflow-y: auto; overflow-x: auto; max-height: 330px; padding-top: 10px; padding-bottom: 10px;&#125; 1# 避免只有一行的代码区，因为会显示滚动条，不好看。一行代码就用行内代码好了。 如果要限制来自 GistHub 的代码高度，只能限定其父元素 iframe 123iframe &#123; max-height: 500px;&#125; Windows版的 Typora 的数学模块保存在 path/resource/app/lib.asar 压缩文件中。需要用asar解压 如何查看 asar 内部结构 asar 如何加密解密 123npm install -g asarasar extract 压缩文件 解压文件夹asar pack 文件夹 压缩文件名 文本搜索 打开的单篇文章内搜索: Windows Control + F Mac ⌘+F 文件夹内的搜索 Windows Control + Shift + F Mac ⇧+⌘+F","categories":[{"name":"IT","slug":"IT","permalink":"http://maiernte.github.io/wiki/categories/IT/"},{"name":"Tools","slug":"IT/Tools","permalink":"http://maiernte.github.io/wiki/categories/IT/Tools/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://maiernte.github.io/wiki/tags/工具/"}]},{"title":"Ubuntu重设root用户密码","slug":"IT/Tools/Ubuntu重设root用户密码","date":"2019-07-26T15:51:03.000Z","updated":"2019-08-14T06:34:27.000Z","comments":true,"path":"ubuntu-reset-root-pw.html","link":"","permalink":"http://maiernte.github.io/wiki/ubuntu-reset-root-pw.html","excerpt":"","text":"重设密码 原理上参考这份中文指引就好。由于我的服务器是IONOS公司的，这里主要记录IONOS的官方指引。（严格按照步骤） 12网址 www.ionos.de/hilfe# 选择 Server &amp; Cloud Infrastructure 打开 KVM-Konsole 在用户管理平台软重启系统 Soft-Restart 在 KVM-Konsole 这边按 ESC 键 当出现类似一下界面，按 E 键 然后会来到这个界面。 用上下键移动到“linux。。。”开始的那一行，并左右键移动到这行的末尾，空格，输入 init=/bin/bash 按 F10 开始重启。等完成，进入命令模式后，输入以下命令。 12345mount -o remount,rw /passwdEnter new UNIX password:Retype new UNIX password:passwd: password updated successfull 最后输入命令重启系统！ 1reboot -f 设置公共SSH 在配置 github 的时候已经生成了 ssh-key ，可以用以下方法。 123456cd ~/.sshcp id_rsa.pub authorized_keysssh-copy-id -i ~/.ssh/id_rsa.pub root@217.160.61.19 # 我的用户名和服务器地址，默认端口 22# 指定端口号为2212：ssh-copy-id -i ~/.ssh/id_rsa.pub -p 2212 user@ipssh root@217.160.61.19 # 登录并输入密码，第二次就不再需要密码了。","categories":[{"name":"IT","slug":"IT","permalink":"http://maiernte.github.io/wiki/categories/IT/"},{"name":"Tools","slug":"IT/Tools","permalink":"http://maiernte.github.io/wiki/categories/IT/Tools/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://maiernte.github.io/wiki/tags/工具/"}]},{"title":"搭建Hexo博客的流水账","slug":"IT/Web/搭建Hexo博客的流水账","date":"2019-07-25T03:49:15.000Z","updated":"2019-08-15T10:44:25.000Z","comments":true,"path":"how-build-my-hexo-blog.html","link":"","permalink":"http://maiernte.github.io/wiki/how-build-my-hexo-blog.html","excerpt":"建网过程中的一些流水账。以备将来查询。","text":"建立网站 Github配置 输入命令 ssh-keygen -t rsa -b 4096 -C &quot;myname@gmail.com&quot;。 密码 T1。(下列展开后复制) 将文件 ~/.ssh/id_rsa.pub 中的内容复制到 Github 的SSH-Key 内就可以了。(备份文件已上传百度网盘) 在Github上新建SSH-Key名称为gmail 具体步骤参阅此文章 123456789101112ssh-keygen -t rsa -b 4096 -C &quot;username@gmail.com&quot;[Enter][password T..1]eval &quot;$(ssh-agent -s)&quot;ssh-add -K ~/.ssh/id_rsacd ~cd .sshlsvim id_rsa.pub(然后复制钥匙串) 测试公匙 123$ ssh -T git@github.comHi username! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 安装Hexo 参考资料1 7。 安装node.js 因为以前已经安装过，所以跳过。 安装 Hexo $ npm install hexo-cli -g 创建网站 1234mkdir mywikicd mywikihexo initnpm install 生成静态页面 hexo g or hexo generate 启动本地网站服务 hexo s or hexo server 网站一般会运行在 http://localhost:4000/ Press Ctrl+C to stop. 用pow做服务本地运行 Install 1$ curl get.pow.cx | sh Setup Symlink the folder into ~/.pow 12$ cd ~/.pow$ ln -s /path/to/test 发布到Github 终于搭建好站点部署环境啦，那么要怎么样将我们本地生成预览好的页面发布到github上呢？很简单，Follow! 首先，打开blog目录下的_config.yml，找到deploy段，配置成这样 deploy: type: git repository: git@github.com:yourname/yourname.github.io.git branch: master 注意将代码里面的yourname换成你账号的username。 设置git身份信息 git config --global user.name “你的用户名” git config --global user.email “你的邮箱” 执行以下指令进行部署 hexo d -g 如果提示没找到git，请先执行以下指令 cnpm install hexo-deployer-git --save 再次部署后，浏览器打开 https://yourname.github.io 就可以看到刚才本地预览页面。 网站基本配置 Next 主题 主题配置文件说明 点击显/隐内容 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970# Hexo 站点配置文件## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# 网站配置title: Hexo # 网站标题subtitle: # 网站副标题description: # 网站描述author: John Doe # 你的昵称language: # 网站使用的语言(英文:en, 简体中文:zh-Hans，繁体中文:zh-tw)timezone: # 网站时区，用于生成页面时填充相关时间，默认使用电脑时区，一般不用改# URL## 如果你的站点要放入子目录, 请将url设置为'http://yoursite.com/child' 并将根目录设置为'/child/'url: http://yoursite.com # 站点网址root: / # 网站根目录permalink: :year/:month/:day/:title/ #文单的永久链接格式permalink_defaults: # 永久链接中各部分的默认值# 目录source_dir: source # 资源文件夹，这个文件夹用来存放博客内容public_dir: public # 公共文件夹，这个文件夹用来存放生成的站点静态文件tag_dir: tags # 标签文件夹archive_dir: archives # 归档文件夹category_dir: categories # 分类文件夹code_dir: downloads/code # Include code文件夹i18n_dir: :lang # 国际化文件夹，存放各种语言定义skip_render: # 跳过指定文件的渲染# 写作new_post_name: :title.md # 新文章的文件名称default_layout: post # 预设布局titlecase: false # 把标题转换为 title caseexternal_link: true # 在新标签中打开链接filename_case: 0 # 把文件名称转换为 (1) 小写或 (2) 大写render_drafts: false # 显示草稿post_asset_folder: false # 启动 Asset 文件夹relative_link: false # 把链接改为与根目录的相对位址future: true # 显示未来的文章highlight: # 代码块的设置 enable: true line_number: true auto_detect: false tab_replace:# 分类 &amp; 标签default_category: uncategorized # 默认分类category_map: # 分类别名tag_map: # 标签别名# 日期 / 时间格式## Hexo 使用 Moment.js 来解析和显示时间## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DD # 日期格式time_format: HH:mm:ss # 时间格式# 分页## 每页显示的文章量 (0 = 关闭分页功能)per_page: 10pagination_dir: page# 扩展## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape # 主题# 部署## Docs: https://hexo.io/docs/deployment.htmldeploy: type: Wikitten主题 具体配置参考开发者说明，更详细的描述参阅hexo-theme-icarus。为了与主题Next不冲突，作以下修改。 自行修改 tags, about,categories 等index.md，而不能从主题复制，覆盖站点原有设置。 languages\\zh-CN.yml 重命名为 zh-Hans.yml _config.yml 菜单作以下更改 123456menu: 首页: / 归档: /archives/ 分类: /categories/ 标签: /tags/ 关于: /about/ thumbnail: true 使得每个post在快速列表里，显示图标。但就是每个帖子都要设定，很麻烦。 post 中的 toc 要设置为 true，如果需要显示目录的话。 同时部署两个项目 第一个项目使用 Github 上面默认的 Github Pages，即 username.github.io 。在站点配置文件中如下： 12345678url: http://username.github.ioroot: /......deploy: type: git repository: git@github.com:username/username.github.io.git branch: master 第二个站点开通一个 普通的repository，添加名为gh-pages 的Branch，并将gh-pages设为默认Branch。我将第二个仓库命名为 wiki ，那第二个站点就运行在https://username.github.io/wiki`次级目录下面。 站点配置文件更改如下： 12345678url: http://username.github.io/wikiroot: /wiki/......deploy: type: git repository: git@github.com:username/wiki.git branch: gh-pages 同样用 hexo d -g 部署命令发布，两个站点就都运行起来了。 为了使得两个项目使用同一个笔记资源，将站点中的 source 文件夹移到项目意外，将配置文件里的 source_dir: source 改为 source_dir: ../source(这里使用了相对目录)。 参考文章 (细节已经失效，但思路值得参考) 站内搜索 安装插件 12npm install hexo-generator-search --savenpm install hexo-generator-searchdb --save 配置hexo站点主配置文件_config.yml， 添加 12345search: path: search.xml field: post format: html limit: 10000 修改next主题配置文件_config.yml，启用 local_search 1234local_search: enable: true trigger: auto top_n_per_article: 1 生成search.xml文件以及发布 12hexo ghexo d -g # 本地运行 hexo s 去除主题字样 关于添加头像、标签、分类、「关于」等具体的修改，跟着参考资料2里面的步骤做就好了。最后说说如何去掉底部强力驱动及主题字样。 找到 \\themes\\next\\layout_partials\\下面的footer.swig文件，打开： 123456789&lt;div class=\"powered-by\"&gt; &#123;&#123; __('footer.powered', '&lt;a class=\"theme-link\" href=\"https://hexo.io\"&gt;Hexo&lt;/a&gt;') &#125;&#125;&lt;/div&gt;&lt;div class=\"theme-info\"&gt; &#123;&#123; __('footer.theme') &#125;&#125; - &lt;a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\"&gt; NexT.&#123;&#123; theme.scheme &#125;&#125; &lt;/a&gt;&lt;/div&gt; 第一条是“由Hexo驱动” 的Hexo链接，把xml段删除，只留两个单引号’’。 第二条是“主题-Next.XX”，将xml段都删掉，不留引号。 123456&lt;div class=\"powered-by\"&gt; &#123;&#123; __('footer.powered', '') &#125;&#125;&lt;/div&gt;&lt;div class=\"theme-info\"&gt; &#123;&#123; __('footer.theme') &#125;&#125;&lt;/div&gt; 找到这个地方\\themes\\next\\languages\\下面的语言文件zh-Hans.yml（以中文为例）： 123footer: powered: \"由 %s 强力驱动\" theme: 主题 将上面的文字改成自己想要的即可。 添加评论功能 Gitment **此项目已经终止！**改为Disqus，以及其它评论服务。 安装功能模块。在项目的根目录： 1npm i --save gitment 在Github申请应用。settings -&gt; Developer Settings -&gt; OAuth Apps 1234Application name:随便写Homepage URL:这个也可以随意写,就写你的博客地址就行Application description:描述,也可以随意写Authorization callback URL:这个必须写你的博客地址 申请好之后点注册,然后就可以看到两个东西ClientID和Client Secret,后面会用到。 配置Gitment，打开themes/next/_config.yml: 123456789101112131415# Gitment# Introduction: https://imsun.net/posts/gitment-introduction/gitment: enable: true mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway count: true # Show comments count in post meta area lazy: false # Comments lazy loading with a button cleanly: false # Hide 'Powered by ...' on footer, and more language: # Force language, or auto switch by theme github_user: &#123;you github user id&#125; github_repo: 随便写一个你的公开的git仓库就行,到时候评论会作为那个项目的issue client_id: &#123;刚才申请的ClientID&#125; client_secret: &#123;刚才申请的Client Secret&#125; proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect redirect_protocol: # Protocol of redirect_uri with force_redirect_protocol when mint enabled 注意到这里基本上已经OK了,再看你的博客应该可以显示评论了.不过每篇博客都需要你手动初始化评论功能(如果你的历史博客很多那就一篇一篇去点吧，不过貌似有人写了批量处理脚本,没试过哈). 而由于 github 中 Issues 的 label 长度限制为最大 50 个字符，当 文章标题长度过长时，该label就会生成失败，而导致初始化错误，弹出 Validation Failed 的提示。 通过网上的搜索，发现可以使用文章创建时的时间来代替文章标题，作为这个唯一的label标签。 找到giment的配置：/themes/next/layout/_third-party/comments/gitment.swig 文件， 并找到如下部分： 12345var gitment = new &#123;&#123;CommentsClass&#125;&#125;(&#123; id: window.location.pathname, owner: '&#123;&#123; theme.gitment.github_user &#125;&#125;', repo: '&#123;&#123; theme.gitment.github_repo &#125;&#125;', ... 将id后面的路径值修改为 ‘itfanr_blog_&lt;!–￼1–&gt;’ 就可以了。 Disqus 目前只开通Disqus的评论。 开通Disqus账号，并添加一个点 应用。具体步骤参看Hexo搭建博客系列：（六）Hexo添加Disqus评论。 在主题配置文件(_config.yml)文件中找到以下代码，添加你Disqus设置的Website Name在shortname。 12345# Disqusdisqus: enable: true shortname: tian-ya-de-zhi-fu count: true 更详细请参阅网上。 新文章命名规则 发表新文章后系统崩溃。 在根目录的配置文件中找到类似的： 1234# Writingnew_post_name: 新文章.md # File name of new postsdefault_layout: post... 将其改为由时间和题目组成： 1234# Writingnew_post_name: year-:month-:day-:title.md # File name of new postsdefault_layout: post... 进阶设置 显示 首页文章显示预览 默认设定下。首页的文章每一篇都显示全文，不方便浏览。需要到主题的配置文件里将auto_excerpt 的 enable 改为 true。而length 字节表示文章预览的长度。 1234# Automatically Excerpt. Not recommand.auto_excerpt: enable: true length: 300 永久链接 新文章的名字采用了中文(见上)，中文出现在地址栏上不美观。也不利于SEO，以及增加了博文URL的层数。解决办法是给每篇文章制定链接地址。 修改网站的配置文件中永久地址的设定： 1permalink: :urlname.html 给每篇文章指定 urlname 123456title: 《少有人走的路》笔记date: 2019-07-21 00:14:37urlname: road-less-traveled-summarytags: - 心理学categories: 读书笔记 编译后新的地址为 http://mywiki.test/road-less-traveled-summary.html。看起来就清爽多了。 图片链接 开通资源文件夹，创建新文章的时候会自动建立一个与文章同名的文件夹。可以将图片或者其它资源文件放到里面（打算将思维导图放到这里）。因为自定义了文件名的方式，所以根据官方描述无效。 安装第三方插件hexo-asset-image 1npm install hexo-asset-image --save 在文章中图片的链，可以省略路径，直接引用图片名： 1![mypicture](mypicture.jpg) 修改插件代码 我在使用永久链接的时候在每篇文章的实际地址都加上了.html。文章的地址显示如下 1http://mywebsite.com/my-articel-url.html 而插件生成的图片地址如下： 1http://mywebsite.com/my-articel-url.htm/mypicture.jpg 多出了 .htm 这几个字符，而实际图片的地址应该是： 1http://mywebsite.com/my-articel-url/mypicture.jpg 找到 node_modules/hexo-asset-imge 目录下的 index.js 文件，将以下代码中的 1 改成 5，就可以正常显示图片了。 1var endPos = link.length - 1 考虑到将来项目膨胀，应该将图片放到图床，比如七牛。 站内链接 导航到站内别的文章使用以下方式就可以。 链接方式 [文章名](urlname.html) 设定代码区的高度 Hexo自身的式样暂时还没找到。其实也不太需要。如果代码不长直接显示全部就好了。太长的话不如放到GitsGitsGits，通过限制gist的高度实现。Net主题修改 next/themes/next/source/css/_custom/custom.styl ，Wikitten主题则在文件 wikitten/themes/Wikitten/source/css/_partial/article.styl 中修改。 12345.gist .gist-file.gist-data &#123; max-height: 450px;&#125; 添加注脚支持 插件项目 安装插件 npm install hexo-footnotes --save 项目配置文件 添加 123# 注意第二行的前面没有 \"-\" 符号,官方说明有. 但是会导致无法编译.plugins: hexo-footnotes 更换Markdown渲染 Markdown-it-plus 如果更换了这个渲染,就无需上面那个注脚插件, 因为已经支持了. 首先卸载掉旧的渲染, 然后安装新的. 1234npm un hexo-renderer-marked --savenpm i hexo-renderer-markdown-it-plus --save# 查看是否已经安装npm ls hexo-renderer-markdown-it-plus 然后在项目配置文件, 添加下面文字. 更深入的设置, 参看 markdown-it-plus 项目的说明文档. 12345678910markdown_it_plus: highlight: true html: true xhtmlOut: true breaks: true langPrefix: linkify: true typographer: quotes: “”‘’ plugins: 辅助功能 本地运行服务 在Mac中可以用本地服务Pow运行网站，不用每次更改重启服务器hexo s。 安装Pow 1$ curl get.pow.cx | sh 建立项目链接，myapp 是项目的名字。比如真实路径~/Project/mywiki 12$ cd ~/.pow$ ln -s /path/to/myapp 执行完以上步骤后在浏览器打开链接 http://myapp.test/ 就能看到网站。更改内容后要执行生成 命令才能看到更新hexo generate or hexo g 。 不想运行，直接把项目文件夹删除就可以。 绑定个人域名 在万网买一个顶级域名，开通后添加两个域名解释 123#记录名 主机记录 记录值CNAME www username.github.ioCNAME @ username.github.io 在项目的根目录添加一个名为 CNAME 的文件，然后填入万网注册的域名， 这里是 goldentianya.pub 。第一次我是手动添加的。添加后进入 repository 的 setting， 往下混动到 Custom domain ，可以看到系统已经自动把用户域名加进去了。 将来不希望用这个域名，域名重定向后，在浏览器输入 username.github.io 后 Chrome 会一直转向 goldentianya.pub 。需要打开开发者工具，选中 disable cache ，再刷新一遍地址就好了。 next 项目要将 CNAME 文件复制到 /themes/next/source 目录下个，编译的时候会拷贝到 public 目录。wikitten 项目不需要，域名定向以后能找到 goldentianya/wiki 站点，十分神奇。 隐藏文章 全隐藏 根据插件hext-sage-posts 作者的博文9中描述，安装插件 1npm install hexo-sage-posts --save 并将初创时的Hello-world.md 文章的Metadata中加入sage: true，文章就从网站上消失了。但在别的文章下面导航栏中，通过“下一篇”或者“上一篇”还是能被找到。被隐藏的文章其地址仍旧没有改变，只是不不出现在首页导航，和分类中而已。 从首页隐藏 为了不让太琐碎的文章充斥首页，但又可以在分类中找到。可以采用这种方式。 在文章的Metadata部分添加关键字 notshow: true。 找到 Hexo\\themes\\next\\layout\\index.swig 文件中以下部分： 123456789&#123;% block content %&#125; &lt;section id=\"posts\" class=\"posts-expand\"&gt; &#123;% for post in page.posts %&#125; &#123;&#123; post_template.render(post, true) &#125;&#125; &lt;!--修改此行--&gt; &#123;% endfor %&#125; &lt;/section&gt; &#123;% include '_partials/pagination.swig' %&#125;&#123;% endblock %&#125; 将以上代码第四行修改为 123&#123;% if post.notshow != true %&#125; &#123;&#123; post_template.render(post, true) &#125;&#125;&#123;% endif %&#125; 文章加密 安装插件 hexo-blog-encrypt 1npm install --save hexo-blog-encrypt 并在站点配置文件中启用该插件： 12encrypt: enable: true 然后在文章的头部添加上对应的字段 123456789101112---title: 文章加密date: 2019-01-04T22:20:13.000Zcategory: 教程tags: - 博客 - Hexokeywords: 博客文章密码password: TloveYabstract: 此文章含有敏感内容。message: 输入密码，查看文章--- password: 是该博客加密使用的密码 abstract: 是该博客的摘要，会显示在博客的列表页 message: 这个是博客查看时，密码输入框上面的描述性文字 Hexo Admin 安装后台管理插件 hexo-damin 123npm install --save hexo-adminhexo server -dopen http://localhost:4000/admin/ 初次运行后，设置管理账户。 1234admin: username: maiernte password_hash: $2a$10$QeeWfDwIxbJ94h8EDfplDe9aLB0uaNrjMeVGhaYnfF0BBDosDze0S secret: NamoAmitabha! 访问量统计 介绍文章 （有图） 原文（有代码） 第一步， 到Lean Cloud增添一个应用，并创建类似Counter 的类。设置成 $ 所有人可读可写 $ 在安全中心添加 Web 安全域名， 添加Blog域名，防止有人Hack我们的数据库。 按上面的文章修改 Hexo 以及主题配置。 在线交流 使用 道客 Daovoice 接入方式 将下面代码粘贴在页面的 之前。 1&lt;script&gt;(function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/5e5fa370.js&quot;,&quot;daovoice&quot;)&lt;/script&gt; 调用下面的 JavaScript 与注册用户沟通 12345678daovoice(&apos;init&apos;, &#123; app_id: &quot;5e5fa370&quot;, user_id: &quot;NO_89757&quot;, // 必填: 该用户在您系统上的唯一ID email: &quot;daovoice@example.com&quot;, // 选填: 该用户在您系统上的主邮箱 name: &quot;道客船长&quot;, // 选填: 用户名 signed_up: 1449821660 // 选填: 用户的注册时间，用Unix时间戳表示&#125;);daovoice(&apos;update&apos;); 调用下面的 JavaScript 与匿名访客沟通 1234daovoice(&apos;init&apos;, &#123; app_id: &quot;5e5fa370&quot;&#125;);daovoice(&apos;update&apos;); 完成代码粘贴后,检测是否成功接入: Ping 一下 待解决问题 [x] 文章评论 [x] 在线编辑？ [x] 使用七牛图床 [ ] 脑图摆放 (官方文档/数据文件) [x] 文件下载（可能还是要靠七牛） [x] 用submodule管理主题 在 hexo 中使用 git submodules 管理主题 [ ] SEO [ ] 访问量统计 [ ] 加速 Github Pages + CDN全站加速 [ ] 在vps上部署hexo博客的那些事 有趣插件 [x] 短地址 &amp; 指定摘要 [ ] 农历/很好的学习做插件的例子 [ ] 插入pdf 可以学习如何插入epub [ ] hexo-include 加载文本内容， html, js, text [x] Hexo-NexT给文章添加结束语 [x] Hexo-NexT接入网页在线联系功能 [ ] include markdown — 讲解详细的博客 这个也不错 1.Hexo博客搭建全攻略(一):基于Hexo+Github环境搭建 ↩2.Hexo博客搭建全攻略(二):NexT主题配置 ↩3.Hexo博客搭建全攻略(三):三方服务集成 ↩4.Hexo博客搭建全攻略(四):高级应用 ↩5.Hexo博客搭建全攻略(五):基于Github Issue搭建评论系统 ↩6.Hexo博客搭建全攻略(六):博文图片处理 ↩7.十步之内轻松搞定 Hexo + GitHub搭建个人博客 ​​ ↩8.如何优雅的 隐藏博客 ↩9.为 Hexo 博客添加隐藏文章 / 限定公开功能 ↩10.Hexo 中文文档 ↩","categories":[{"name":"IT","slug":"IT","permalink":"http://maiernte.github.io/wiki/categories/IT/"},{"name":"Web","slug":"IT/Web","permalink":"http://maiernte.github.io/wiki/categories/IT/Web/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://maiernte.github.io/wiki/tags/Hexo/"}]},{"title":"坚果云有关","slug":"IT/Tools/坚果云有关","date":"2019-07-25T03:41:28.000Z","updated":"2019-08-14T22:10:30.000Z","comments":true,"path":"about-jianguoyu.html","link":"","permalink":"http://maiernte.github.io/wiki/about-jianguoyu.html","excerpt":"忽略文件 配置文件 customExtRules.conf。在 Window 版可以在软件直接打开，在 Mac App 里面没有这个选项，要自行查找这个配置文件。官方说明 在 Windows 和 Mac 下面目录可能不一样。","text":"忽略文件 配置文件 customExtRules.conf。在 Window 版可以在软件直接打开，在 Mac App 里面没有这个选项，要自行查找这个配置文件。官方说明 在 Windows 和 Mac 下面目录可能不一样。 Mac 系统或 Linux 系统这个文件通常位于 12vim ~/.nutstore/db/customExtRules.conffold/to/ignore # 文件夹的绝对路径 安卓系统上同步文件夹 安卓版的坚果云客户端只会打开临时指定的文件。如果希望跟在PC上一样的操作，将整个文件库都同步到指定的文件夹内，就要用FolderSync软件。 登陆坚果云官网，账户信息–&gt;安全选项–&gt;第三方应用管理，生成一个新的第三方应用 androidSync，密码为 xxxxxxxxxxxxxxxx，然后按照上述官网的指南一步一步配置 FolderSync 就可以了。回头还是用 「坚果云 Markdown」这款软件来阅读md文档。 托管密码 设置为 SafeInClound 的托管云盘。用户名是坚果云的登陆账户，密码为专门为其开通的第三方应用 mypass 的专门密码。Local Pfad 填写云盘内存储数据库文件的文件夹。","categories":[{"name":"IT","slug":"IT","permalink":"http://maiernte.github.io/wiki/categories/IT/"},{"name":"Tools","slug":"IT/Tools","permalink":"http://maiernte.github.io/wiki/categories/IT/Tools/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://maiernte.github.io/wiki/tags/工具/"}]},{"title":"使用Github维护知识库","slug":"IT/Tools/使用Github维护知识库","date":"2019-07-24T21:02:14.000Z","updated":"2019-08-15T09:40:53.000Z","comments":true,"path":"use-github-in-wiki.html","link":"","permalink":"http://maiernte.github.io/wiki/use-github-in-wiki.html","excerpt":"部署以及更新 初建：将文件夹设置为仓库。只是第一次需要，以后就基本不用。 git init 更新：更新所有的文件。 git add . 描述：更新描述(optional 不是必须的) git commit -m &quot;my command...&quot; 推送：上传到云仓库 git push -u origin master","text":"部署以及更新 初建：将文件夹设置为仓库。只是第一次需要，以后就基本不用。 git init 更新：更新所有的文件。 git add . 描述：更新描述(optional 不是必须的) git commit -m &quot;my command...&quot; 推送：上传到云仓库 git push -u origin master 详细指令 12345678git remote add origin https://github.com/maiernte/NewAngular.gitgit push -u origin master# For the next commit$ git add . # add to index only files created/modified and not those deleted$ git add -u # add to index only files deleted/modified and not those created$ git add -A # do both operation at once, add to index all files 下载及更新 1234567#下载整个项目git clone XXXXX#从服务器更新git pull [xxxxxx]#Helpgit hepl VERBgit VERB -h 克隆指定 Branch， 因为有时候 master 和 gh-pages 上存放的是不同的文档。 1git clone https://github.com/maiernte/gitbook_python_finance.git --branch master new_fold 设置忽略文件夹以及文件 12touch .gitignorevim .gitignore 并添加类似的行 12345678910111213# See https://help.github.com/ignore-files/ for more about ignoring files.# dependencies/node_modules# testing/coverage# production/build# misc.DS_Store.env.localnpm-debug.log*yarn-debug.log* 设置git身份信息 12git config --global user.name \"你的用户名\"git config --global user.email \"你的邮箱\" 密码和凭证 保存 Github 用户名和密码 Mac 下面每次 push 都要询问用户名和密码，很麻烦。而且将来不利于用脚本控制部署。有个解决的办法：进入项目根目录，执行一下命令 1git config --global credential.helper store 然后推送一次，输入账号和密码后，第二次推送就不需要了! SSH Key 凭证 12# 加入 SSH Agentssh-agent -s 如果出现类似Agent pid XXXX这样的字样，则跳过下一步，否则输入： 1eval `ssh-agent -s` 直到出现Agent pid XXXX这样的提示之后，输入： 1ssh-add ~/.ssh/id_rsa 这样，你成功的在本地生成了一个可用的SSH key。 下面将这个key添加到github网站。 打开https://github.com/settings/ssh，点击Add SSH Key，复制id_rsa.pub中的所有内容到Key框中，在Title框中输入方便自己记忆的名字（建议输入能让自己明白是哪台电脑的名字，方便以后管理）。 当网页显示添加成功后，就已经完成了全部的操作。 下面进行一些测试，同样是打开Git Bash，输入： 1ssh -T git@github.com bash中会显示如下字样： 123The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? 输入yes之后，计算机会自动将github.com列入已知的host，然后会出现如下提示： 12Hi username! You&apos;ve successfully authenticated, but GitHub does notprovide shell access. 如果成功看见，说明你已经配置好了，快去享受爽快的hexo一键部署吧； 如果出现任何错误提示，请仔细检查自己的操作，或者将错误信息发给我。 参阅：十步轻松搞定Hexo 如果要多台电脑共同使用同一个SSH-Key，先在第二台电脑上用这个key的相同邮件生成一个新的key 1ssh-keygen -t rsa -b 4096 -C &quot;username@gmail.com&quot; 用第一台电脑上的两个key文件 id_rsa, id_rsa.pub 覆盖第二台电脑的文件（注意备份）。确保NEW上的两个文件的权限是正确的，id_rsa是600，id_rsa.pub是644，比如： 1234567-rw------- 1 fancy fancy 1675 2013-03-19 12:55 id_rsa-rw-r--r-- 1 fancy fancy 406 2013-03-19 12:55 id_rsa.pub# 查看权限命令是 ls -l# 更改权限命令是chmod 600 ~/.ssh/id_rsachmod 644 ~/.ssh/id_rsa.pub 删除仓库 点开仓库 点击右上角的 Settings 滚动到最下面 Done Zone， 选择 Delete this repository。 恢复所有修改 12345678910111213git checkout . #本地所有修改的。没有的提交的，都返回到原来的状态git stash #把所有没有提交的修改暂存到stash里面。可用git stash pop回复。git reset --hard HASH #返回到HASH点，不保留修改。git reset --soft HASH #同上，保留修改。HASH 是节点号，z.B. 7d593c5git clean -df #返回到某个节点git clean 参数 -n 显示 将要 删除的 文件 和 目录 -f 删除 文件 -df 删除 文件 和 目录--------------------- git describe --always # 查看当前节点号git log # 查看所有HEAD号和Commit描述 更加暴力的方式是 1it checkout . &amp;&amp; git clean -xdf 清除历史记录 代码 1234567891011121314151617181. Checkout git checkout --orphan latest_branch2. Add all the files git add -A3. Commit the changes git commit -am &quot;commit message&quot;4. Delete the branch git branch -D master5. Rename the current branch to master git branch -m master6. Finally, force update your repository git push -f origin master 私人仓库 作为个人笔记，不应该设为public，这样别人可以浏览。2019 年Github更新了新的政策： GitHub Free：包含无限制的私人存储库。有了 GitHub Free，开发人员可以将 GitHub 用于私有项目，每个存储库最多可以有三个协作者。许多开发人员希望使用私人仓库申请工作，做一些 side project，或者在公开发布之前先私下尝试一些东西。从今天开始，这些场景在 GitHub 上可以免费实现（未来可能有更多场景）。 公共存储库仍然是免费的，并包括无限合作者。 点开仓库 点击右上角的 Settings 滚动到最下面 Done Zone， 选择 Make this repository private。 文摘资源 Git submodule 子模块的管理和使用","categories":[{"name":"IT","slug":"IT","permalink":"http://maiernte.github.io/wiki/categories/IT/"},{"name":"Tools","slug":"IT/Tools","permalink":"http://maiernte.github.io/wiki/categories/IT/Tools/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://maiernte.github.io/wiki/tags/工具/"}]},{"title":"Next以及wikitten主题添加内容折叠","slug":"IT/Web/Next主题添加内容折叠","date":"2019-07-23T18:29:33.000Z","updated":"2019-07-31T03:51:34.000Z","comments":true,"path":"next-collapse-block.html","link":"","permalink":"http://maiernte.github.io/wiki/next-collapse-block.html","excerpt":"添加代码 当有大段的代码直接展示在页面时，看起来臃肿且不便于观看，此时将代码折叠式最好的选择。下面是在Hexo的Next主题上添加折叠功能。","text":"添加代码 当有大段的代码直接展示在页面时，看起来臃肿且不便于观看，此时将代码折叠式最好的选择。下面是在Hexo的Next主题上添加折叠功能。 在main.js中添加折叠js Next主题的主要js位于 themes/next/source/js/src/post-details.js,在下面添加一下代码段： 12345678$(document).ready(function()&#123; $(document).on('click', '.fold_hider', function()&#123; $('&gt;.fold', this.parentNode).slideToggle(); $('&gt;:first', this).toggleClass('open'); &#125;); //默认情况下折叠 $(\"div.fold\").css(\"display\",\"none\");&#125;); Wikitten 主题添加到 themes/wikitten/source/js/main.js 后面。 自定义内建标签 在主题scripts下添加一个tags.js，位于themes/next/scripts/tags.js 123456789101112131415161718192021222324/* @haohuawu 修复 Nunjucks 的 tag 里写 ```代码块```，最终都会渲染成 undefined 的问题 https://github.com/hexojs/hexo/issues/2400*/const rEscapeContent = /&lt;escape(?:[^&gt;]*)&gt;([\\s\\S]*?)&lt;\\/escape&gt;/g;const placeholder = '\\uFFFD';const rPlaceholder = /(?:&lt;|&amp;lt;)\\!--\\uFFFD(\\d+)--(?:&gt;|&amp;gt;)/g;const cache = [];function escapeContent(str) &#123; return '&lt;!--' + placeholder + (cache.push(str) - 1) + '--&gt;';&#125;hexo.extend.filter.register('before_post_render', function(data) &#123; data.content = data.content.replace(rEscapeContent, function(match, content) &#123; return escapeContent(content); &#125;); return data;&#125;);hexo.extend.filter.register('after_post_render', function(data) &#123; data.content = data.content.replace(rPlaceholder, function() &#123; return cache[arguments[1]]; &#125;); return data;&#125;); 再继续添加一个fold.js,位于themes/next/scripts/fold.js 12345678/* global hexo */// Usage: &#123;% fold ???? %&#125; Something &#123;% endfold %&#125;function fold (args, content) &#123; var text = args[0]; if(!text) text = \"点击显/隐\"; return '&lt;div&gt;&lt;div class=\"fold_hider\"&gt;&lt;div class=\"close hider_title\"&gt;' + text + '&lt;/div&gt;&lt;/div&gt;&lt;div class=\"fold\"&gt;\\n' + hexo.render.renderSync(&#123;text: content, engine: 'markdown'&#125;) + '\\n&lt;/div&gt;&lt;/div&gt;';&#125;hexo.extend.tag.register('fold', fold, &#123;ends: true&#125;); wikitten主题将这两个文件复制到 themes/wikitten/scripts 目录下。 添加自定义样式 位于themes/next/source/css/_custom/custom.styl 1234567891011.hider_title&#123; font-family: \"Microsoft Yahei\"; cursor: pointer; color: red;&#125;.close:after&#123; content: \"▼\";&#125;.open:after&#123; content: \"▲\";&#125; wikitten 主题将此代码添加到 themes/wikitten/source/css/_partial/article.styl 文件下面。在next 主题必须将color: red去掉，否则会影响大纲栏的颜色。 使用 在我们需要折叠的地方前后添加便签，示例用法： 123&#123;% fold 点击显/隐内容 %&#125;需要隐藏的内容。。。&#123;% endfold %&#125; 参考 Hexo next博客添加折叠块功能添加折叠代码块 Next主题实现内容折叠 jQuery 实现内容折叠功能 Hexo 标签插件 官方 实例 嵌套代码 Some Content 点击显/隐内容 &lt;xsl:call-template name=“SetGlobaleVariable”&gt; &lt;xsl:with-param name=“name-variable”&gt;po_bfa_swbh_laufbahn&lt;/xsl:with-param&gt; &lt;xsl:with-param name=“wert-variable” select=&quot;$bf_laufbahnzulage&quot;/&gt; &lt;/xsl:call-template&gt; Mai, Düsseldorf linkgoogle.de Hexo 代码方式 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. DavidLevithan KOS xsldownloadcode11 code snippet Gist Hexo 方式 Gist (“48edcb5cfd92937ae61360b74852d4e1” 就是id。 而 “xml” 是我创建时的文件名)。地址是 git.github.com Javascript 方式","categories":[{"name":"IT","slug":"IT","permalink":"http://maiernte.github.io/wiki/categories/IT/"},{"name":"Web","slug":"IT/Web","permalink":"http://maiernte.github.io/wiki/categories/IT/Web/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://maiernte.github.io/wiki/tags/Hexo/"}]},{"title":"RZF Organisation","slug":"文档/RZF-Organisation","date":"2019-07-22T18:23:00.000Z","updated":"2019-08-22T08:39:21.000Z","comments":true,"path":"rzf-organisation.html","link":"","permalink":"http://maiernte.github.io/wiki/rzf-organisation.html","excerpt":"","text":"Kontakt Abteilung Verteiler “V-Krank” Für Ihre Krank- bzw. Gesundmeldung sowie alle übrigen Mitteilungen zum Thema Krankheit nutzen Sie bitte den Verteiler V-Krank (V-Krank-5011@fv.nrw.de). Verteiler “V-Heimarbeitszeiten” Für die Meldung der Heimarbeitszeiten nutzen Sie bitte den Verteiler V-Heimarbeitszeiten (V-Heimarbeitszeiten-5011@fv.nrw.de). Verteiler “V-Dienstreisezeiten” Über den Verteiler V-Dienstreisezeiten (V-Dienstreisezeiten-5011@fv.nrw.de) teilen Sie bitte Ihre Dienstreisezeiten, Lehrgangzeiten sowie das Ende des Dienstgeschäftes bei Dienstgängen mit. Zur Berechnung der Reisezeiten nutzen Sie bitte das im OASE-Vordruckschrank hinterlegte Berechnungsblatt (Vordruck H76 Reisezeitenberechnung). Verteiler “V-GST” Den Verteiler V-GST (V-GST-5011@fv.nrw.de) verwenden Sie insbesondere für die nachfolgenden Angelegenheiten: Fragen/Mitteilungen zum Thema Urlaub, Sonderurlaub, Dienstbefreiung Mitteilung von Zeiten bei vergessenen oder fehlerhaften GLAZ-Buchungen Mitteilung über die ganztägige Kernzeitinanspruchnahme (GLAZ-Tag) alle Fragen/Mitteilungen zu den übrigen Personalangelegenheiten, die nicht über die vorgenannten Verteiler abgedeckt sind. Personal Rohde, Rainer Telefon : (0211) 4572 - 2554 E-Mail: rainer.rohde@fv.nrw.de Uphoff, Christian christian.uphoff@fv.nrw.de \\Drucker \\C0114237\\DR011226","categories":[{"name":"文档","slug":"文档","permalink":"http://maiernte.github.io/wiki/categories/文档/"}],"tags":[{"name":"工作","slug":"工作","permalink":"http://maiernte.github.io/wiki/tags/工作/"}]},{"title":"Mac使用标签","slug":"IT/Mac/Mac使用标签","date":"2019-07-22T16:58:50.000Z","updated":"2019-07-31T03:51:34.000Z","comments":true,"path":"mac-using-tags.html","link":"","permalink":"http://maiernte.github.io/wiki/mac-using-tags.html","excerpt":"","text":"使用标签 在 Mac 上，执行以下任一项操作： 给打开的文件添加标签：将鼠标指针悬停在文稿标题右侧，点按箭头，在“标签”栏中点按，然后输入新标签，或者从列表中选取一个标签。 存储新文件时添加标签：点按“文件”&gt;“存储”。在“存储”对话框中，在“标签”栏中点按，然后输入新标签，或者从列表中选取一个标签。 给桌面上或“访达”中的文件添加标签：选择项目，然后打开“文件”菜单。也可以按住 Control 键点按该项目，或用双指轻点它。在“标签”下方选取颜色，或点按“标签”以从更多标签中进行选择或输入新标签。在“访达”窗口中，也可以选择该项目，点按“标签”按钮 ，然后输入新标签，或从列表中选取一个标签。 查找含有标签的项目 在 Mac 上，点按程序坞中的“访达”图标 以打开“访达”窗口。 请执行以下一项操作： 搜索标签：在搜索栏中输入标签颜色或名称，然后从建议中选择该标签。 在边栏中选择标签：若要查看带有某个标签的所有项目，请在“访达”边栏中点按标签。若要更改在边栏中看到的项目，请选取“访达”&gt;“偏好设置”，点按“标签”，然后选择想要查看的标签。 按标签将项目分组： 点按“分组”按钮，然后选取“标签”。 按标签排序项目：在任何显示方式下，选取“显示”&gt;“查看显示选项”，点按“排序方式”弹出式菜单，然后选取“标签”。在“列表显示”下，选择“标签”复选框以显示分栏，将指针移到“标签”分栏上方，然后点按。再次点按分栏名称来倒序排列。 移除标签 在 Mac 上，请执行以下一项操作： 从项目中移除标签：按住 Control 键点按项目或使用双指轻点项目，然后点按“标签”。选择您想要移除的标签，然后按下 Delete 键。 从 Mac 中移除标签：在“访达”中，选取“访达”&gt;“偏好设置”，然后点按“标签”。选择您想要移除的标签，然后点按移除按钮——。 编辑标签 在 Mac 上的“访达”中，选取“访达”&gt;“偏好设置”，然后点按“标签”。 请执行以下一项操作： 在“访达”边栏中查看标签：选择标签右侧的蓝色复选框。 更改标签颜色：点按标签 旁边的颜色，然后选取新的颜色。 更改标签名称：点按标签，点按标签名称，然后输入新名称。 创建新标签：点按添加按钮 。 删除标签：选择标签，然后点按移除按钮 ——。 将标签添加到快捷键菜单中：在列表中选择标签，然后将它拖到您想要在窗口底部的个人收藏部分中替换的标签上方。当您按下 Control 键点按文件时，在出现的快捷键菜单中可至多有七个标签。 从快捷键菜单中移除标签：将标签拖出“个人收藏标签”部分，直到看到移除符号。","categories":[{"name":"IT","slug":"IT","permalink":"http://maiernte.github.io/wiki/categories/IT/"},{"name":"Mac","slug":"IT/Mac","permalink":"http://maiernte.github.io/wiki/categories/IT/Mac/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://maiernte.github.io/wiki/tags/Mac/"}]},{"title":"Mac备忘录","slug":"IT/Mac/Mac备忘录","date":"2019-07-22T16:47:47.000Z","updated":"2020-05-07T07:28:37.649Z","comments":true,"path":"mac-memo.html","link":"","permalink":"http://maiernte.github.io/wiki/mac-memo.html","excerpt":"","text":"指令和任务 隐藏文件夹 Terminal 命令 1234//显示隐藏文件defaults write com.apple.finder AppleShowAllFiles -bool true//不显示隐藏文件defaults write com.apple.finder AppleShowAllFiles -bool false 快速命令，打开访达窗口，然后 ⌘ + ⇧ + . 就可以隐藏/显示。 需要重启Finder使设置生效 : 重启Finder：窗口左上角的苹果标志–&gt;强制退出–&gt;Finder–&gt;重新启动 允许任何来源软件 系统默认在 安全与隐私 里只显示 “App Store” 和 “App Store 和被认可的开发者”，没有 “任何来源”。开启的话需要在终端输入 sudo spctl --master-disable 并输入开机密码。 任务控制 将任务放在后台运行：command + &amp; 将任务丢到后台暂停：ctrl-z 查看后台所有任务状态：jobs -l (会列出 1、2、3序列号) 将后台的任务拿到前台处理：fg %jobnumber (指序列号，而不是任务id) 将后台的任务变成运行中：bg %jobnumber 管理后台当中的任务：kill -signal %jobnumber 文件管理 标签的使用 参看 mac 标签的使用 通用技巧 输入法 查看按键字符 偏好设置 → 键盘 → 输入法，窗口右面会显示键盘⌨️图案，按住shift⇧键或者option⌥，会显示在不同功能键下面的字符。 通过Automator添加快捷键 文章来源 一次打开 Finder —&gt; 应用程序 —&gt; automator 选取 服务 从左边的双栏选取 使用工具—&gt;运行AppleScript， 并双击运行。 出现文本框后选定（右栏最上边）没有输入 1234567on run &#123;input, parameters&#125; (* Your script goes here *) tell application &quot;Safari&quot; reopen activate end tellend run ⌘+S 保存，命名为 Open Safari。关闭automator 转到 系统偏好设置—&gt;键盘—&gt;快捷键—&gt;服务—&gt;通用—&gt;open safari ，然后设定快捷键就好了。 电源管理 pmset是macOS下用来操作、电源管理的工具，可设定休眠模式、时间和唤醒时间或显示电源信息，不过因为它是一个命令列的指令，因此得透过终端机察看或修改设定。当你开启「终端机」输入pmset -g 会看到具体设置。 Standbydelay 28800 ：将系统储存于內存中休眠，会消耗一些电力。 Autopowerofdelay 28800 ： 把系统写入SSD硬盘中，将內存暂存关闭，依照这篇文章的说法，两者延迟时间28800秒（约八小时）会让电脑多维持內存八小时左右的电力。 tcpkeepalive ：设定睡眠后是否还保持网络连接， 以便可以透过TCP唤醒系统 hibernatemode ：睡眠模式。数字越小，耗电越高。可以设置为 25 1234sudo pmset -b autopoweroffdelay 300 # 将睡眠时间缩短为300秒（五分钟）sudo pmset -b standbydelay 300 # 然后将系统储存到SSD硬盘sudo pmset -b tcpkeepalive 0 # 将透过TCP唤醒系统的功能关闭sudo pmset -a hibernatemode 25 中间的参数-b是使用电池下的参数，-c为外接电源下的参数设定， -a 为所有情况下的设定。 升级到Mojave后鼠标发飘 前往***偏好设置–&gt;网络–&gt;设定服务顺序(左下角齿轮)***，然后将***蓝牙PAN***拖到最上面。 网络资源 应用软件 大量破解资源分享的网站 MacEnjoy 在线文档 iMac 2012 规格 升级SSD固态硬盘 iMac 2012 21.5吋 拆卸指南 Mac升级外挂SSD硬盘 如何选择另一个启动磁盘 🖊 官方说明 更换SSD固态硬盘攻略 固态硬盘通过USB 3连接到电脑，并格式化成 Mac OS 扩展 格式。 用 Carbon Copy Cloner（官网下载）把原硬盘的数据镜像到 SSD。完成后要制作恢复分区「Recovery HD」破解版下载地址 或者 SuperDuper 🖊 免费版可以全盘备份，而不支持增量操作。 重启，听到 「当 」一声后按住 Option 键(windows 键盘上的 Alt)。然后选择SSD作为启动硬盘。 开机后用 Trim Enabler（官网下载）开启 Trim 读写加速。👍","categories":[{"name":"IT","slug":"IT","permalink":"http://maiernte.github.io/wiki/categories/IT/"},{"name":"Mac","slug":"IT/Mac","permalink":"http://maiernte.github.io/wiki/categories/IT/Mac/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://maiernte.github.io/wiki/tags/Mac/"}]},{"title":"爱乐之城——影评","slug":"摘录/爱乐之城——影评","date":"2019-07-21T19:17:19.000Z","updated":"2019-08-14T06:31:50.000Z","comments":true,"path":"lalaland-film.html","link":"","permalink":"http://maiernte.github.io/wiki/lalaland-film.html","excerpt":"","text":"我在凌晨三点醒来的夜里，想起已失去的你，曾经说着永远一起，现在却不再联系。如果当时的我们能少一些固执，是否会有更好的结局。 洛杉矶，华纳兄弟电影厂旁边的咖啡馆，明星来往不息。一身素雅的米娅是这里的收银员。她的梦想就是成为一个知名演员及编剧。所以她经常请假去试镜，跑遍大大小小的片场。虽然每次她都充满希望，但现实却是四处碰壁。这天，又一次遭受打击的米娅垂头丧气回到家中。洗去一身疲态后，她站在镜子面前暗自神伤哼起歌来 。这时室友火急火燎的出现，邀请她一起去参加派对。本来心情极度郁闷的米娅不想去凑热闹。经不住一帮二货室友的游说，精心打扮一番后她们就出发了。 洛杉矶的月色下，灯红酒绿，觥筹交错。但热闹是属于他们的，安静下来后她却感到愈加落寞。人潮中充斥着过剩的荷尔蒙，但却没有她想要的一双眼睛。世界瞬息万变，她却岿然不动。逃离狂欢派对后，违规停放的车子又被拖走。米娅只能走路回家，在安静的街头上。忽然一阵悠扬的钢琴声传来，如梦似幻，温润缠绵。米娅停下脚步，来到了一个毫不起眼的地下酒吧。一个优雅的男人坐在无人注意的角落里安静的弹奏着。此刻，全世界好像都暗了下来，只有他闪着耀眼的光芒。男人名叫塞巴斯汀，是一个爵士乐钢琴师。他对音乐有着自己独特的追求，不愿弹奏靡靡之音。可一曲弹罢，没有人为他鼓掌，他也被老板炒了鱿鱼。塞巴斯汀愤愤的离开，米娅鼓起勇气迎面走过去，想要认识这个让她着迷的男人。但一句话还没说完，男人就径直的走开了。米娅扑了个空，尴尬的站在那里不知所措。 生活依然按部就班，米娅依然忙着追逐她的梦想。一次派对上，米娅又遇上了塞巴斯汀。他加入了一个爵士乐队，但他们的演奏依旧没人捧场。为了惩罚这个「严肃」的音乐人，也为了报复上次给她造成的尴尬，米娅点了一首非常不严肃的音乐，她甚至随着音乐舞动起来。而塞巴斯汀却站在那里既尴尬又无奈。米娅的行为让塞巴斯汀想起了那晚的无礼。他向米娅道了歉，两人算是相识了。聚会结束后，米娅又找不到车子，于是两人在夜色下散步。洛杉矶的夜色此刻显得如此迷人，在暧昧的氛围中，他们默契地跳着属于他们的舞蹈。 第二天塞巴斯汀来到米娅工作的咖啡店，下班后他们一起在片场附近的街头闲聊，塞巴斯汀鼓励米娅给自己写剧本，而不是去演别人的剧本。自己给自己创造角色，说不定会有意想不到的效果。米娅也向塞巴斯汀坦白说，她讨厌爵士乐。于是固执的塞巴斯汀就带米娅来到一个演奏爵士乐的酒吧，他试图改变米娅对爵士乐的看法，向她解释爵士乐的起源。然而米娅还是不能理解，对音乐有执念的塞巴斯汀表示，他不想让爵士乐就此消亡，他想要创建自己的俱乐部，在那里只有纯粹的爵士乐，那是他一直以来的梦想。 这天又一次试镜失败的米娅心情沮丧，经过电影院门口时，她想起和塞巴斯汀的电影院之约。顿时心情变得愉悦，这时几个月不见一次的男友却来接她一起吃饭。餐桌上米娅心不在焉，男友却把她晾在一边，自顾自的和哥哥聊天。而在电影院门口的塞巴斯汀焦急的等着米娅，此时餐厅传来了熟悉的曲子，那个夜晚塞巴斯汀弹奏的正是这首曲子。米娅随即起身跑了出去，穿过色彩缤纷的霓虹灯，她找到了失落的塞巴斯汀，此时的两个人根本无心观看电影。他们指尖轻触，随后十指紧扣，接着互相靠近……但灯光却忽然打开，两人无奈的相视一笑。之后米娅带着塞巴斯汀来到天文馆，他们在浪漫的氛围中翩翩起舞，魅惑的蓝色星空下，两人仿佛和整个宇宙融为一体。 金风玉露终于相逢，热恋之吻甘之如饴。随后两人一边热恋，一边为各自的梦想努力。他们一起旅行、一起恶作剧，他们走遍大街小巷，他弹琴、她跳舞，在塞巴斯汀的影响下，米娅渐渐喜欢上了爵士乐。这天早上，塞巴斯汀无意中听到了米娅和她母亲的通话。米娅的母亲对她们的未来很担忧，因为塞巴斯汀没有稳定的工作。寥寥几句话，就将塞巴斯汀从梦中拉回现实。他接受了前乐队主唱的邀请，成为了他们的键盘手。但这就意味着塞巴斯汀必须放弃自己的坚持，跟着乐队的风格走。晚上回家的米娅，听到塞巴斯汀的琴声，感受到了他失落的情绪。无需过多的话语，米娅和着琴声唱着歌，这种默契让他们心照不宣。就这样两人互相鼓励，互相安慰，塞巴斯汀的乐队开始走红。米娅也陆陆续续接到了一些大大小小的角色。看着梦想之门慢慢打开，他们也变得越来越忙碌。乐队巡演时，米娅站在台下看着万众瞩目的塞巴斯汀，喧闹的人群，闪烁的灯光，流行的爵士乐，一切看起来都那么美好……台上的男人意气风发、星光闪耀，米娅却觉得和他有了距离。晚上回到家的米娅得到了一个大大的惊喜。忙碌的他们很久都没有见面了，塞巴斯汀明天一早又要离开，他想要让米娅跟他一起，米娅却问他喜不喜欢现在弹奏的音乐？但此时的塞巴斯汀已经尝到了名利带来的甜头，他放弃了曾经的梦想，也放弃了曾经的坚持。他以为这些是米娅想要的：稳定的生活，不菲的收入，以及聚少离多的爱情。他说以前那些梦想太虚无缥缈，现在他需要成熟起来。最后激动的塞巴斯汀对米娅说，你喜欢以前不堪的我，是因为相比而言，那会让你感觉自我良好。这句伤人的话使得他们关系僵化，接着米娅一声不响的离开。第二天在给乐队拍宣传片的时候，摄影师让塞巴斯汀随便弹，于是他弹起了熟悉的曲子，接着他似乎想起了什么……再一次试镜被嘲笑后，米娅心情降至冰点。她准备返回老家，这个城市再没什么值得她留恋，梦想也好，爱人也罢，终究只是一场梦。面对挽留的塞巴斯汀，她再也无法忍受，哭着说她受够了。米娅回到了自己的家，塞巴斯汀也回到了乐队。 一段时间后，塞巴斯汀出现在了米娅家门口。一个知名导演正在选角，试镜电话打给了塞巴斯汀，在塞巴斯汀的鼓励下，米娅鼓起勇气决定再试一次。导演让米娅随便讲一个故事，于是她用歌声讲述了自己的梦想。面试过后，他们来到天文馆门口，一起谈论着对未来的打算。他说你的梦想一定会实现的。秋天的洛杉矶，纯净而理性。他们的感情在这里开始，也在这里结束…… 五年后米娅成了知名演员，实现了自己的梦想。她事业有成，结婚生子，生活安稳，家庭美满。晚上米娅和丈夫遭遇堵车，路边散步时发现了一个酒吧。热闹的气氛吸引了米娅的注意，这正是当年塞巴斯汀带她去的酒吧。米娅发现酒吧的名字是她多年前为塞巴斯汀取的。这里只有纯粹的爵士乐，塞巴斯汀的梦想就是拥有这样一个地方。落坐以后，塞巴斯汀看到了台下的米娅，沉默片刻后，他弹起了那首熟悉的音乐。 就像最初他们相见时那样，他们忘记了全世界。那个夜晚，那次初见，时间仿佛从未流逝。但这次不等她说完一句话，他就热烈的吻上了她唇。他毫无顾忌，她毫无防备，他们痴迷于彼此的味道。他们翩翩起舞，一路走向梦想，走进热恋，相互陪伴，相互成全，一起成长，一起狂欢。然后携手走进那片星空。他眼神温柔，她身姿婀娜。他们打造着自己的小窝，享受着二人世界。爱的结晶来到他们身边，放佛那些美好是和他一起度过的。直到今天这个夜晚，他们始终如一，此志不渝。 曲终之后，她被拉回现实，然后和丈夫一起离开。在拐角处她转身，回头，两人遥遥相望，然后互相报以微笑。时隔经年，若我遇见你，我该如何与你致意？以眼泪，以沉默！ 我一同学特别喜欢这部电影，我知道那是因为她在电影中看到了自己。她的挚爱，七年长跑，可终究还是没能走到一起。或许这就是所谓的「在别人的故事里，流着自己的眼泪」。你是否也在无人的深夜，想起某个人，然后哭着醒来。看着周围的一切，熟悉又陌生，那个藏在心里的人啊，此时你身在哪里？可知有人还在深爱着你。虽然思念依然刻骨铭心，但你们之间却只剩下曾经。最怕的莫过于，在寂静无声的日子里，莫名其妙的，突然听懂了一首歌，只是你听到的不再是歌曲，而是人生。 「初识不知曲中意，再听已是曲中人」……就像是做了一场梦，醒来之时万籁俱寂，物是人非事事休，欲语泪先流……年少时我们总想给最爱的TA更多，却忽略了TA最想要的只是真实的你。后来的我们什么都有了，但却没了我们。我还是我，你还是你，我们却不再是我们。……于是你只能在某个深夜，听着歌，流着泪，然后默默的在心里对那个人说，今夜，我不关心世界，今夜，我只想你。","categories":[{"name":"摘录","slug":"摘录","permalink":"http://maiernte.github.io/wiki/categories/摘录/"}],"tags":[{"name":"影视","slug":"影视","permalink":"http://maiernte.github.io/wiki/tags/影视/"}]},{"title":"财富自由之路-李笑来","slug":"读书笔记/财富自由之路-李笑来","date":"2019-07-21T07:05:22.000Z","updated":"2019-08-14T06:36:09.000Z","comments":true,"path":"road-to-asset-freedom.html","link":"","permalink":"http://maiernte.github.io/wiki/road-to-asset-freedom.html","excerpt":"","text":"进度：10课 哲学层面 金钱、时间、注意力 钱不是最重要，它可以再生。时间也不是，它本质上不属于你，你只能试着与它做朋友。注意力是自己可以做主的。必须把宝贵的注意力全部放在自己身上。放在自己的哪儿上？答：“成长”。不珍惜自己注意力的人最终注定是贫穷的，因为他们终生被收割，不可能有真正有价值的产出，怎么可能最终变得富有？另外，要放在自己的真爱上，以及对整个社会真正有贡献的事情上。（对于后两者，关注的焦点还是“成长”。） 注意力才是你人生最宝贵的财富（不是金钱和时间），你的一切价值都是你的注意力的产出。 俗三个大坑：1. 莫名其妙的凑热闹。2. 心急火燎的随大流。3. 操碎了别人的心 (万众创业关你屁事，干好自己的活)。 金钱、时间和注意力的比较：$ 注意力 &gt; 时间 &gt; 金钱 $ 凡是可以用钱买的其实都是便宜的。 凡是能用钱买来的时间就是便宜的。 凡是能用时间换来的注意力持续就是有价值的。 ❓ 时间和金钱谁更重要。 答案是时间。因为财富自由的定义就是“不为生活需要出售时间”。另外一个角度是，“花钱买你的时间更划算”。 ❓ 注意力和时间更重要。 注意力是能让你有所产出的唯一资源！而时间不一定是你的，时间不会自动产出。（李笑来: 花大量时间与老婆沟通，陪伴，以便换来自己集中注意力工作的机会。） 合作与信任 追求百分百的***安全感***，肯定会把自己困在了永恒的当下。必须放弃一部分安全感，才能有深入的、长期的观察和思考。打破枷锁的方法： 放弃部分安全感，才能获得进步。 通过有效社交，补全主动放弃的安全感。 🔖【合作】​ 的本质是大家各自放弃一小部分安全感，并把那一部分安全感交给合作方来保障。 🔖 【信任】就是相信对方不会利用自己主动放弃的那一部分安全感。所谓缺乏安全感，就是不相信别人竟然可以不利用自己放弃的那一部分安全感，所以只能自己去搞定百分之百的安全感，让人心力交瘁。 不要与缺乏安全感的人合作。尤其是婚姻。 最大的勇敢，就是在孑然一身的时候，还勇于放弃部分安全感。“大智若愚”，大智更像是结果。若愚才是原因。 将军赶路不打小鬼。 活在真实中 如果想活在真实的世界，就要勇于面对「真实」。要搞清楚以下几个概念。 什么算落后 20%之后都是落后，因为世界20%的人占了有限资源的80%。在人工智能和新技术时代，可能1%之后都算落后。将来可能是千分之一，万分之一之后都算。 我们每个人都已经可以尽量感知到这个世界的全部。所以要对自己是否处在落后状态有清晰认知。 我们对知识的渴求已经变成害怕落后。这是种危机感和焦虑，但它能帮我们持续进步，摆脱落后。 乌比冈湖效应：Lake Wobegon Effect 每个人都自认高于平均水平。 邓宁- 克鲁格效应 ：Dunning-Kruger Effect 能力欠缺的人有一种虚幻的自我优越感，错误的认为自己比真实情况更加优秀。 麻烦守恒定律：以前因为怕麻烦二省去的麻烦，在未来的某一天，或者未来的某一时刻，一定会以另一种形式呈现在你面前。麻烦不会无缘无故的消失，问题也不会无缘无故的解决。 元认知能力 📝指对自己的思考过程的认知和理解。 元认知能力起作用的三个步骤： 哦，原来我是这么想的。 嗯？我这么想难道是不对的吗？ 啊！我应该这么想才对。。。。 认知能力好比是马，而元认知能力是马车夫。所谓可以用来解放自己的“心智”，指的就是具备足够的元认知能力的大脑。人与人之间的技能差异，证据确凿来自于“刻意锻炼”。而一个人能做到“刻意锻炼”，唯一能够仰仗的就是元认知能力。 元认知能力是一个人可拥有的最重要的能力。 元认知能力不仅可以习得，还可以通过刻意训练长期持续发展。 我们知道我们想要改变的，能够改变的，不是“现在的自己”，而是“将来的自己”。通过刻意练习提高元认知能力的三个方法：坐享、兴趣、反思。 坐享：可以增加大脑皮层的沟回。 兴趣：兴趣是最好的教学。 反思：每天花十分钟反思一下自己的思路和思考结果，琢磨一下自己想法有没有逻辑错误。不仅是元认知能力的刻意训练方式，也是调整情绪的根本。 竞争力 多维竞争 😂 据说绝大多数人的幸福感是建立在比较之上的。有个玩笑：所谓的幸福就是自己的收入总比妹夫的收入多百分之二十。。。。。 😂 一般人所谓的“成长”，就是不断的把别人比下去的过程。 维度在生活上有三个体现： 生活是有多个维度的。 在多个维度打造竞争力。 至少在一个维度上足够突出。凡事都是有成本。处处平庸是不行的。 面对维度，要有以下意识： 单个维度，大家比的是长度，两个维度上大家比的是面积，三个维度上大家比的是体积。 每次跨界，都是给自己拓展一个新的维度。 对新知识保持开放态度。 应用层面 「活在未来」 如何活在未来 对未来要有个预测 那个预测需要时间才能得到结果 笃信你的预测是正确的。 于是你按照那个预测的结果行动、选择、思考。 你终将走到那个结果出现的时刻 最终证明你的预测是正确的。 那么，由于你提前按未来正确的结果行动、选择、思考，于是，在相当长的时间里，你生活的一部分就是“活在未来”。 人际关系的本质 人际关系在本质上还是交易。明白这一点，就能更清楚的看清楚关于贵人的问题。 $ 求助别人 ！= 麻烦别人 $ 求助不是低声下气的行为，而是一种交易。不仅如此，还是一种隐蔽的、意义巨大的交易。贵人之所以原因帮助你，是因为他已经看到你的价值。分清楚“求助”、“乞讨”、“添麻烦”、“占便宜”之间的区别。 能够遇到贵人在一定程度上是偶然也是必然，它是自己生活的一面镜子。你是贵人，生活这面镜子就帮你找到更多的贵人。至于是偶然还是必然，其实你是控制不了的。自己首先得是个贵人，才能遇到贵人，甚至更多贵人。最不济，你也已经成为自己的贵人，而且不会轻易离你而去。“遇到贵人”这件事从来不是我们的目的，相反“成为贵人”倒是我们应该努力的方向。在你出手相助的那一瞬间，你已经得到了自然的回报。 12条遇到贵人的原则： 乐观的人更容易成为他人的贵人 贵人更容易遇到贵人 能帮助他人进步，才是真正的贵人 优秀的、值得尊重的人，更容易获得帮助。 乐于分享的人容易获得帮助 不给他人制造负担的人容易获得帮助 不以求助为耻的人容易获得帮助 求助的时候不仅仅用金钱作为回报，帮助他人的时候也不应该收取金钱回报。 贵人不一定是牛人，贵人通常“以和为贵”。 很多时候，人们的成功，来源于大量的人希望看到他成功。反过来，如果大量的人不愿意看到某人成功，那么这个人真的很难获得所谓的“贵人相助” 正在做“正确”事情，更容易获得贵人相助。也就是所谓的“得道多助”。 活在未来的人更容易遇到贵人，因为别人能在他身上看到未来。 资本的定义 钱和资本不是一样的东西，正如砖头和房子不是一回事。钱要成为资本必须满足三个基本要素： 资金的金额大小 资金的使用时限 资金背后的智慧 残酷的事实，大多数人其实不配站在资本之后。好消息是资本背后的实力是可以习得的。不能被自己心平气和判上无期徒刑的资金，就别假装资本出来混迹江湖。大多数人在股票市场上“投资”的不是资本，而是“装傻充愣的资金”而已。 暂时不知道往哪里分 好的工具应该让人离开它，而不是黏住它。 你创造财富能力取决于你能给别人创造多少真正的价值。（只有你觉得有价值的话，是几乎没有什么意义的）。 财富自由之路 - 思维导图 （看全景导图请点击链接）","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://maiernte.github.io/wiki/categories/读书笔记/"}],"tags":[{"name":"成长","slug":"成长","permalink":"http://maiernte.github.io/wiki/tags/成长/"},{"name":"经济","slug":"经济","permalink":"http://maiernte.github.io/wiki/tags/经济/"}]},{"title":"《少有人走的路》笔记","slug":"读书笔记/《少有人走的路》笔记","date":"2019-07-20T22:14:37.000Z","updated":"2019-08-01T04:04:18.000Z","comments":true,"path":"road-less-traveled-summary.html","link":"","permalink":"http://maiernte.github.io/wiki/road-less-traveled-summary.html","excerpt":"成熟 = 自律 + 爱","text":"成熟 = 自律 + 爱 自律 【自律】 : 主动要求自己以积极的态度去承受痛苦，解决问题。 自律的四个原则：延迟满足感、承担责任、忠于事实、保持平衡。😄 1 延迟满足感 人生当中总是绕着困难走。一个揍孩子和对孩子大喊大叫的父母就是不懂得延迟满足感的父母。 应该陪着孩子一起经历困难和痛苦。而父母试图通过家庭暴力的方式，试图将父母本身的责任区隔开。父母没有学会延迟满足感，这个孩子将来长大了也不会。很多人延迟满足感的能力非常糟糕，来自于父母的不自律。当父母不自律的时候，孩子就没法获得足够的爱和照顾。—— 所以这个孩子会忽略自我的价值。有的人喜欢浪费时间，而浪费时间的意思就是，_「我这个人的时间没什么价值」_。 不会延迟满足感的人，在长大后看到问题会假装没看到，以为等着问题慢慢就会过去，期待问题自行消失。 训斥孩子 ~&gt; 是为了迅速达成目的，而不是耐心陪孩子面对问题。 父母不自律 =&gt; 孩子不自律 不会延迟满足感 =&gt; 有意忽略问题 2 承担责任 神经官能症: 把一切东西都认为是自己的问题。 我如果怎么样就好了。我要是不怎么样就好了。总是充满后悔和内疚。祥林嫂 人格失调症：他认为这一切都不是我的问题。他能找到任何一个理由，是因为外在的东西，他就不会责怪自己，他认为都是你们的问题。 「神经官能症」自己活得很痛苦，「人格失调症」让别人活得很痛苦。 作者提供在冲绳岛上的一个案例，一个军官的妻子，宁愿自杀也不愿意去学自动挡开车的事。 从某种意义上说，所有的孩子都患有人格失调症，都会本能的逃避责罚。 同时又患有某种神经官能症，把自己承受的痛苦看成是罪有应得。缺少关心的孩子会自惭形秽，认为自己不够可爱，缺点大于优点等等。 如果你不能解决问题，那么你自己就会成为问题。我们需要合理的承担责任，既不把责任全部推卸到外部，也不把责任全部揽到自己身上。保持一个合理的平衡。 如果你不能让自己成为人格更加健全，更加成熟的人。你就会把问题带给你的孩子，带给你的家庭。 3 忠于事实 大量的人是生活在自己的幻想当中的。这叫人生地图。他给自己绘制一张人生地图，他认为人生就这样，他已经认定了。这就叫做“不忠于事实”，他只 忠于自己的幻想。 案例：有个人小时候被父母欺骗过，就是父母说话经常不算数。导致他潜意识积累了一个信念：“父母是不可信”的。当他的人生地图绘制出来这么一个坐标，认为父母不可信了自后，他几乎就推论到“人人都不可信”。所以在他一生的成长过程当中，他跟警察发生矛盾，跟领导发生矛盾，跟顾客发生矛盾，跟妻子发生矛盾。案例中最后他唯一信任的是他的两个孩子。妻子把两个孩子带走，所以他人生也崩溃了。他跟作者约定时间不来，然后他说能不能星期六，作者说我的时间是跟别人约过的，不能随便调整。他说：“你不是心理医生吗？为什么不能多关心我一点呢”？他认为作者（心理医生）也是不可信任的人，直接拉黑。 这种人你很难跟他解释，很难让他面对真正的世界。因为在他心目当中完全是用自己的一套逻辑在解决问题。 所以所谓的「心理治疗」，就是鼓励「说真话」的游戏。鼓励大家能够面对事实，能够把自己看到的真相，感受到的真实的感觉，说出来的一个过程。所以没有经过这样的调试，有大量的人是天天活在「幻觉」当中的，就是沉浸在自己的人生地图当中。根本不去看一看，别人的地图是什么样。也根本不去看一看实际的生活当中，事实是什么样的。 移情：人们会把对一个人的感情和经验移植在别人身上。会认为别人也这样。 应该说移情、或者忽略史实，也是一种懒惰的表现。因为去更新地图是件很费力的事情。 4 保持平衡 既要承担责任，也要拒绝承担不该承担的责任。差不多又回到了「中庸」之道。「延迟满足」也不能延迟到无限， 从来不过好日子。既要延迟满足，也要过好当下的生活。要有一个富于弹性的约束机制。好像骑自行车下坡一样，既要享受速度，也要注意刹车。为了待会安全的拐弯，也要捏一捏车闸。 生活就是一个不断放弃的过程。必须能够学会放弃一件又一件的事情。包括接受心理治疗就是「放弃」—— 放弃了一个「自己是正常人」 的想法。 埃里克 埃里克森列举的人一生当中不断放弃的事情 首先要放弃「无需对外界要求作出回应」的婴儿状态。 三四岁的时候有「无所不能的幻觉」，这个要放弃掉。（为何小孩子特别喜欢绿巨人、钢铁侠、金刚狼这样的超级英雄？因为每个人在三四岁的时候都曾经幻想过自己是无所不能的超人。所以这种童话永远有市场。） 放弃完全占有父亲或者母亲的欲望。放弃童年的依赖感。 放弃心中被扭曲了的父母形象。（我们曾经以为父母是完美的）放弃。 青春期的自以为拥有「无穷潜力」的感觉。放弃！ I am the King of the World! 无拘无束的自由 青年时期的灵巧与活力 青春时期的性吸引力；长生不老的空想。 对子女的权威（在子女面前总是说了算的） 各种各样「暂时性」的权力——退休了，社会给你的权力也没有了。 身体永远健康——放弃 最后，自我以及生命本身也要放弃。 爱 【爱】 :为了促进自己和他人心智成熟，而不断拓展自我界限，实现自我完善的一种意愿。 核心观点就是「要看重心智成熟这件事」。心智成熟是发生在你和被爱的那个人之间的，两个人都需要达成心智成熟。 不要以为一昧的付出就是爱。爱的要求很高。要达成两个的共同成熟 一个人懂得什么是真正的爱，才能够是一个真正成熟的人。否则你会看到很多人以「爱」的名义在伤害、控制、占有对方。「爱」有以下四个误区：过度关注、坠入情网、精神灌注、自我牺牲。 过度关注 实际上是一种「依赖」 例子，一个妈妈，孩子都上高中了，还每天开车接送孩子上学。说孩子一个上学走太让人担心了。「过度关注」实际上是一种「依赖」。（妈妈在“依赖”这个孩子）这种类型的人经常说的话是“没有你我活不下去”。这个小孩之所以出现在书中，是因为孩子长大后来做了心理咨询。他在人生当中做任何事情都不成功。他的能力非常的欠缺。为什么？因为他从小到大完全被母爱这样束缚着。他妈妈根本不去管孩子能否「成熟」。他妈妈根本不去管这样做对孩子的心智健康、发展有没有好处。唯一的就是「你别出事，我必须盯着你」！`她不是为对方在做这样的事，她是在为自己做这样的事情。如果发展到极致，变得很严重的话，会变成一种疾病，叫「消极性依赖人格失调症」。—— 他必须依赖某一个外在的东西，他才能够觉得自己是存在的。如果有这么一个人，就是死死的缠住他，就是不离开他。有一个人作为对象，他才能找到自己的位置。如果找不到这样的人，就很可能会沉迷于毒品和酒精。 对「爱」无度的索求 对别人的爱根本与对方无关，他只是希望找到一个人，能够投射自己在上面，能够找到自己——「因为有人爱我，我就存在」。（例子，有个人离婚了，生活很痛苦，用酒精麻醉自己。咨询的第二天来跟医生说，我好了，我现在很幸福。因为昨晚在酒吧认识一个女人，她说她爱我。我现在很好。）总是苦思如何获得别人的爱，却没有精力去爱别人。就像饥肠辘辘的人，总想着向别人讨要食物，却拿不出食物来帮助别人。他们永远孤独寂寞，永远无法体会到满足感。尤其可怕的是，他们不知道自己患上了「消极性依赖人格失调症」。其造成原因多是童年缺乏爱，然后总觉的自己「没资格被爱」。人要感觉自己是被爱的，才有资格跟别人平起平坐，独立地生活和对话。患有这种心理疾病的人，他根本没有感觉到自己的资格，永远都在怀疑别人不爱他。所以只要别人拒绝他，就会感到无比的痛苦和伤心。而他永远需要找到一个紧紧拉住的，依赖的对象。这不是爱，这是占有。 坠入情网 坠入情网是欲望。是你体内的激素分泌。因为我们的基因要求我们要生殖，见到异性感觉自己爱上他了。实际上是自己的一种欲望。一段时间后当你的欲望被释放掉了，体内的激素的大潮开始退去的时候，会发现这个人看起啦那么讨厌。坠入情网实际上是「自我界限的短暂崩溃」。除了自我界限的理论，还有以下几个点： 不是出于主管意愿，它不是一个有计划有意识的选择。（很多人只把它看成一个感觉，而不是一个「动作」，爱是一个动词，不是感觉） 不是自我界限的扩展，而是自我界限的部分的暂时性的崩溃。扩展自我界限需要付出足够的努力，坠入情网却无需努力。 坠入情网唯一的作用是消除寂寞。而不是有目的的促进心灵的成长。 简单来说贪恋爱可能是「爱」的发端，可能能培养出来爱，但它不是「爱」本身。 精神贯注 爱宠物、爱好这些也不是爱，而是「精神贯注」。就是当你把自己的精神贯注在一个事物上的时候，你以为这只狗“懂你”，其实上是“你投射在了它身上”，你在猜想它的想法。跟真正的爱不一样。为什么呢： 首先，我们跟宠物的沟通非常有限。我们不知道他们每天在想什么，却一厢情愿的把自己的想法和感受投射在它们身上。实际上这只是我们的主观愿望罢了。 其次，我们喜欢宠物的原因是因为它们表现乖巧，任凭摆弄。如果宠物不听话，破坏家具，随意大小便，甚至咬上我们几口。我们就可能把它赶出家门。如果要改变宠物的心智，我们只能把它送到宠物学校。如果与某个人相处，局面就完全不同了。 有一种精神贯注叫「婴儿之爱」。 很多妈妈只喜欢婴儿期的孩子。等孩子三四岁以后妈妈开始烦了。赶紧推给爷爷奶奶带。反过来呢，母爱很充沛，喜欢别人家的孩子，刚生的小婴儿。 这种不是爱，而是「唯命是从的追求」。 比如二战后美国的「战争新娘」。一开始新娘对丈夫唯命是从，当她们懂得英语，开始融入美国社会以后，矛盾就渐渐开始产生，离婚率开始上升。 以上几种感情我们误以为是爱，其实不是。它们都有共同的特征，就是以「爱」作为幌子，只想满足自己的需要。却从来不把对方的心智成熟当一回事。 自我牺牲 甚至还有人人会发展出来「自我牺牲式的爱」。有个妻子，她老公总是欺骗她，总是有外遇。每次闹完，老公回来道歉，她又开始接受他。五六次以后，妻子去找心理医生谈。心理医生告诉她要想清楚，不能老是这样接受他。有一次这个妻子说，我又原谅他了，这次他是真的改好了。他特别怎么怎么样。结果医生发现这个妻子有“受虐倾向”。有受虐倾向的人，会把「自我牺牲」当作是「爱」。他们觉得只要我能够牺牲、奉献就好。 这些东西也是来自童年的经历，就是他童年当中如果有一个这样的“楷模”，总是以自我牺牲为标榜，总是以为我为别人牺牲了那么多，所以 “你看我多好，多高尚”，他在潜意识当中就会慢慢接受“自我牺牲就是爱”这种想法。 **自我界限**： 小孩子刚出生的时候是没有自我界限的。他在挥动胳膊的时候，觉得整个房间都在动，他与这个世界没有是分割的。到了两三岁发现自己挥动胳膊的时候，房间没有动，甚至他发现自己哭的时候，别人并不饿。 才能慢慢感受到原来自己跟他人是不一样的。到青春期这个人的自我界限已经开始完全封闭起来了。原来这个世界只有我自己，连我的父母都不了解我，我的喜怒哀乐他们根本不知道。所以人们开始陷入深深的孤独。青春期的孩子觉得自己最“孤独”，他觉得没人理解他，我是一个完全独一无二的个体，谁跟我都不一样，他的自我界限完全封闭起来。 到了谈恋爱。谈恋爱是需要冒风险的，你是需要有勇气打开自我的界限，和另外一个人融为一体的。所以初恋的时候，很多人会有「**圣洁**」的感觉。就是“我打开了”，有一个人竟然“完全懂我”。有一个人可以跟我融为一体，那种水乳交融的感觉，他以为自己找到了「真爱」。因为他的边界在短期的崩溃。当他的自我边界崩溃以后，他感受到了生命的狂喜，那个就是短暂的获得了「爱」的感觉。但是那是假象。`因为那个并不建立在令我和对方人格不断成熟的一个过程当中。他并不是希望达成心智的成熟，他只是自我边界的短暂崩溃`。所以过了一两个月以后，这个自我界限慢慢弥合起来，他发现说“这个人怎么跟我也不一样”？“这个人的想法跟我也不同”。 现在的孩子谈恋爱特别快，有感觉就谈，没感觉了就分。把「感觉」当成了「爱」，事实上感觉只是欲望，是性欲。 但不要觉得欲望不是一件好事，无论是欲望，还是依赖，或者过度关注这样的东西，都是`培养爱的基础`。 正是因为两个人打破了边界，走到一起，双方有可能为对方作出了承诺。接下来为了完成自己的承诺，需要不断的努力，需要有自律性。当你的自律性跟承诺相结合在起来的时候，你的这个短暂的恋爱的感觉爱，会慢慢滋生出真正的爱。 能够带来对方和自己心智共同的成熟。 真正的「爱」 ：爱是实际行动，是真正的付出。 爱的感觉与精神贯注密不可分。后者是把情感与兴趣贯注在对外的对象上，将其当作属于自己的一部分。精神贯注虽然跟真正的爱容易混淆，但是依然有显著的区别。首先，精神贯注的对象不一定是有生命的事物。因此就不见得会有心灵的感受。其次，对某种事物产生精神贯注的人，未必会重视其心智的成熟。（比如无原则溺爱孩子的父母）第三，精神贯注可能与智慧和责任无关。（酒吧认识一个人，立刻就情有所钟。但没有任何计划性，没有后续责任）。最后，精神贯注随时都有可能消失。今晚还很开心，明天不开心就分手啰。 真正的爱需要投入和奉献，需要付出全部的智慧与力量。要使爱的对象得到成长，就必须付出足够多的努力，不然爱的愿望就会落空。 唯有真正的投入与奉献，才是实现爱的有效方式。真正的爱是自主的选择，无论「爱」的「感觉」是否存在， 都要奉献出情感和智慧。 「爱」的表现 倾听。我们真的能够拿出时间来，认真倾听对方的说话。最起码的尊重是通过倾听来展开的，我们要做一个良好的「倾听者」。 要有心里准备，接受爱的时候，就要准备承担风险。（有人经历过丧失亲人，之后就特别怕建立亲密关系。因为怕失去，「失去」的痛苦吓坏了他。）（爱还要面临冲突的风险。） 需要尊重对方的独立性。否则就是占有，就是依赖。 信仰 科学也是信仰 科学也是一种信仰。这个世界上上信科学的人比信宗教的人多。人不是生活在一个真实的世界当中的，人是生活在思想家为我们所设定的思想通道当中的。科学家在不断的拓宽我们人类的视线，建立了科学的信仰。 作者认为宗教的信仰在某种程度上可能会导致人的某些情况下的精神分裂。但是在某些情况下也会带来信念，帮助人们解决心理的问题。比喻：倒洗澡水的时候，千万不要把婴儿也倒出去。对待信仰的时候，不能过于简单化。 原罪 作者认为人类的「原罪」就是「懒惰」。 自律需要用力，爱需要用力，这个世界天然的方向是「熵增」，屋子一定会变乱。我花力气把屋子整理干净十个「逆熵」的过程，逆熵是需要话费气力的。 人天生喜欢熵增，喜欢懒惰。在伊甸园，其实上帝经常在园子里散步。这两孩子如果能去问一下，这玩意儿能吃吗？人类的命运就改变了。这两个人为什么不去问 一下上帝呢？因为这两孩子「懒惰」，而「懒惰」的背后是「恐惧」。他们担心问了上帝以后受到上帝的责罚。 （天涯：我认为这个解释不对。那个时候的亚当和夏娃没有罪恶感，也从来没有受过责罚，怎么会有这个恐惧呢？而恐惧则是被赶出伊甸园以后人类才有的心智。） 有人不好好学习，是因为就算好好学习了也未必学得好啊。如果好好学了而没有学好，就会面对失去「我不是没能力，只是不愿学而已」这块遮羞布的恐惧。 尽量要做到潜意识和意识「合一」。因为潜意识里面有很多的能量，而我们由于“懒惰”以及“恐惧”不愿意去开发的，不愿意去面对的。 这本书为什么叫【少有人走的路】呢？因为人人都喜欢熵增的方向，都喜欢轻松的方向，人人都喜欢懒惰的方向。喜欢部分什么劲，就得到一切的这种感觉。如果你想要变得成熟，就要费力去做一些逆熵的行为，自律的事，延迟满足的事，用行动表达「爱」的 过程。 两种力量 这个世界始终是由两种力量来统治的，分别是「政治的力量」和「心灵的力量」。 【政治的力量】：以公开或者隐秘的方式，去强迫别人遵循自己的意愿。这种力量既存在于权力之中，也存在于金钱之中。然而他并不属于拥有权力或者金钱的人。归根到底，政治的力量和德行以及智慧无关，最愚蠢最邪恶的人也可能成为地球的统治者。 【心灵的力量】：则完全存在于人类的心中，它和强迫、控制别人的力量没有关系。它是在意识基础上作出决定的力量。也就是「意识的力量」。 如果我们的心理能够得到力量，我们就会感到舒适和愉快，在人生的旅途上稳扎稳打，循序渐进。 进步带给我们的愉悦感难以言喻。没有什么比成为人生的专家，熟知自己所做的事情，更让人感觉到幸福。我们的心灵越是成熟，就越有可能成为人生的专家。当我们的心智成熟到一定的阶段，我们就会更加谦逊而快乐。","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"http://maiernte.github.io/wiki/categories/读书笔记/"}],"tags":[{"name":"成长","slug":"成长","permalink":"http://maiernte.github.io/wiki/tags/成长/"},{"name":"心理","slug":"心理","permalink":"http://maiernte.github.io/wiki/tags/心理/"}]}]}