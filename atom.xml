<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天涯的维基</title>
  
  <subtitle>竹影扫阶尘不动 雁过寒潭水无痕&lt;br&gt; 达摩九载面孤壁 起行归去影留存</subtitle>
  <link href="/wiki/atom.xml" rel="self"/>
  
  <link href="http://maiernte.github.io/wiki/"/>
  <updated>2019-09-16T18:53:45.000Z</updated>
  <id>http://maiernte.github.io/wiki/</id>
  
  <author>
    <name>鎏金天涯</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript &amp; Typescript技术摘要</title>
    <link href="http://maiernte.github.io/wiki/javascript-typescript-skills.html"/>
    <id>http://maiernte.github.io/wiki/javascript-typescript-skills.html</id>
    <published>2019-09-14T07:32:15.000Z</published>
    <updated>2019-09-16T18:53:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Javasript 和 Typescript 的重要技巧。</p><a id="more"></a><h3 id="零散知识点"><a class="markdownIt-Anchor" href="#零散知识点"></a> 零散知识点</h3><ul><li>列举 <a href="https://www.typescriptlang.org/docs/handbook/enums.html" target="_blank" rel="noopener">Enum</a></li></ul><h3 id="promise"><a class="markdownIt-Anchor" href="#promise"></a> Promise</h3><h5 id="输出链条"><a class="markdownIt-Anchor" href="#输出链条"></a> 输出链条</h5><p>文档 <a href="https://javascript.info/promise-chaining" target="_blank" rel="noopener">Promises chaning</a></p><p>✏️ 可以在 <code>then</code> 函数里面跑出 结果 <code>或者</code> 第二个 <code>Promise</code></p><h5 id="等待多个-promise"><a class="markdownIt-Anchor" href="#等待多个-promise"></a> 等待多个 Promise</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = promise1</span><br><span class="line"><span class="keyword">let</span> p2 = promise2</span><br><span class="line"><span class="keyword">const</span> promises = <span class="built_in">Promise</span>.all([p1, p2])</span><br><span class="line"><span class="keyword">return</span> promises</span><br></pre></td></tr></table></figure><h3 id="声明以及定义扩展"><a class="markdownIt-Anchor" href="#声明以及定义扩展"></a> 声明以及定义扩展</h3><p>在 <code>*.d.ts</code> 文件中声明类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">declare type Book = &#123;</span><br><span class="line">title: string,</span><br><span class="line">comment?: string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对 JavaScript 的原型进行扩展， 在一个 TS 文件进行定义和实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...path/common.ts</span></span><br><span class="line"><span class="keyword">export</span> &#123;&#125; <span class="comment">// this will make it module</span></span><br><span class="line"><span class="keyword">declare</span> global &#123;</span><br><span class="line">  <span class="keyword">interface</span> String &#123;</span><br><span class="line">    IsNullOrEmpty():<span class="built_in">boolean</span>;</span><br><span class="line">    Latex(color?:<span class="built_in">string</span>):<span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>.prototype.IsNullOrEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span> == <span class="literal">undefined</span> || <span class="keyword">this</span> == <span class="literal">null</span> || <span class="keyword">this</span> == <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要的地方引用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'..path/common'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">""</span></span><br><span class="line"><span class="keyword">const</span> is_it_empty = str.IsNullOrEmpty()</span><br></pre></td></tr></table></figure><h3 id="读取文本"><a class="markdownIt-Anchor" href="#读取文本"></a> 读取文本</h3><h6 id="html5-标准按钮"><a class="markdownIt-Anchor" href="#html5-标准按钮"></a> Html5 标准按钮</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">type</span>=<span class="string">'file'</span> (<span class="attr">change</span>)=<span class="string">'LoadLocalFile($event)'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Javascript 读取文本内容并转为数据库 (<em>使用 sql.js</em>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">LoadLocalFile(file) &#123;</span><br><span class="line">    <span class="keyword">const</span> fileurl: File = file.target.files[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    reader.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'read file:'</span>, reader.result);</span><br><span class="line">      <span class="keyword">const</span> buffer = reader.result;</span><br><span class="line">      <span class="keyword">const</span> Uints = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer <span class="keyword">as</span> <span class="built_in">ArrayBuffer</span>);</span><br><span class="line">      <span class="keyword">const</span> db = <span class="keyword">new</span> SQL.Database(Uints);</span><br><span class="line">      <span class="keyword">const</span> nodes = db.exec(<span class="string">'SELECT * From node'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(nodes);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    reader.readAsArrayBuffer(fileurl);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h6 id="使用nix-file-helpers-插件"><a class="markdownIt-Anchor" href="#使用nix-file-helpers-插件"></a> 使用nix-file-helpers 插件</h6><p><a href="https://www.npmjs.com/package/ngx-file-helpers" target="_blank" rel="noopener">文档地址</a></p><p><a href="https://www.npmjs.com/package/ngx-file-helpers" target="_blank" rel="noopener">演示地址</a></p><p>Html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-button</span>   <span class="attr">ngxFilePicker</span> #<span class="attr">filePicker</span>=<span class="string">"ngxFilePicker"</span> </span></span><br><span class="line"><span class="tag">    [<span class="attr">readMode</span>]=<span class="string">"readMode"</span></span></span><br><span class="line"><span class="tag">    (<span class="attr">readStart</span>)=<span class="string">"onReadStart($event)"</span> </span></span><br><span class="line"><span class="tag">    (<span class="attr">filePick</span>)=<span class="string">"onFilePicked($event)"</span></span></span><br><span class="line"><span class="tag">    (<span class="attr">readEnd</span>)=<span class="string">"onReadEnd($event)"</span>&gt;</span>导入案例<span class="tag">&lt;/<span class="name">ion-button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码,读取文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onFilePicked(file: ReadFile) &#123;</span><br><span class="line">    <span class="keyword">const</span> Uints = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(file.content <span class="keyword">as</span> <span class="built_in">ArrayBuffer</span>);</span><br><span class="line">    <span class="keyword">const</span> db = <span class="keyword">new</span> SQL.Database(Uints);</span><br><span class="line">    <span class="keyword">const</span> nodes = db.exec(<span class="string">'SELECT * From node'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(nodes);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h3><h6 id="引用第三方js文件"><a class="markdownIt-Anchor" href="#引用第三方js文件"></a> 引用第三方js文件</h6><p>在 <strong>angular.json</strong> 文件的 <code>test--&gt;scripts</code> 中添加需要引用的文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Javasript 和 Typescript 的重要技巧。&lt;/p&gt;
    
    </summary>
    
      <category term="IT" scheme="http://maiernte.github.io/wiki/categories/IT/"/>
    
      <category term="Code" scheme="http://maiernte.github.io/wiki/categories/IT/Code/"/>
    
    
      <category term="Hexo" scheme="http://maiernte.github.io/wiki/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>MathJax用于易学领域</title>
    <link href="http://maiernte.github.io/wiki/mathjax-yixue-usage.html"/>
    <id>http://maiernte.github.io/wiki/mathjax-yixue-usage.html</id>
    <published>2019-08-30T08:15:28.000Z</published>
    <updated>2020-05-07T20:37:46.324Z</updated>
    
    <content type="html"><![CDATA[<p>关于利用 <code>MathJax</code> 和 <code>Katex</code> 数学公式解释器，实现易学上排六爻盘和八字盘个功能。今天实现了易学上的核心功能。有望将来能添加更多的函数，以便利各位同门以及广大易友。</p><a id="more"></a><h3 id="效果与演示"><a class="markdownIt-Anchor" href="#效果与演示"></a> 效果与演示</h3><iframe width="560" height="315" src="https://www.youtube.com/embed/1bSesbpk23w" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>无法观看油管的朋友请移步B站：[使用MathJax渲染六爻和八字盘](https://www.bilibili.com/video/av66317810/)<h3 id="a-nameinstall安装和使用a"><a class="markdownIt-Anchor" href="#a-nameinstall安装和使用a"></a> <a name="install">安装和使用</a></h3><p>首先，你需要一个支持 Markdown (简称MD) 语言格式的文本编辑器。如果不知道什么是MD的话，请参阅以下介绍：</p><ul><li><p><a href="https://www.jianshu.com/p/7771794c88a1" target="_blank" rel="noopener">Markdown介绍及使用教程</a></p></li><li><p><a href="https://wizardforcel.gitbooks.io/markdown-simple-world/index.html" target="_blank" rel="noopener">Markdown - 简单的世界</a></p></li><li><p><a href="https://sspai.com/post/25137" target="_blank" rel="noopener">认识与入门 Markdown</a></p></li></ul><p>Markdown 语言<strong>简约而优美</strong>，可以自由转换成pdf、word、Html 等等各种其它格式的文本。可以推送到博客、微信公众号等等。虽然算卦是一个传统的行业，我们仍然不宜<strong>固步自封</strong>。MD语言支持MathJax和Katex书写Latex数学公式，可以写出非常漂亮的数学、物理、化学方面的公式。正式的科技刊物都要求用Latex格式。</p><p>这个易学解决方案是对 MathJax 进行扩展，加入指定的易学公式，让 MathJax 解释器去完成公式渲染。它并不是一个独立的程序。需要构建在已有的MD文本编辑器之上。我使用一个文件夹存放所有的关于易学方面的MD文件，并将这个文件夹同步到 <a href="https://www.jianguoyun.com/#/" target="_blank" rel="noopener">坚果云</a>，这样就可以实现多台电脑和移动端之间的同步，而不太需要一个独立的易学软件。甚至可以将MD文件导出为HTML文件，放到我的HEXO博客上(您正在阅读的这篇博文即是例子)。</p><p>理论上所有支持Markdown语言和MathJax的文本编辑器，都可以改装。改装过程需要两段代码和一个库文件。</p><h4 id="文本编辑器"><a class="markdownIt-Anchor" href="#文本编辑器"></a> 文本编辑器</h4><h5 id="typora"><a class="markdownIt-Anchor" href="#typora"></a> Typora</h5><p>Typora 是我个人最钟爱的MD编辑器，因此这里着重介绍。如果你喜欢用别的MD编辑器，比如iAWrte等，理论上可以用同样的方式改装。(无法百分百保证) 有需要的朋友可以私下联系我。</p><p>最新的安装教程请参考<a href="https://maiernte.gitee.io/huahedocument/chapter6/libinstall.html" target="_blank" rel="noopener">华鹤易学平台文档</a></p><h5 id="hexo博客"><a class="markdownIt-Anchor" href="#hexo博客"></a> Hexo博客</h5><h6 id="next-主题"><a class="markdownIt-Anchor" href="#next-主题"></a> next 主题</h6><ol><li>在主题配置文件中开启 MathJax</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># MathJax Support</span><br><span class="line">mathjax:</span><br><span class="line">  enable: true</span><br><span class="line">  per_page: false</span><br><span class="line">  #cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML</span><br><span class="line">  cdn: //cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML"</span><br></pre></td></tr></table></figure><ol start="2"><li>打开 <code>next/layout/_third_party/mathjax.swig</code> 文件，找到<strong>MathJax.js</strong>的脚本引用。添加以下代码</li></ol><p><a name="yixueJSBlock">标示易学公式脚本</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 紧跟着第3项的地方后面添加即可 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://raw.githack.com/maiernte/img/master/libs/mathjaxYixue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://raw.githack.com/maiernte/img/master/libs/bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> matherr = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"katex-error"</span>)</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">for</span>(<span class="keyword">var</span> i= <span class="number">0</span>;i &lt; matherr.length; i++)&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> dom  = matherr[i]</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> tmp = dom.innerText</span></span><br><span class="line"><span class="javascript">    dom.innerText = <span class="string">`\$<span class="subst">$&#123;tmp&#125;</span>\$`</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>需要使用易学公式的文章在头文件添加 <code>mathjax: true</code>。</li></ol><h6 id="wikitten-主题"><a class="markdownIt-Anchor" href="#wikitten-主题"></a> wikitten 主题</h6><ol><li>跟在 next 主题差不多， 首先在 <code>_config.yml</code> 主题配置文件中开启 MathJax</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plugins:</span><br><span class="line">    mathjax: true # options: true, false - to enable use Mathjax in your article</span><br></pre></td></tr></table></figure><ol start="2"><li>找到 <code>wikitten/layout/plugin/mathjax.ejs</code> 文件，重复上一节(<em>next 主题</em>)中的步骤，就可以实现在易学功能。</li></ol><h4 id="gitbook"><a class="markdownIt-Anchor" href="#gitbook"></a> Gitbook</h4><p>最新的安装教程请参考<a href="https://maiernte.gitee.io/huahedocument/chapter6/libinstall.html" target="_blank" rel="noopener">华鹤易学平台文档</a></p><h3 id="api-参数"><a class="markdownIt-Anchor" href="#api-参数"></a> API 参数</h3><p>使用易学函数库非常简单，在经过改装的Markdown编辑器中，输入易学公式，并用两个 <code>$</code> 符号将公式前后围起来即可。MD语言一般默认两个 <code>$</code> 符号之间的文本是数学公式，它会调用MathJax对公式进行渲染。否则，它会认为这是普通文本，而不会做任何动作。</p><h4 id="易学通用"><a class="markdownIt-Anchor" href="#易学通用"></a> 易学通用</h4><p><a name="nayin"><strong>命令：纳音</strong></a> <code>\nayin{干支名称}</code></p><p>【干支名称】 ：就是甲子、己卯等六十甲子。</p><p>例子1：<code>\nayin{戊午}</code> --&gt; <span class="katex-error" title="ParseError: KaTeX parse error: Undefined control sequence: \nayin at position 1: \̲n̲a̲y̲i̲n̲{戊午}">\nayin{戊午}</span></p><p><a name="nayin"><strong>命令：干支日历</strong></a> <code>\timegz{时间参数}{年月日}</code></p><p>【时间参数】 ：例如 2020-02-21。</p><p>【年月日】 ：省略时默认为<code>111</code>，即显示年月日。<code>0</code>表示不显示，<code>1</code>表示显示。</p><p>例子1：<code>\timegz{2020-02-21}</code> --&gt; <span class="katex-error" title="ParseError: KaTeX parse error: Undefined control sequence: \timegz at position 1: \̲t̲i̲m̲e̲g̲z̲{2020-02-21}">\timegz{2020-02-21}</span></p><p>例子2：<code>\timegz{2020-02-21}{011}</code> --&gt; <span class="katex-error" title="ParseError: KaTeX parse error: Undefined control sequence: \timegz at position 1: \̲t̲i̲m̲e̲g̲z̲{2020-02-21}{01…">\timegz{2020-02-21}{011}</span></p><h4 id="六爻"><a class="markdownIt-Anchor" href="#六爻"></a> 六爻</h4><p><a name="yao"><strong>命令：爻符</strong></a> <code>\yao{爻名}</code></p><p>【爻名】：laoyin， laoyang，shaoyin，shaoyang， x， o， =， -， 交，重，阴，阳，0，1，2，3</p><p>例子2：<code>\yao{x}</code>  --&gt; <span class="katex-error" title="ParseError: KaTeX parse error: Undefined control sequence: \yao at position 1: \̲y̲a̲o̲{x}">\yao{x}</span></p><p>例子3：<code>\yao{shaoyin}</code> --&gt; <span class="katex-error" title="ParseError: KaTeX parse error: Undefined control sequence: \yao at position 1: \̲y̲a̲o̲{shaoyin}">\yao{shaoyin}</span></p><p>例子4：<code>\yao{重}</code> --&gt; <span class="katex-error" title="ParseError: KaTeX parse error: Undefined control sequence: \yao at position 1: \̲y̲a̲o̲{重}">\yao{重}</span></p><p><a name="paigua"> <strong>命令：六爻排盘</strong></a> <code>\paigua{时令}{卦辞}{标识}</code></p><p>其中 【时令】、【卦辞】这两个参数是必须的，**【标识】**参数可以省略。</p><p>【时令】允许的格式为：“1980-1-3 08:15”、“2019年3月4日”、“申月戊寅日”</p><p>【卦辞】允许的格式为：“解之师”、“离为火”、“–==x-”、“0121100”、“阴阳阴交阴阳”</p><p>【标识】由三部分组成：ID号、简排、字符大小。格式为：<code>guadi/s/5</code></p><ul><li>「ID号」：随便一串字符，空白则默认为“gua1”。❌不允许只有数字，因为会与参数「字符大小」混淆。如果一个文本出现多个六爻卦，则每个卦都需要指定一个ID号。否则下面的命令<a href="#guayao">卦爻细节</a>不知道具体指向哪一个卦本。</li><li>「简排」：只允许<code>s</code> 和 <code>l</code>两个英文字符的其中一个。<code>s</code> 表示只显示短名，如“妻财”显示为“财”，“青龙”显示为“龙”。<code>l</code> 则显示完整名称。留白则按照用户全局设定来显示。（参阅<a href="#code2">用户设定</a>）</li><li>「字符大小」：允许 0 - 9 档。数字越大文字越大。默认大小为<code>5</code>或者用户的<a href="#code2">全局设定</a>。</li></ul><p>例子5： <code>$\paigua{1978年7月1日}{101201}{gua1}$</code> 效果</p><p class="katex-block katex-error" title="ParseError: KaTeX parse error: Undefined control sequence: \paigua at position 1: \̲p̲a̲i̲g̲u̲a̲{1978年7月1日}{101…">\paigua{1978年7月1日}{101201}{gua1}</p><p>✏️ 如果文章很长，需要在指定位置重新显示一遍卦本，则可以使用重排命令。即让【时令】和【卦辞】两个参数留白，只给出【ID号】。如 <code>\paigua{}{}{gua1}</code> 。留白的参数，仍然需要用大括号括起来，否则解释器会出错。</p><p><a name="guayao"> <strong>命令：卦爻细节</strong></a> <code>\guayao{标识}{位置}</code></p><p>使用前提：当前文本中已经排出至少一支六爻卦。</p><p>【标识】：与排盘命令的「标识」参数等同。由ID号、简排、字符大小三个部分组成。其中「ID号」标识已经存在的六爻盘。</p><p>【位置】：格式为 “ben1”、“fu3”、“bian5” 等，分别表示「本卦初爻」、「伏卦3爻」、「变卦5爻」</p><p>例子6：<code>\guayao{gua1}{ben4}</code> --&gt; <span class="katex-error" title="ParseError: KaTeX parse error: Undefined control sequence: \guayao at position 1: \̲g̲u̲a̲y̲a̲o̲{gua1}{ben4}">\guayao{gua1}{ben4}</span></p><blockquote><p>例子6 中给出的「ID号」为例子5中指定的ID号 “gua1”，并要求显示本卦4爻的具体信息。</p></blockquote><h4 id="八字"><a class="markdownIt-Anchor" href="#八字"></a> 八字</h4><p><a name="paibazi"> <strong>命令：八字排盘</strong></a> <code>\paibazi{时间}{性别}{标识}[细节]</code></p><p>【时间】和【性别】参数必填，【标识】和【细节】参数可选。(如果要第二次显示已有的八字盘，则【时间】和【性别】参数可留白，只给定【标识】参数中的「ID号」)</p><p>【时间】：允许格式 “1980-1-3 08:15”、“2019年3月4日 6时3分”</p><p>【性别】：允许格式 “m”、“f”、“男”、“女”、“乾”、“坤”、</p><p>【标识】：与排盘命令的「标识」参数等同。由ID号、简排、字符大小三个部分组成。</p><p>【细节】：允许“藏干”、“长生”、“纳音”这三个中的一个或者多个，也可以留白。格式为 <code>藏干/纳音/长生</code></p><p>例子7：<code>\paibazi{1990年5月1日 6:45}{男}{小明/s/5}</code></p><p><span class="katex-error" title="ParseError: KaTeX parse error: Undefined control sequence: \paibazi at position 1: \̲p̲a̲i̲b̲a̲z̲i̲{1990年5月1日 6:45…">\paibazi{1990年5月1日 6:45}{男}{小明/5}</span></p><p>例子8：重排例子7的八字盘 <code>\paibazi{}{}{小明/s/5}[纳音/藏干/长生]</code> ，并要求显示藏干和纳音等信息。</p><p><span class="katex-error" title="ParseError: KaTeX parse error: Undefined control sequence: \paibazi at position 1: \̲p̲a̲i̲b̲a̲z̲i̲{}{}{小明/s/5}[纳音…">\paibazi{}{}{小明/s/5}[纳音/藏干/长生]</span></p><p><a name="bazi"> <strong>命令：八字细节</strong></a> <code>\bazi{标识}{类别}[细节]</code></p><p>使用前提：当前文本中已经排出至少一个八字盘。</p><p>【标识】：与排盘命令的「标识」参数等同。由ID号、简排、字符大小三个部分组成。其中「ID号」标识已经存在的八字命盘。</p><p>【类别】：支持 “神煞”、“大运”、“流年”、“小运” 四个选项。</p><p>【细节】：具体含义视【类别】而定。</p><ul><li>类别为「神煞」时：「细节」为 1～ 9 的数字，表示每行列数。</li><li>类别为「大运」时：<code>1-9 纳音/藏干/长生/神煞</code> 前面的数字表示第几步大运，限定 1 到 10</li><li>类别为「流年」和「小运」时： <code>2015 - 2019 纳音/藏干/长生/神煞</code> 前面的数字表示年份，注意不要超过命盘的生命周期，否则会出错。「纳音/藏干/长生/神煞」可以留白，也可只显示一两项。</li></ul><p>例子9:  <code>\bazi{小明}{神煞}[6]</code> 显示小明命盘的神煞，每行6列。</p><p><span class="katex-error" title="ParseError: KaTeX parse error: Undefined control sequence: \bazi at position 1: \̲b̲a̲z̲i̲{小明}{神煞}[6]">\bazi{小明}{神煞}[6]</span></p><p>例子10: <code>\bazi{小明}{大运}[2-3 ]</code> 显示小明的第二到第三步大运</p><p><span class="katex-error" title="ParseError: KaTeX parse error: Undefined control sequence: \bazi at position 1: \̲b̲a̲z̲i̲{小明}{大运}[2-3]">\bazi{小明}{大运}[2-3]</span></p><p>例子11:  <code>\bazi{小明}{流年}[2017-2019 纳音/藏干/长生/神煞]</code> 显示小明的2017到2019年的流年信息。</p><p><span class="katex-error" title="ParseError: KaTeX parse error: Undefined control sequence: \bazi at position 1: \̲b̲a̲z̲i̲{小明}{流年}[2017-2…">\bazi{小明}{流年}[2017-2019 纳音/藏干/长生/神煞]</span></p><h3 id="未来与展望"><a class="markdownIt-Anchor" href="#未来与展望"></a> 未来与展望</h3><p>我知道这篇文章介绍的工具，并非所有人都能使用。所以在不久的将来，还是要制作一个独立易学软件，以便易友在PC端和移动端都能按照传统的方式使用。但由于时间和精力原因，我无法保证完成时间。</p><p>不断完善易学函数，提供更丰富的应用细节。在用户更为广泛的MD编辑器中实现此方式。比如有道云笔记、为知笔记、印象笔记等。并争取介绍移动端(Android &amp; iOS)实现此方式。也希望在Gitbook中实现。</p><p>希望能将师父的六爻和八字讲义，『增删卜易』等著作制作成Gitbook，将精彩的卦例和名人八字建成易学数据库。这样就可以通过我的易学函数直接获取， 比如 <code>\paibazi{蒋介石}</code>。</p><h3 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录:</h3><h4 id="命令列表"><a class="markdownIt-Anchor" href="#命令列表"></a> 命令列表</h4><p><a href="#nayin">纳音</a></p><p><a href="#yao">爻符</a></p><p><a href="#paigua">排卦</a></p><p><a href="#guayao">卦爻细节</a></p><p><a href="#paibazi">排八字</a></p><p><a href="#bazi">八字细节</a></p><h4 id="发布"><a class="markdownIt-Anchor" href="#发布"></a> 发布</h4><p>脚本文件的<a href="https://github.com/maiernte/img/raw/master/libs/bundle.js" target="_blank" rel="noopener">原始路径</a>是<code>https://github.com/maiernte/img/raw/master/libs/bundle.js</code>。因为涉及到跨域问题，要通过 <a href="https://raw.githack.com/" target="_blank" rel="noopener">Gitkack</a> 重链接，把上述路径输入到 Githack 的地址框，会得到「应用地址」和「开发地址」。</p><p><a href="https://rawcdn.githack.com/maiernte/img/bb3c42dc26b0866a142bb905d1753ac483e0a474/libs/bundle.js" target="_blank" rel="noopener">应用地址</a>：</p><p><code>https://rawcdn.githack.com/maiernte/img/11a1bb572a6875dbf434a7fc457ea2fdd329f7db/libs/bundle.js</code></p><p><a href="https://raw.githack.com/maiernte/img/master/libs/bundle.js" target="_blank" rel="noopener">开发地址</a>：</p><p><code>https://raw.githack.com/maiernte/img/master/libs/bundle.js</code></p><h4 id="查看当前易学函数库版本"><a class="markdownIt-Anchor" href="#查看当前易学函数库版本"></a> 查看当前易学函数库版本</h4><p>在 chrome 浏览其中打开此博文，Mac 系统中按 <code>⌘+⌥+I</code> ，Windows 系统 <code>Ctr+⇧+I</code>，或者 Chrome 菜单栏调出 “开发者工具”，选择 Console 页面，即可显示当前易学库版本和时间。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于利用 &lt;code&gt;MathJax&lt;/code&gt; 和 &lt;code&gt;Katex&lt;/code&gt; 数学公式解释器，实现易学上排六爻盘和八字盘个功能。今天实现了易学上的核心功能。有望将来能添加更多的函数，以便利各位同门以及广大易友。&lt;/p&gt;
    
    </summary>
    
      <category term="IT" scheme="http://maiernte.github.io/wiki/categories/IT/"/>
    
      <category term="skill" scheme="http://maiernte.github.io/wiki/categories/IT/skill/"/>
    
    
      <category term="工具" scheme="http://maiernte.github.io/wiki/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>用TypeScript编写JS函数库</title>
    <link href="http://maiernte.github.io/wiki/TypeScript-build-JS-Package.html"/>
    <id>http://maiernte.github.io/wiki/TypeScript-build-JS-Package.html</id>
    <published>2019-08-16T20:15:28.000Z</published>
    <updated>2019-08-24T11:30:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文具体介绍如何用TypeScript编写JavaScript库文件，以及制作npm工具包。主要参考下面两篇文章。我也省却一步步解释，只罗列相关的代码和我遇到的坑。想知道代码含义的请参阅原帖</p><ul><li><a href="http://imzc.me/dev/2016/11/22/getting-start-with-typescript/" target="_blank" rel="noopener">TypeScript第一步</a></li><li><a href="https://www.gowhich.com/blog/869" target="_blank" rel="noopener">如何使用Gulp构建TypeScript</a></li><li><a href="https://zhongsp.gitbooks.io/typescript-handbook/doc/handbook/tutorials/Migrating%20from%20JavaScript.html" target="_blank" rel="noopener">从Javascript迁移到Typescript</a> <em>只看相关的那一章就可以</em></li></ul><a id="more"></a><h1 id="安装-typescript"><a class="markdownIt-Anchor" href="#安装-typescript"></a> 安装 TypeScript</h1><p>终端执行 <code>npm install typescript -g</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tsc --version</span><br><span class="line">Version 3.5.3</span><br></pre></td></tr></table></figure><h1 id="创建工程"><a class="markdownIt-Anchor" href="#创建工程"></a> 创建工程</h1><ol><li>初始化项目</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir typescript_demo &amp;&amp; <span class="built_in">cd</span> typescript_demo</span><br><span class="line">npm init -y <span class="comment"># 初始化项目，会生成 package.json 文件</span></span><br></pre></td></tr></table></figure><ol start="2"><li>安装Gulp， 并在项目根目录下新建 <code>gulpfile.js</code> 文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-cli gulp typescript gulp-typescript --save-dev</span><br></pre></td></tr></table></figure><ol start="3"><li><p>在命令行中执行 <code>tsc --init</code> 可以在当前目录中快速创建一个 tsconfig.json 文件。</p></li><li><p>安装 Browserify ：目的是把所有<strong>ts</strong>文件打包成一个单一的<strong>js</strong>文件。</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install browserify tsify vinyl-source-stream --save-dev</span><br></pre></td></tr></table></figure><ol start="5"><li>Watchify、Babel和Uglify ：目的是让编译器保持运行，无需每次修改手动编译。</li></ol><p>npm install watchify gulp-util --save-dev</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install watchify gulp-util --save-dev</span><br></pre></td></tr></table></figure><ol start="6"><li>安装 Uglify ： 将输出文件 bundle.js 压缩</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-uglify vinyl-buffer gulp-sourcemaps --save-dev</span><br></pre></td></tr></table></figure><ol start="7"><li>Babel ：允许按新标准<strong>ES6</strong>编写代码，而最终会编译<strong>es05</strong>标准，兼容低版本浏览器。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babelify babel-core babel-preset-env vinyl-buffer gulp-sourcemaps --save-dev</span><br></pre></td></tr></table></figure><p>‼️ 安装中出现了错误, 显示babelify 版本太低. 将命令改为 <code>npm install babelify@8</code> 就能顺利进行下去了.</p><ol start="8"><li><p>编写主文件 <code>src/main.ts</code> (<em>名字随便起</em>)，在 <code>package.json</code> 中改为 $ “main”: “./dist/main.js”, $。创建两文件夹 <code>src</code> 和 <code>dist</code>，分别放置原文件和编译后的文件。为演示调用，再新建一个 <code>src/greet.ts</code> 文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># src/greet.ts</span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">path: <span class="built_in">string</span></span>): <span class="title">any</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ln)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hallo von <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># src/main.ts</span><br><span class="line"><span class="keyword">import</span> &#123; sayHello &#125; <span class="keyword">from</span> <span class="string">"./greet"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showHello</span>(<span class="params">idName: <span class="built_in">string</span>, name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> elt = <span class="built_in">document</span>.getElementById(idName);</span><br><span class="line">    elt.innerText = sayHello(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">showHello(<span class="string">"greeting"</span>, <span class="string">"TypeScript"</span>);</span><br></pre></td></tr></table></figure></li><li><p>新建 <code>src/index.html</code></p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"greeting"</span>&gt;</span>Loading ...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="10"><li>修改 <code>gulpfile.js</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="keyword">const</span> browserify = <span class="built_in">require</span>(<span class="string">"browserify"</span>);</span><br><span class="line"><span class="keyword">const</span> source = <span class="built_in">require</span>(<span class="string">'vinyl-source-stream'</span>);</span><br><span class="line"><span class="keyword">const</span> tsify = <span class="built_in">require</span>(<span class="string">"tsify"</span>);</span><br><span class="line"><span class="keyword">const</span> watchify = <span class="built_in">require</span>(<span class="string">"watchify"</span>);</span><br><span class="line"><span class="keyword">const</span> gutil = <span class="built_in">require</span>(<span class="string">"gulp-util"</span>);</span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">const</span> sourcemaps = <span class="built_in">require</span>(<span class="string">'gulp-sourcemaps'</span>);</span><br><span class="line"><span class="keyword">const</span> buffer = <span class="built_in">require</span>(<span class="string">'vinyl-buffer'</span>);</span><br><span class="line"><span class="keyword">const</span> paths = &#123;</span><br><span class="line">  pages: [<span class="string">'src/*.html'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> watchedBrowserify = watchify(browserify(&#123;</span><br><span class="line">  basedir: <span class="string">'.'</span>,</span><br><span class="line">  debug: <span class="literal">true</span>,</span><br><span class="line">  entries: [<span class="string">'src/main.ts'</span>],</span><br><span class="line">  cache: &#123;&#125;,</span><br><span class="line">  packageCache: &#123;&#125;</span><br><span class="line">&#125;).plugin(tsify));</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"copy-html"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(paths.pages)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">"dist"</span>));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">browserifyBundle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> watchedBrowserify</span><br><span class="line">    .transform(<span class="string">'babelify'</span>, &#123;</span><br><span class="line">      presets: [<span class="string">'env'</span>],</span><br><span class="line">      extensions: [<span class="string">'.ts'</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">    .bundle()</span><br><span class="line">    .pipe(source(<span class="string">'bundle.js'</span>))</span><br><span class="line">    .pipe(buffer())</span><br><span class="line">    .pipe(sourcemaps.init(&#123;</span><br><span class="line">      loadMaps: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(sourcemaps.write(<span class="string">'./'</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">"dist"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"browserify"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> browserifyBundle();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"default"</span>, gulp.series(<span class="string">'copy-html'</span>, <span class="string">'browserify'</span>));</span><br><span class="line">watchedBrowserify.on(<span class="string">"update"</span>, browserifyBundle);</span><br><span class="line">watchedBrowserify.on(<span class="string">"log"</span>, gutil.log);</span><br></pre></td></tr></table></figure><ol start="11"><li><p>修改 tsconfig.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"files"</span>: [</span><br><span class="line">        <span class="string">"src/*.ts"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"noImplicitAny"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"target"</span>: <span class="string">"es2015"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译并在浏览器打开 <code>dist/index.html</code></p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过gulp编译代码</span></span><br><span class="line">npx gulp</span><br></pre></td></tr></table></figure><blockquote><p>显示器中会显示 “Hello from TypeScript” 字样。</p></blockquote><p>我们看到 main.ts 调用了 greet.ts 的函数, 并生成一个 bundle.js 文件, 在 index.html 中被加载使用.</p><h1 id="调用javascript文件"><a class="markdownIt-Anchor" href="#调用javascript文件"></a> 调用JavaScript文件</h1><p>为了使用以前已经存在的JavaScript库文件, 在 src 下新建一个文件夹 libs 用来存放第三方JavaScript.</p><blockquote><p>projectRoot<br>├── src/<br>│     ├── libs/<br>│     │       ├── lunar.js<br>│     ├── main.ts<br>│     └── greet.ts<br>│<br>├── dist/<br>└── tsconfig.json</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># src/libs/lunar.js</span><br><span class="line"></span><br><span class="line">Lunar = &#123;</span><br><span class="line">    Name: <span class="string">"Dick"</span>,</span><br><span class="line">    sayHallo:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'i am Lunar'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ab</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">Ab.prototype.seta = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = num</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">Ab.prototype.geta = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">exports.Ab = Ab</span><br><span class="line">exports.Lunar = Lunar;</span><br></pre></td></tr></table></figure><p>修改 <code>greet.ts</code> 文件, 调用 <code>src/libs/lunar.js</code> 中的函数和对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">path: <span class="built_in">string</span></span>): <span class="title">any</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ln = <span class="built_in">require</span>(<span class="string">"./libs/lunar"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  ln.Ab = <span class="number">10</span></span><br><span class="line">    <span class="built_in">console</span>.log(ln.Ab)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hallo von <span class="subst">$&#123;name&#125;</span>, <span class="subst">$&#123;ln.Lunar.Name&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TypeScript使用<code>tsconfig.json</code>文件管理工程配置，例如想包含哪些文件和进行哪些检查。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">     <span class="attr">"noImplicitAny"</span>: <span class="literal">true</span>,  </span><br><span class="line">        //"outDir": "./dist", //不需要. gulpfile.js 已经处理过了</span><br><span class="line">        "allowJs": true,</span><br><span class="line">        "target": "es2015",</span><br><span class="line">        "esModuleInterop": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */</span><br><span class="line">    &#125;,</span><br><span class="line">   "files": [</span><br><span class="line">        <span class="string">"src/*.ts"</span></span><br><span class="line">    ],</span><br><span class="line">    "include": [</span><br><span class="line">        <span class="string">"./src/**/*.js"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到网页显示 <em>Hallo von TypeScript, Dick</em>,  打开chrome的开发者工具, 看到console 中写出 <code>10</code>.</p><h1 id="unit-test"><a class="markdownIt-Anchor" href="#unit-test"></a> Unit-Test</h1><p><a href="https://journal.artfuldev.com/unit-testing-node-applications-with-typescript-using-mocha-and-chai-384ef05f32b2" target="_blank" rel="noopener">参考：Unit testing node applications with Typescript – using nocha and chai</a></p><ol><li>安装测试包文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install chai mocha ts-node @types/chai @types/mocha --save-dev</span><br></pre></td></tr></table></figure><ol start="2"><li>新建一个test目录专门存放测试文件，并新建一个测试文件 <code>test/ganzhi.spec.ts</code></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; expect &#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'mocha'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'干支 function'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'should return hello world'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="string">'Hello world!'</span>;</span><br><span class="line">      expect(result).to.equal(<span class="string">'Hello world!'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>在 <code>package.json</code> 文件中配置测试参数和路径</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"mocha -r ts-node/register test/**/*.spec.ts"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>运行测试</li></ol><blockquote><p>$ npm run test</p><p>&gt; huahets@1.0.0 test /Users/mai/Projects/huahets</p><p>&gt; mocha -r ts-node/register test/**/*.spec.ts</p><p>干支 function</p><p>​    ✓ should return hello world</p><p>1 passing (19ms)</p></blockquote><h2 id="错误处理"><a class="markdownIt-Anchor" href="#错误处理"></a> 错误处理</h2><p>假设有以下函数调用中<code>LandMaps.FindCity</code>会给出一个异常。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = LandMaps.FindCity(<span class="string">"xx省"</span>, <span class="string">"xx市"</span>);</span><br><span class="line">expect(LandMaps.FindCity.bind(LandMaps, <span class="string">"err"</span>, <span class="string">""</span>)).throw(<span class="string">"Error Message"</span>) # 或者</span><br><span class="line">expect(LandMaps.FindCity.bind(LandMaps, <span class="string">"err"</span>, <span class="string">""</span>)).throw(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Error Message"</span>))</span><br></pre></td></tr></table></figure><h1 id="打包"><a class="markdownIt-Anchor" href="#打包"></a> 打包</h1><p><a href="https://www.xuejiayuan.net/blog/27db473912f642d8a5fa0e32af3bb600" target="_blank" rel="noopener">用 TypeScript 编写函数库</a></p><p><a href="https://requirejs.org/docs/start.html" target="_blank" rel="noopener">require.js 官方文档</a></p><p>通过上述方式生成的 bundle.js 文件不能被浏览器直接使用。参考上面两个网页提供的方式，可以生成给浏览器用的单一js文件。</p><ol><li>新建一个入口文件，将所有接口都连接起来，并统一导出</li></ol> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># yixue.ts</span><br><span class="line"><span class="keyword">import</span> &#123;TYDate, TYLunar&#125; <span class="keyword">from</span> <span class="string">"./tylunar"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;GanZhi&#125; <span class="keyword">from</span> <span class="string">"./ganzhi"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ShenSha&#125; <span class="keyword">from</span> <span class="string">"./shensha"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;WuXing, FetchWuXing&#125; <span class="keyword">from</span> <span class="string">"./wuxing"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Gua&#125; <span class="keyword">from</span> <span class="string">'./gua'</span></span><br><span class="line"><span class="keyword">import</span> &#123;LandMaps&#125; <span class="keyword">from</span> <span class="string">"./landmaps"</span></span><br><span class="line"></span><br><span class="line">exports.GanZhi = GanZhi</span><br><span class="line">exports.TYDate = TYDate</span><br><span class="line">exports.Gua = Gua</span><br></pre></td></tr></table></figure><ol start="2"><li>设置<code>tsconfig.json</code>让编译后的文件导出到<code>dist/cmjs</code>目录</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">    <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"dist/cmjs"</span>,</span><br><span class="line">    <span class="attr">"rootDir"</span>: <span class="string">"./src"</span>,</span><br><span class="line">    <span class="attr">"declaration"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"lib"</span>: [<span class="string">"dom"</span>, <span class="string">"es6"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>通过命令 tsc 编译</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -P tsconfig.json</span><br></pre></td></tr></table></figure><p>也可以在 package.json 中设定，然后运行 <code>npm run build:cmjs</code> 编译。编译后的 yixue.js 文件就是统一入口。</p><ol start="4"><li>yi xue.js 实际就是个目录，我需要将其打包成一个单一文件。 安装 browserify ,</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browserify dist/cmjs/base/yixue.js --standalone huahejs -o dist/web/yixue.js</span><br></pre></td></tr></table></figure><ol start="5"><li>下载 <a href="https://requirejs.org/docs/start.html" target="_blank" rel="noopener">require.js</a>， 并放到项目目录中。以下方式将 yixue.js 中的 <code>class GanZhi</code> 设为当前网页的一个全局函数。其它函数就可以调用。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>易学包<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">src</span>=<span class="string">"libs/require.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"greeting"</span>&gt;</span>易学包测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> newGanZhi</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            requirejs([<span class="string">"web/yixue"</span>], <span class="function"><span class="keyword">function</span><span class="params">(yixue)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(yixue)</span></span><br><span class="line"><span class="actionscript">                newGanZhi = <span class="function"><span class="keyword">function</span><span class="params">(arg)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="keyword">new</span> yixue.GanZhi(arg)</span></span><br><span class="line">                &#125; </span><br><span class="line">  </span><br><span class="line">                init()</span><br><span class="line">            &#125;);</span><br><span class="line">              </span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"init will be called"</span>)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> ele = <span class="built_in">document</span>.getElementById(<span class="string">"gz1"</span>)</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> gz = newGanZhi(<span class="number">1</span>)</span></span><br><span class="line">                ele.innerText = gz.Name</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gz1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">"gua"</span>&gt;</span>gua<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li><p>在 Node.js 中调用更简单</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;Gua, GanZhi, TYDate&#125; = <span class="built_in">require</span>(<span class="string">"./web/yixue"</span>)</span><br></pre></td></tr></table></figure></li></ol><p>需要更详细代码请下载项目：</p><p><a href="https://gitee.com/maiernte/typescript-build-js-package" target="_blank" rel="noopener">演示项目地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文具体介绍如何用TypeScript编写JavaScript库文件，以及制作npm工具包。主要参考下面两篇文章。我也省却一步步解释，只罗列相关的代码和我遇到的坑。想知道代码含义的请参阅原帖&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://imzc.me/dev/2016/11/22/getting-start-with-typescript/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TypeScript第一步&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gowhich.com/blog/869&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;如何使用Gulp构建TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zhongsp.gitbooks.io/typescript-handbook/doc/handbook/tutorials/Migrating%20from%20JavaScript.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;从Javascript迁移到Typescript&lt;/a&gt; &lt;em&gt;只看相关的那一章就可以&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="IT" scheme="http://maiernte.github.io/wiki/categories/IT/"/>
    
      <category term="skill" scheme="http://maiernte.github.io/wiki/categories/IT/skill/"/>
    
    
      <category term="工具" scheme="http://maiernte.github.io/wiki/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>还在用七牛?</title>
    <link href="http://maiernte.github.io/wiki/still-using-qiniu.html"/>
    <id>http://maiernte.github.io/wiki/still-using-qiniu.html</id>
    <published>2019-08-14T21:41:28.000Z</published>
    <updated>2019-08-15T06:54:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>自从七牛换了服务条款，每个空间就只分配测试域名, 30天到期。想省钱的用户，必须每30天倒腾一次。如果忘记了，过了期限，据说图都找不回来。不想费那个劲的用户， 得绑定自己的域名。 这样不但增加费用，还要考虑到域名备案。 十分麻烦。</p><a id="more"></a><p>这是我弃用七牛的主要原因。 第二个原因就是——<code>慢</code>! 也许我人在国外的原因吧， 每次打开七牛的后台，刷好几遍都打不开对象存储的页面，只能用第三方软件进行上传下载，那样会相对好一些.</p><p>第三个原因是七牛的图床不能分目录存储。 当图片越积越多的时候，管理和查找起来非常麻烦。比如我昨天用Typora的Pandoc功能将一个Word技术文档转换成MD文件，一个文件就有100来张图。放在七牛得分好几页显示了。如果再想找别的图, 那得多费劲.</p><p>后来还是把心思用在了Github上。 在自己的账号下新开一个仓库， 然后在自己的本地电脑专建立一个文件夹， 用来存放MD文档或者博客中使用到的图片， 把这个专门的文件夹推送到新的仓库就完了! 相比七牛, Github还有不少优势:</p><ul><li><strong>可以分多级目录存储</strong></li><li><strong>传输速度快</strong> !(<em>可能国内慢吧, 但国内可以同样的思路, 放到 Coding 或者 CSDN 上</em> )</li><li><strong>免费</strong></li><li><strong>不限流量</strong></li></ul><p>还要我说啥呢?</p><p>但引用Github图片, 要做一个小小的改动. 比如Github上一个图片的原始地址是:</p><blockquote><p><a href="https://github.com/maiernte/img/blob/master/books/ng-book2-71/image100.png" target="_blank" rel="noopener">https://github.com/maiernte/img/blob/master/books/ng-book2-71/image100.png</a></p></blockquote><p>需要把其中的 <code>blob</code> 改成 <code>raw</code>, 变成</p><blockquote><p><a href="https://github.com/maiernte/img/raw/master/books/ng-book2-71/image100.png" target="_blank" rel="noopener">https://github.com/maiernte/img/raw/master/books/ng-book2-71/image100.png</a></p></blockquote><p>自打有了Github这个神器, 可以跟七牛说再见! 再也不见!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从七牛换了服务条款，每个空间就只分配测试域名, 30天到期。想省钱的用户，必须每30天倒腾一次。如果忘记了，过了期限，据说图都找不回来。不想费那个劲的用户， 得绑定自己的域名。 这样不但增加费用，还要考虑到域名备案。 十分麻烦。&lt;/p&gt;
    
    </summary>
    
      <category term="IT" scheme="http://maiernte.github.io/wiki/categories/IT/"/>
    
      <category term="skill" scheme="http://maiernte.github.io/wiki/categories/IT/skill/"/>
    
    
      <category term="工具" scheme="http://maiernte.github.io/wiki/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Gitbook攻略</title>
    <link href="http://maiernte.github.io/wiki/gitbook_with_typora_gh-pages.html"/>
    <id>http://maiernte.github.io/wiki/gitbook_with_typora_gh-pages.html</id>
    <published>2019-08-14T21:02:14.000Z</published>
    <updated>2019-08-15T09:46:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文为你介绍如何使用利用 <strong>Typora + gitbook-cli + Github Pages</strong>  书写Gitbook. 在本地用 Typora 书写 md 文件, 用 gitbook-cli  编译, 最后发布到 Github Pages 上.</p><a id="more"></a><h1 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h1><p>前提是已经安装了Node, 直接用npm包管理工具安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g gitbook-cli</span><br><span class="line">gitbook -V <span class="comment"># 注意是大写V</span></span><br></pre></td></tr></table></figure><blockquote><p>CLI version: 2.3.2<br>GitBook version: 3.2.3</p></blockquote><h1 id="新建书籍"><a class="markdownIt-Anchor" href="#新建书籍"></a> 新建书籍</h1><ol><li><p>为新书建立一个根目录 <code>mkdir pytho_finance</code></p></li><li><p>在该目录下执行（命令行下）：<code>gitbook init</code>，之后会在该目录下产生2个文件，<a href="http://xn--README-9i3jrj930n.md" target="_blank" rel="noopener">分别是README.md</a>（书籍的介绍）<a href="http://xn--SUMMARY-7r4l.md" target="_blank" rel="noopener">和SUMMARY.md</a>（书籍的目录结构）。</p></li></ol><p><img src="https://github.com/maiernte/img/raw/master/Tech/gitbook%E7%9B%AE%E5%BD%95%E7%9A%84%E5%86%99%E6%B3%95.png" alt="gitbook目录的写法"></p><ol start="3"><li><p>按照上图格式填写目录和文件, 然后再次执行 <code>gitbook init</code> , GitBook 会查找 <a href="http://SUMMARY.md" target="_blank" rel="noopener">SUMMARY.md</a> 文件中描述的目录和文件，如果没有则会将其创建.</p></li><li><p>然后就可以预览书籍了 <code>gitbook serve</code>. 执行命令后会对 Markdown 格式的文档进行转换，默认转换为 html 格式，提示Serving book on <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>，打开网址即可查看.</p></li><li><p>构建书籍</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook build</span><br></pre></td></tr></table></figure><p>默认将生成的静态网站输出到 _book 目录。实际上，这一步也包含在 gitbook serve 里面，因为它们是 HTML，所以 GitBook 通过 Node.js 给你提供服务了。</p><p>build 命令可以指定路径, 或者指定端口, 或者生产 pdf , epub, mobi 等格式. <a href="https://www.cnblogs.com/eveblog/p/10003217.html" target="_blank" rel="noopener">具体参考文章</a>.</p><h1 id="发布到github-pages"><a class="markdownIt-Anchor" href="#发布到github-pages"></a> 发布到Github Pages</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin https://github.com/maiernte/gitbook_python_finance.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"new book"</span></span><br><span class="line">git push -u origin master <span class="comment"># 将源代码推送到master</span></span><br></pre></td></tr></table></figure><p>在GitHub的仓库中新添一个 <strong>gh-pages</strong> 的Branch.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mkdir new_fold</span><br><span class="line"><span class="built_in">cd</span> new_fold</span><br><span class="line">rm -rf . <span class="comment"># 删除这个目录下所有文件, 注意那  .git 文件夹不能删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在源代码目录中,也就是md文件的目录</span></span><br><span class="line">gitbook build </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将会产生一个 _book 目录</span></span><br><span class="line"><span class="comment"># 添加忽略, 以免下次推送的时候 _book  目录被推送.</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"*~"</span> &gt; .gitignore</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"_book"</span> &gt;&gt; .gitignore</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/node_modules"</span> &gt;&gt; .gitignore</span><br><span class="line"></span><br><span class="line">cp -r _book/* path_to/new_fold</span><br></pre></td></tr></table></figure><p>🖊 忽略文件夹，windows下的测试是 <code>/node_modules</code>， 不加双引号。</p><p>进入新目录, 推送编译后的html 和 js 文件到 gh-pages 的分支中去.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> path_to/new_fold</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"to gh-pages"</span></span><br><span class="line">git push -u origin gh-pages</span><br></pre></td></tr></table></figure><p>如此实现了将源代码保存到master, 将静态网站推送到gh-pages, 一个仓库搞定! 在浏览器输入仓库地址, 就可以看到自己的Gitbook. 比如我新书地址</p><blockquote><p><a href="https://maiernte.github.io/gitbook_python_finance/">https://maiernte.github.io/gitbook_python_finance/</a></p></blockquote><h2 id="更新和维护"><a class="markdownIt-Anchor" href="#更新和维护"></a> 更新和维护</h2><p>因为master 和 gh-pages 上存放的是不同的文档，所以拉取的时候也有指定 branch</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取源代码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/maiernte/gitbook_python_finance.git --branch master new_fold</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取静态网站</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/maiernte/gitbook_python_finance.git --branch gh-pages new_fold</span><br></pre></td></tr></table></figure><h1 id="个性化配置"><a class="markdownIt-Anchor" href="#个性化配置"></a> 个性化配置</h1><p>在项目的根目录上添加一个 <code>book.json</code> 文件, 用来更全面的配置项目. 比如头文件, 插件等等.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"使用Python处理金融数据"</span>,</span><br><span class="line">    <span class="attr">"author"</span>: <span class="string">"鎏金天涯 &lt;mai.yongfeng@gmail.com&gt;"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"使用Python处理金融数据的各种技术"</span>,</span><br><span class="line">    <span class="attr">"generator"</span>: <span class="string">"site"</span>,</span><br><span class="line">    <span class="attr">"plugins"</span>: [<span class="string">"mathjax"</span>],</span><br><span class="line">    <span class="attr">"links"</span>: &#123;</span><br><span class="line">        <span class="attr">"sidebar"</span>: &#123;</span><br><span class="line">            <span class="attr">"鎏金天涯个人博客"</span>: <span class="string">"http://goldentianya.pub"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数学插件"><a class="markdownIt-Anchor" href="#数学插件"></a> 数学插件</h2><p>在上述文件添加了 <code>&quot;plugins&quot;: [&quot;mathjax&quot;]</code>,  并执行命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook install ./ <span class="comment"># 会添加一堆 node_modules 包</span></span><br></pre></td></tr></table></figure><p>更详细的配置请参阅<a href="https://chrisniael.gitbooks.io/gitbook-documentation/content/" target="_blank" rel="noopener">官方文档</a>.</p><h2 id="目录插件"><a class="markdownIt-Anchor" href="#目录插件"></a> 目录插件</h2><p><a href="https://www.npmjs.com/package/gitbook-plugin-page-toc" target="_blank" rel="noopener">项目地址和文档</a></p><p>将 <em><strong>book.json</strong></em> 文件修改为  <code>&quot;plugins&quot;: [&quot;mathjax&quot;, &quot;page-toc&quot; ], ​</code> 每一页的目录就会出现在右上角。</p><h1 id="编译错误列表"><a class="markdownIt-Anchor" href="#编译错误列表"></a> 编译错误列表</h1><p>版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CLI version: 2.3.2</span><br><span class="line">GitBook version: 3.2.3</span><br></pre></td></tr></table></figure><h2 id="sharing-插件出错"><a class="markdownIt-Anchor" href="#sharing-插件出错"></a> sharing 插件出错</h2><p>添加了 <code>page-toc</code> 插件后，<code>gitbook serve</code> 的时候总是出现错误。就算把文章改回原来的样子也无补于事。</p><blockquote><p>info: 7 plugins are installed<br>info: loading plugin “livereload”… OK<br>info: loading plugin “highlight”… OK<br>info: loading plugin “search”… OK<br>info: loading plugin “lunr”… OK<br>info: loading plugin “sharing”… OK<br>info: loading plugin “fontsettings”… OK<br>info: loading plugin “theme-default”… OK<br>info: found 1 pages<br>info: found 0 asset files</p><p>Error: ENOENT: no such file or directory, stat ‘D:\f040371\git_book\plattform_finance_book\gitbook\gitbook-plugin-sharing\buttons.js’</p></blockquote><h3 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法"></a> 解决方法</h3><p>修改 <code>C:\Users\f040371\.gitbook\versions\3.2.3\lib\output\website\copyPluginAssets.js</code> 文件中的 112 行</p><p><img src="https://images2018.cnblogs.com/blog/623717/201808/623717-20180815170921683-2030924288.png" alt="copyPluginAssets.js"></p><p>将 <code>confirm: true</code> 改为 <code>confirm: false</code></p><p>参考文章:</p><hr><p><a href="https://beihaionline.com/11523.html" target="_blank" rel="noopener">使用GitBook和Typora写知识库</a></p><p><a href="https://www.cnblogs.com/eveblog/p/10003217.html" target="_blank" rel="noopener">gitbook+git+typora 的使用过程</a></p><p><a href="https://www.jianshu.com/p/02caaaaa97ef" target="_blank" rel="noopener">GitBook + Typora + Git 编写电子文档</a></p><p><a href="http://www.chengweiyang.cn/gitbook/github-pages/README.html" target="_blank" rel="noopener">Gitbook 发布到 Github Pages</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文为你介绍如何使用利用 &lt;strong&gt;Typora + gitbook-cli + Github Pages&lt;/strong&gt;  书写Gitbook. 在本地用 Typora 书写 md 文件, 用 gitbook-cli  编译, 最后发布到 Github Pages 上.&lt;/p&gt;
    
    </summary>
    
      <category term="IT" scheme="http://maiernte.github.io/wiki/categories/IT/"/>
    
      <category term="Tools" scheme="http://maiernte.github.io/wiki/categories/IT/Tools/"/>
    
    
      <category term="工具" scheme="http://maiernte.github.io/wiki/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>配置服务器端MySQL</title>
    <link href="http://maiernte.github.io/wiki/config-mysql-access-privileges-on-vps.html"/>
    <id>http://maiernte.github.io/wiki/config-mysql-access-privileges-on-vps.html</id>
    <published>2019-08-06T15:26:28.000Z</published>
    <updated>2019-08-14T13:10:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/bird3014/article/details/78481104" target="_blank" rel="noopener">文章</a></p><h6 id="问题一端口状态"><a class="markdownIt-Anchor" href="#问题一端口状态"></a> 问题一：端口状态</h6><ol><li>查看 3306 端口状态 <code>sudo netstat -an | grep 3306</code></li></ol><blockquote><p>tcp  0 0 127.0.0.1:3306 0.0.0.0:*</p></blockquote><p>3306端口是默认绑定在本地IP 127.0.0.1上的，所以外网无法访问该主机的3306端口。<br>打开MySQL的配置文件：<code>sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</code></p><ol start="2"><li>找到如下内容的一行并注释掉：</li></ol><blockquote><p>bind-address          = 127.0.0.1</p></blockquote><ol start="3"><li>重启MySQL服务</li></ol><blockquote><p>sudo systemctl restart mysql</p></blockquote><p>然后使用如下命令查看端口绑定状态</p><blockquote><p><code>sudo netstat -an | grep 3306</code></p></blockquote><hr><h6 id="问题二用户权限"><a class="markdownIt-Anchor" href="#问题二用户权限"></a> 问题二：用户权限</h6><p>查看用户权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -uroot -p[你的密码]</span><br><span class="line">use mysql</span><br><span class="line">select user,host from user</span><br></pre></td></tr></table></figure><p>当显示如下，表示用户root只允许内网访问</p><blockquote><p>root  localhost</p></blockquote><p>给用户授权</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &apos;root&apos;@&apos;[允许的ip]&apos; identified by &apos;[密码]&apos; with grant option;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>其中*<code>[允许的ip]</code><em>如果设置为</em>*%**的话则表示所有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">ip</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span></span></span></span>都可以访问，*<code>[密码]</code>*表示外网访问的密码是什么。比如我设置成所有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">ip</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span></span></span></span>都可访问，密码是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">root</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span></span></span></span>，则命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;root&apos; with grant option;</span><br><span class="line">flush privileges;</span><br><span class="line">select user,host from user;</span><br></pre></td></tr></table></figure><p>重新查看，会显示</p><blockquote><p>root %</p><p>root localhost</p></blockquote><h6 id="安装-phpmyadmin"><a class="markdownIt-Anchor" href="#安装-phpmyadmin"></a> 安装 phpMyAdmin</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/bird3014/article/details/78481104&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&quot;问题一端口状态&quot;&gt;&lt;a class=&quot;ma
      
    
    </summary>
    
      <category term="IT" scheme="http://maiernte.github.io/wiki/categories/IT/"/>
    
      <category term="Tools" scheme="http://maiernte.github.io/wiki/categories/IT/Tools/"/>
    
    
      <category term="工具" scheme="http://maiernte.github.io/wiki/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>斯多葛主义手册</title>
    <link href="http://maiernte.github.io/wiki/storic-summary.html"/>
    <id>http://maiernte.github.io/wiki/storic-summary.html</id>
    <published>2019-08-03T19:16:47.000Z</published>
    <updated>2019-08-14T06:31:28.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>世间的事，有些可控，有些不可控。可控的有：观点，追求，欲望，和喜恶等。这些都是我们自己可以做出选择的。不可控的是身体，财物，名声，指令等。这些我们都无法选择。</p><p>可控范围之内的东西在本质上是自由的，不被束缚、阻碍的。那些不可控的是虚的，是被奴役的，是我们受控于他人。记住，如果你觉得那些不可控的事物是自由的，那些受控于别人的也是你的，那么你就会被控制，被束缚。你会悲痛，你会受扰，你会指责神以及他人。但如果你只专注于你所能控制的，不被他人所拥有的干扰，那么就没有人能够影响你、束缚你。并且，你不会把过错推在他人身上。你不会去做违背你的意志的事。你不会有敌人。你也不会被伤害。</p><p>把这些当做你的目标，不让自己受那些没有意义的事诱惑，哪怕就一点点也不可以。放弃那些不可控的。如果你既想把握住可控的，又想拥有财富和权力，那么你将会什么都得不到，更不用说幸福和自由－因为幸福和自由是依赖于可控事物。</p><p>尽你最大的努力。这样你就可以对看似艰难的每一件事说：“你只不过是看起来艰难而已。” 然后比照你为自己制定的原则：这件事是否可控。如果在你控制范围之外，那么结果就无关乎于你。</p></li><li><p>欲望要求你去追求你想要的；厌恶则让你尽量避免你所讨厌的。但是，如果你得不到你想要的，你就会十分失望；如果你无法避免你所讨厌的，那你就会被厌恶扭曲。那么，如果你只讨厌那些在你出自本质所做选择的对立事物（即在你控制范围内你不会选择的事物），那么你就永远不需要去为之伤神。但是，如果你厌恶疾病、死亡、贫穷等你无法选择和改变的，那你就会被厌恶扭曲。不厌恶你所不能控制的，把厌恶限制在和你本性对立的事物。但是，就目前来说，压制你的欲望：因为如果你追求任何可控范围之外的事物，那你就必然会失望。不要轻易追求或者厌恶。</p></li><li><p>对于给你带来乐趣、有用处以及你十分喜欢的东西，从最不重要的事情开始，记得提醒你自己：他们真正的本质是什么。比如说，你很喜欢某个陶瓷杯，提醒你自己那只是因为你喜欢陶瓷杯而已，而不在于具体是哪个杯子。这样，如果杯子碎了，你也不会太伤心。当你亲吻你的家人时，提醒你自己你只是在亲吻和你亲近的人，这样当他们离世时，你就不会太难过。</p></li><li><p>当你做事情时，提醒你自己事情的本质是什么，你可能遇到哪些情况。比如说洗澡。在你洗澡之前，先想想洗澡时会发生哪些事情。有的人可能会把水溅得哪都是，有人可能会推娜，有人会诅咒，有人会偷东西。这样你在洗澡之前就可以跟自己说：“我现在要去洗澡了，任何这些事都有可能发生，但是这不是我能控制的，所以我会保持好的心态”。如果你以同样的心态去对待任何其他事情，你内心的平和就不会被打扰。因为你可以对自己说：”我希望的不仅仅是洗澡，还有不被任何意外困扰”。</p></li><li><p>人内心困扰时，通常不是被事物本身困扰，而是被他们自己的原则和概念所困扰。比如说，死亡本身并不可怕，要不然苏格拉底面临死亡时该有多么惊慌。我们对死亡的恐惧是源于我们对死亡的概念：死亡是可怕的。当我们被困扰、阻碍，伤心难过时，我们不要从事物本身或者他人身上找原因，而应该反省我们自己，还有我们的原则。一个还不通明的人，会把自己的糟糕情况怪罪于他人。一个刚刚开始学习处理这些情况的人，会从自己身上找原因。而一个已经通彻的人，既不会怪罪别人，也不会苛求自己。</p></li><li><p>不要为任何身外之物骄傲。一匹马可以因为自己的英爽豪气自豪，因为这是它本身拥有的。但是如果你因为拥有这样一匹马儿骄傲，事实上，你所自豪的，不过是马所拥有的好。那么，什么才是属于你的呢？你对事物的反应和态度。如果你对任何事物的形态的处之泰然，那么你就可以为你的理性自豪，因为这是属于你的。</p></li><li><p>想象以下情况：在一次航海旅行中，你的船抛锚靠岸了，你上岸去找水，途中你还捡了些你喜欢的贝壳，或者买个洋葱。但是，你的所有注意力必须一直集中在那艘船上，注意船长什么时候呼叫大家上船继续航行。当船长呼叫时，你必须立刻放下手中所有的东西，否则你就会被手脚捆绑得像只羊一样抛到船上。生活也是这样。生活给你老婆孩子，而不是洋葱贝壳。如果生活的船长呼叫了，你必须离开他们，立马跑到船上，而不是光顾着他们。如果你年纪大了，那你就不能离开船太远，否则你可能来不及回到船上。</p></li><li><p>不要苛求生活给予你所有你想要的，该发生的就会发生，随遇而安就好。</p></li><li><p>疾病影响的只是你的身体，而不是你选择的能力，除非那是你的选择。瘸的是腿，而不是你的脑子。不管发生什么事，只要这么跟自己说，你就会明白困难阻碍的是事物，而不是你。</p></li><li><p>对于每一件发生的事，检视你自己的能力，问你自己能够用哪些能力从每一件事情中获得什么适当的用处。遇到一个十分有吸引力的人时，你就会发现你的自控就是你的能力。当你痛苦时，你会发现自己的坚强。听到坏话时，你会发现自己的耐心。形成了这样的习惯之后，你就不会被事物的表象所影响。</p></li><li><p>不要说：“我失去了什么”。而应该说：“我归还了什么”。如果你的孩子或者妻子不幸离世了，你不是失去他们了，而是他们回归了。如果你的房子被夺走了，同样的，你是归还它们了。你可能会说：“可是那些夺走我房子的人是坏人！“。可是，给予你的人让谁来夺走你的房子真的那么重要吗？当你拥有时，照顾好它，但不要把它当做永久财物，就当自己是一个在那暂住的旅行者。</p></li><li><p>如果你想要提高自己，那就要拒绝以下思考方式：“如果我忽视那些琐事，那我就没有收入；如果我不更正我的仆人，那他们就会变坏”。 如果能够免于悲伤和恐惧，即使死于饥饿，那也比富得流油但备受精神困扰好得多。比起坏仆人，难道你的开心不是更重要吗？</p><p>如果你想要让自己变得更好，那就从小事做起。油洒了，酒被偷了，没关系，告诉你自己：“那只不过是平静生活的一点点代价。任何事情都是有代价的”。当你召集你的仆人时，他们可能不会来，也可能来了但是做的事情不合你意。但是他们并没有重要得以至于你必须打破自己的平静。</p></li><li><p>如果你想要让自己变得更好，那就不要在乎被人认为你是愚蠢的。不要希望别人认为你无所不知。即使你看上去好像对别人来说很重要，也不要被这种虚名欺骗。因为想要既保持内心平和又拥有外在事物是非常困难的。当你专注于二者之一时，你必然会忽略剩下的那个。</p></li><li><p>如果你希望你的家人、朋友长生不老，那是很愚蠢的想法。因为生死是在你控制范围之外的，是关乎他人的。同样地，如果你希望你的仆人不犯错，那你和傻瓜无异，因为你希望错误不是错误。但是，如果你希望你的欲望不带来失望，那是在你所能控制的范围之内的。练习控制你所能控制的。一个能够控制自己的喜恶的人，是自己生活的主人。这样的人，是真正自由的，不会成为被自己的欲望控制的奴隶，不会喜欢或者厌恶那些受别人控制的事物。</p></li><li><p>记住生活就像是一个晚餐聚会一样。如果别人递给你一盘食物，你应该伸出手去接，舀起适当份量给自己。如果盘子从你身边递过，不要试图去截取。如果还没轮到你这，不要起身去拿，而是等着别人递到你面前。用相同的态度对待孩子，配偶，财物，公共职位，这样你最终自然就会成为诸神宴会的搭档。如果你不仅能够做到这些，还能够做到不去拿你面前的食物，甚至是有能力拒绝你自己的欲望，这样你不仅仅能够成为诸神宴会的搭档，你还能进入他们的国度，成为为他们的一员。像Diogenes, Heraclitus这些人就是因为他们的尊贵行为而被视为神一般神圣。</p></li><li><p>当你看到别人因为孩子出国了，或者离世了，或者因为被琐事困扰而哭泣伤心时，不要让这些情感表象误导你。你必须作出自己的判断，明白他的伤心难过不是因为发生的事情本身，因为其他同样身处其中的人并没有受到同样的影响。他之所以受到那么大的困扰，是因为他自己本身对事情的判断。不要让自己和他一样受影响，不要让自己一样受困扰，不管是外在表现还是内心感受上。</p></li><li><p>记住你只是一出戏里的一个演员，而戏份角色并不是由你决定的。不管角色故事长短，不管你是一个穷人，瘸子，政府官员，或者是一个很私密的人，把你的角色演好演自然了就行。把分配给你的角色演好，那是你的本分；而到底是哪个角色，那不是由你决定的。</p></li><li><p>如果一只乌鸦向你预示不幸的事即将发生，不要让你内心的平静被这个表象破坏。要即刻告诉自己，“我不知道会发生什么，我不知道我的身体，财物，名声，或者家人会受什么影响，如果我愿意理性地去想，那么所有的这些恶兆就会变成幸运，因为我可以控制我要用什么态度去对待这些事情。不管发生什么，我都可以从中获得对我有利的。</p></li><li><p>如果你不去参与在你控制范围之外的任何战斗，那你就不会被打败。当你看到那些声名显赫，社会地位高，或者在任何方面做得很好的人，不要着急认为他们是开心的。因为如果我们清楚明白幸福只在于我们所能够控制的范围内，那我们就不会去羡慕或者攀比。不要向往头衔，而是要向往内心自由和平静。而要做到这一点，唯一的途径是要看轻我们控制范围之外的一切事物。</p></li><li><p>记住，那些对你出言不逊或者动手的人他本身并不是一种羞辱，而是代表那些言行的原则让你感觉到被羞辱。如果有人激怒你了，那是你对这种行为的观点激怒了你。试着不要被事情的表象牵引你的情感。给予适当的时间和稍作休息，你就能够很好地调整控制自己的情感。</p></li><li><p>把死亡和流放这些看似可怕的事看作是日常，那你就赢了。不用害怕贫穷，也不要刻意贪求任何东西。</p></li><li><p>如果你真心希望从哲学中获益，那么就要做好被众人嘲笑的准备：“她这是准备要成为一个哲学家呢”，“瞧她那傲慢的样子”……这个时候，你该做的，不是摆起傲慢的样子，而是要以神圣的态度忠诚于你所认定的，这样总有一天嘲笑你的人会开始尊敬你崇拜你。但是如果你被这些嘲笑打败，那你就成了双重的笑话。</p></li><li><p>如果你为了取悦他人而把你的注意力转移到那些外在的你无法控制的事物上，那么恭喜你，你已经成功地毁了你自己的生活了。</p></li><li><p>不要让以下这些思考方式困扰你：“我将会颜面丢尽，而且什么都不是。”耻辱是邪恶的，我们不应该被耻辱感所控制。因为获取权力或着被人嘲笑，这些都在你的控制范围之外。我们不用为任何在我们控制范围之外的事而感到耻辱。在我们可控范围之内，我们是自由的，能够左右我们自己的事情，是自我的主人－从这个角度看，我们永远不会什么都不是。“可是我帮不了我的朋友啊”，你可能会这么说。可是，怎么算是帮助朋友呢？你不能给他们钱，或者帮他们成为罗马市民。这些都是你所能控制范围之内的，是他们自己应该处理的事情。而且，如果这些都是你自己所没有的，那你怎么能够给他们呢？你可能会说：“如果我帮助他们获得这些的话，说不定我也能够得到一份呢“。如果我能够在保存我自己的尊严，忠诚和思想得到这些的话，请你帮我指明道路。可是如果你要我损害自己去得到你的利益，那这样的做法不仅不公平，而且愚蠢至极。</p></li><li><p>如果别人，而不是你，被邀请去宴会，或者被赞美，或者被别人咨询，不要懊恼。如果这些是好事，你应该为他人高兴。如果是坏事，不要难过。记住：这些都是在你的控制范围之外的，这样的对待一般是有对应的代价的。如果你不愿意付出这样的代价而希望得到同样的对待，那是不公平的。比如说别人用50分买了一棵生菜，但是你不想花这50分，那你就不应该认为拥有生菜的人占了便宜。那个人付出50分得到了生菜，而你口袋里还有那没有花出去的50分。同理，宴会邀请，别人的赞美，这些都是有代价的。如果你觉得这些对你是有价值的，那你就要付出同等的价值去拥有。如果你不付出就想要得到这些，那么你就是个贪得无厌的傻瓜。换个角度想，在决定不和别人交换价值的时候，你真的什么都没有得到吗？不是的：你得到了不赞美你不想赞美的人的自由，而且也不需要容忍你不想容忍的行为。</p></li><li><p>记住：很多事情不应该分自我或者他人。举个例子，如果邻居家的孩子打破了个杯子或者其他什么东西，我们很容易会说：“没事的，打碎东西是正常的”。可是如果打碎的是你自己的杯子呢？你应该作出相同的反应，而不是心生懊恼。同理，当别人的孩子或者妻子去世了，我们知道死亡的悲剧有时候是不可避免的，但是如果发生在我们自己身上的时候，我们却心如刀割。但是，我们应该清醒的认识到类似的悲剧不是我们能够控制的，我们所能够控制的是自己的情绪和反应，因为即使是发生在自己的身上，死亡本身并没有因为我们和死者的关系而变的更糟糕。</p></li><li><p>立一个靶子的目的，不是为了射失它（靶子的目的都是为了让人射中它）。那么同样的道理，大道创造出一个“恶”的事物（至少看起来如此），不是为了让人绕开它。</p></li><li><p>如果别人把你的身体交给一个路上遇到的陌生人，你一定会很生气。可是当别人用恶语打击你的时候，你为什么要心甘情愿地让别人控制你的思想，困惑你呢？</p></li><li><p>做每件事情都要考虑缘由和后果之后才能开始行动。如果你兴高采烈地开始而没有考虑可能发生的后果，当某些不好的后果开始出现时，你就会停止前进。拿参加奥林匹克赛事为例子。如果你把所有前因后果都考虑周全后认为参加比赛对你时有益的，那就全力以赴。其中，应该考虑的事情包括：你要遵守规则，节制饮食；不管风吹日晒雨淋都要雷打不动地坚持按时锻炼；你不能喝凉水活着酒。你必须全身心地、完全忘我地投入训练。而且，要做思想准备准备，比赛中你有可能会摔入沟里，胳膊脱臼，脚踝受伤，吃入尘土，被鞭打，甚至最后以失败告终。当你评估完所有的可能性之后还是一心想比赛，那就以战争的姿态出发。否则，你就会像孩子过家家一样：一会扮摔跤手，一会扮角斗士，一会吹喇叭，一会又想参加戏剧演出。这样，即使你什么都做过，但是什么都不是。就想大猩猩一样，你模仿你所看到的一切，不停地换把戏可能是一件好玩的事，但是你很快就玩腻了。你从来都没有完全投入过任何事，没有深度地从各个角度考虑和研究所有相关的细节，而只是凭一时的兴趣蜻蜓点水般地接触了各种行业。有些人当他们看到一个人说话的方式和Euphrates十分相像（不过事实上，真的有人能和Euphrates一样犀利善辩吗？），他们认为自己也能够拥有和哲学家一样的思想。但是，如果你细想一下，如果你想要成为一个摔跤手，那么你必须具备有摔跤手的宽阔肩膀，强有力的背部和大腿。但是每一个人的身体构造都是不一样的，你必须具有必备的条件才能称为一个好的摔跤手。同理，要想成为一个哲学家，你不能像你现在这样随心所欲地吃喝，不能让愤怒和不满控制你的情绪，你必须细心观察，劳作，控制自己的欲望，你必须能够忍受孤独，仆人的不敬，和外人的嘲笑，你必须能够接受别人在其他方面做得比你好。如果你已经仔细考虑过这些情况，如果你认为如果做到以上这些可以让你享受自由和宁静，那就尽情去追求哲学家的道路。如果你无法做到这些的话，那么就请不要继续，不要像孩子一样，一会试试做哲学，一会又想当政治家，演讲者，或者凯撒的军官。这些追求是互相矛盾的，你只能成为其中一个，不管做得好坏。你必须培养你自己内在的能够掌控行为的能力，或者外在的技术，二者只能取其一。</p></li><li><p>一个人的责任是由和别人的关系定义和衡量的。如果一个人拥有父亲的角色，那么他就有以下权利：他的孩子要照顾他，遵从他，耐心听他训话和教导。那如果他不是一个好父亲呢？他也应该受到同等的对待，因为我们无法选择我们的父亲是谁。不管他做了什么，你必须做到让自己心安理得。因为只有你能够让别人的行为伤害到你。当你觉得你被伤害了，那你就会被伤害。如果你以同样的逻辑看待邻居，市民，将军这些不同的角色，你就能够清楚地明白与这些角色相对应的社会责任。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/maiernte/img/raw/master/collection/%E9%A9%AC%E5%8F%AF%E5%A5%A5%E5%8B%92%E7%95%99.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;世间的事，有些可控，有些不可控。可控的有：观点，追求，欲望，和喜恶等。这些都是我们自己可以做出选择的。不可控的是身体，财物，名声，指令等。这些我们都无法选择。&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://maiernte.github.io/wiki/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="哲理" scheme="http://maiernte.github.io/wiki/tags/%E5%93%B2%E7%90%86/"/>
    
      <category term="书籍" scheme="http://maiernte.github.io/wiki/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>同步Hexo文章与Mac上原笔记的分类和标签</title>
    <link href="http://maiernte.github.io/wiki/synchron-the-tag-and-categories-btw-pc-hexo.html"/>
    <id>http://maiernte.github.io/wiki/synchron-the-tag-and-categories-btw-pc-hexo.html</id>
    <published>2019-08-01T15:30:00.000Z</published>
    <updated>2019-08-03T12:58:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近才搞明白，原来<strong>Hexo</strong>博客的<code>_post</code>文件夹里面的Markdown原文件是可以按照分级嵌套的目录结构摆放的。编译的时候才放到<strong>public</strong>这个单一目录下。如果能让文章在Hexo的<mark>分类</mark>严格跟md文件的存储目录一一对应，将来需要找原文件的时侯会方便很多。😄</p><p>使用<strong>Mac</strong>系统的同学也知道，mac有个很风骚的操作，就是给文件分配不同颜色的标签，非常方便文件寻找。我也希望博客上的文章标签，能跟Mac系统里的标签统一起来。😄</p><p>实现物理存储目录与<code>Hexo分类</code>统一很简单，将源md文件的相对存储路径写到文件meta元素的<code>categories</code>里面就行了。比如源文件放在<code>我的博客--&gt;IT--&gt;前端</code>，文章的头文件就写成这样：<code>categories：[IT, 前端]</code>。</p><p>实现标签的统一稍微麻烦一点，需要先读取文件实际分配到的标签。网上已经有一个公开的项目， <a href="https://github.com/jdberry/tag" target="_blank" rel="noopener">tag</a> 。下载并安装，就可以通过 <code>tag</code> 命令读取文件和文件夹的标签。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install tag</span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">tag --version</span><br><span class="line"><span class="comment"># 读取文件标签</span></span><br><span class="line">tag --list fileUrl</span><br></pre></td></tr></table></figure><p>我已经写好了相应的脚本文件，下载并执行脚本文件就好了。脚本文件里的<code>dirPath</code>变量是我的统一存放md源文件的文件夹，你需要改成自己的存放路径，那样就不用每次运行的时候输入一遍。</p><blockquote><p>我在Hexo项目的根目录新添一个文件夹专门存放管理的脚本文件，每次都在终端运行这个脚本，所以默认执行路径是 <code>./source/_post</code>。</p></blockquote><p>运行脚本的时候可以设定时间参数，过滤掉太久远的文件。默认情况不会更改文件内容，只查看文件的实际分类和标签是否与文内头文件相同。然后按照给出的列表手动更改。如果想让程序自动更改，按照提示输入<code>fix</code>参数就好。</p><script src="https://gist.github.com/maiernte/b906f7bb99ae8ea3aa616f0df9a4679a.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近才搞明白，原来&lt;strong&gt;Hexo&lt;/strong&gt;博客的&lt;code&gt;_post&lt;/code&gt;文件夹里面的Markdown原文件是可以按照分级嵌套的目录结构摆放的。编译的时候才放到&lt;strong&gt;public&lt;/strong&gt;这个单一目录下。如果能让文章在Hexo的
      
    
    </summary>
    
      <category term="IT" scheme="http://maiernte.github.io/wiki/categories/IT/"/>
    
      <category term="Web" scheme="http://maiernte.github.io/wiki/categories/IT/Web/"/>
    
    
      <category term="Hexo" scheme="http://maiernte.github.io/wiki/tags/Hexo/"/>
    
      <category term="Mac" scheme="http://maiernte.github.io/wiki/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>有用的Shell命令</title>
    <link href="http://maiernte.github.io/wiki/helpfull-shell-command.html"/>
    <id>http://maiernte.github.io/wiki/helpfull-shell-command.html</id>
    <published>2019-07-30T15:30:28.000Z</published>
    <updated>2019-08-14T13:12:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>在线网站可以找到基本的东西：<a href="https://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a>  <a href="https://man.linuxde.net/docs/shell_regex.html" target="_blank" rel="noopener">shell 正则表达式</a></p><h1 id="文件内容检索"><a class="markdownIt-Anchor" href="#文件内容检索"></a> 文件&amp;内容检索</h1><h2 id="正则表达式注意的地方"><a class="markdownIt-Anchor" href="#正则表达式注意的地方"></a> 正则表达式注意的地方</h2><ul><li>花括号之前要加转义字符 <code>[a-z]\{3\}</code></li><li>空格就是转义加空格<code>\</code>，而不是<code>\s</code> 。如 <code>[a-z0-9_\ ]\{3,\}</code></li><li>这几个符号 <code>_ - . #</code>都不需要加转义符。</li><li>不要轻易加<mark>行结束符</mark>$，可能回车才是最后符号，所以可能找不到。</li></ul><a id="more"></a><h2 id="grep"><a class="markdownIt-Anchor" href="#grep"></a> grep</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -r 递归搜索子目录</span></span><br><span class="line"><span class="comment"># -l 只显示文件</span></span><br><span class="line"><span class="comment"># -n 显示文件和匹配的行</span></span><br><span class="line"><span class="comment"># 搜索 “markdown” 字符串并输入到文件里</span></span><br><span class="line"><span class="comment"># Formating the Results...</span></span><br><span class="line">grep <span class="variable">$begrif</span> <span class="variable">$directory</span> <span class="variable">$args</span> |awk <span class="string">'&#123; print "[" $1 "](" $1 ")\n" &#125;'</span> &gt; suchergebnisse.md</span><br><span class="line"><span class="comment"># 将结果转为Windows目录</span></span><br><span class="line">sed -i -- <span class="string">'s/\/D\//D:\/\//g'</span> suchergebnisse.md</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Fertig! Ergebnisse siehe Datei 'suchergebnisse.md'"</span></span><br><span class="line"><span class="built_in">read</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/u013485792/article/details/52243479" target="_blank" rel="noopener">更多参数请读此文</a> 示例脚本</p><p><code>grep</code> 正则表达式的例子</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!bin/bash</span></span><br><span class="line"><span class="comment"># &#123;#part0000_split_050.html#nav_point-99 .calibre13&#125;</span></span><br><span class="line">result=$(grep  <span class="string">'&#123;#part0000_split_[0-9]\&#123;3\&#125;.html[a-z0-9_\ -.#]\&#123;3,\&#125;calibre13&#125;'</span> 文件名)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$result</span>"</span> = <span class="string">""</span> ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Nichts gefunden!"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"><span class="built_in">read</span></span><br></pre></td></tr></table></figure><p>grep或操作</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -E <span class="string">'123|abc'</span> filename  // 找出文件（filename）中包含123或者包含abc的行</span><br><span class="line">egrep <span class="string">'123|abc'</span> filename    // 用egrep同样可以实现</span><br><span class="line">awk <span class="string">'/123|abc/'</span> filename   // awk 的实现方式</span><br></pre></td></tr></table></figure><p>grep与操作</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep pattern1 files | grep pattern2 //显示既匹配 pattern1 又匹配 pattern2 的行。</span><br></pre></td></tr></table></figure><p>其它常用选项</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grep -i pattern files   //不区分大小写地搜索。默认情况区分大小写，</span><br><span class="line">grep -l pattern files   //只列出匹配的文件名，</span><br><span class="line">grep -L pattern files   //列出不匹配的文件名，</span><br><span class="line">grep -w pattern files  //只匹配整个单词，而不是字符串的一部分（如匹配‘magic’，而不是‘magical’），</span><br><span class="line">grep -C number pattern files //匹配的上下文分别显示[number]行，</span><br></pre></td></tr></table></figure><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码</div></div><div class="fold"><script src="https://gist.github.com/maiernte/121484228f141b714cbf4be39d59c69d.js"></script></div></div><h2 id="sed-命令"><a class="markdownIt-Anchor" href="#sed-命令"></a> sed 命令</h2><p><a href="https://man.linuxde.net/sed" target="_blank" rel="noopener">参考文献</a></p><h3 id="文本替代"><a class="markdownIt-Anchor" href="#文本替代"></a> 文本替代</h3><p>以下文本替换通过<code>pandoc</code>导入后的文件，残留很多内部跳转链接：如</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">#part0000_split_003.html#nav_point_1 .not-in-toc&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> running</span><br><span class="line"><span class="comment">#sed  's/^#part0000_split_$/p' -f ../Linux_shell_Anleitung.md ;</span></span><br><span class="line">sed -i -- <span class="string">'s/^\[\]&#123;#part0000_split_[0-9]\&#123;3\&#125;.html&#125;$//g'</span> ../Linux_shell_Anleitung.md </span><br><span class="line"></span><br><span class="line"><span class="comment">#&#123;#part0000_split_017.html#nav_point_21 .calibre8&#125;  &#123;#part0000_split_003.html#nav_point_1 .not-in-toc&#125;</span></span><br><span class="line">sed -i -- <span class="string">'s/&#123;#part0000_split_[0-9]\&#123;3\&#125;.html#[a-z0-9_-]\+ .[a-z0-9_-]\+&#125;//g'</span> ../Linux_shell_Anleitung.md </span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> fertig!</span><br><span class="line"><span class="built_in">read</span></span><br></pre></td></tr></table></figure><h3 id="整行替代"><a class="markdownIt-Anchor" href="#整行替代"></a> 整行替代</h3><p><a href="https://www.cnblogs.com/wangqiguo/p/6718512.html" target="_blank" rel="noopener">参考文献</a></p><p>替代以 <code>categories:</code> 开头的整行（允许行开头有空格或制表符）。<code>c</code> 代表整行，以字符串 <em>categories: [IE]</em> 替代整行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux 下的写法</span></span><br><span class="line">sed -i -- <span class="string">'/^[[:blank:]]*categories:/c categories: [IE]'</span> result.txt </span><br><span class="line"><span class="comment"># Mac 下的写法</span></span><br><span class="line">sed -i <span class="string">''</span> <span class="string">'s/^[[:blank:]]*tags:.*/tags: [心理]/'</span> <span class="variable">$1</span></span><br></pre></td></tr></table></figure><p>错误：如果将参数 <code>c</code> 写在前面，会将整个文本每一行都替换掉。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux 下的写法</span></span><br><span class="line">sed -i -- <span class="string">'c/^[[:blank:]]*categories:/categories: [IE]/'</span> result.txt</span><br></pre></td></tr></table></figure><h2 id="find"><a class="markdownIt-Anchor" href="#find"></a> find</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找所有的 md 文件</span></span><br><span class="line">find  /root/bibliothek/markdowns/blog_posts/  -<span class="built_in">type</span> f -name <span class="string">"*.md"</span> </span><br><span class="line"><span class="comment"># 查找一天之前的文件， 一小时前时 -1h，一周 -1w</span></span><br><span class="line">find . -<span class="built_in">type</span> f -mtime -1d</span><br></pre></td></tr></table></figure><p>如果要处理复杂的事情，就要用到函数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"><span class="function"><span class="title">showFileInfo</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明函数</span></span><br><span class="line"><span class="built_in">export</span> -f showFileInfo</span><br><span class="line"><span class="comment"># 使用函数</span></span><br><span class="line">find <span class="variable">$dirPath</span> -name <span class="string">"*.md"</span> | xargs -n 1 -P 10 -I &#123;&#125;  bash -c <span class="string">'showFileInfo "$@"'</span> _ &#123;&#125; \;</span><br></pre></td></tr></table></figure><h2 id="查找最新文件"><a class="markdownIt-Anchor" href="#查找最新文件"></a> 查找最新文件</h2><ul><li><p>将文件按从新到旧排列，取第一个。</p><p><code>ls -t *.cpp | head -1</code></p></li><li><p>将文件按从旧到新排列，取最后一个。</p><p><code>ls -rt *.cpp | tail -1</code></p></li><li><p>列出文件时间戳</p><p><code>ls -l simpleNode.js |awk '{print $6 &quot;-&quot; $7 &quot;-&quot; $8 }'</code></p></li><li><p>整合以上两个命令，找到最新的文件，读取时间戳</p><p><code>ls -t *.* | head -1 | xargs ls -l | awk '{print $6 &quot;-&quot; $7 &quot;-&quot; $8 }'</code></p></li></ul><h1 id="字符串处理"><a class="markdownIt-Anchor" href="#字符串处理"></a> 字符串处理</h1><p><a href="https://www.jianshu.com/p/5709118af1c6" target="_blank" rel="noopener">字符串处理参考文献</a>    <a href="https://blog.csdn.net/Jerry_1126/article/details/83930956" target="_blank" rel="noopener">将分隔符的字符串转为数组的几种方法</a></p><p>配合使用，可以直接用 shell 实现文件内标签和分类的替换。</p><h2 id="数组转字符串"><a class="markdownIt-Anchor" href="#数组转字符串"></a> 数组转字符串</h2><p>使用分隔符将数组转字符串：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ids=(1 2 3 4); </span><br><span class="line">lst=$( IFS=<span class="string">'/'</span>; <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;ids[*]&#125;</span>"</span> ); </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$lst</span></span><br><span class="line"><span class="comment"># 结果是：1/2/3/4</span></span><br></pre></td></tr></table></figure><h2 id="字符串转数组"><a class="markdownIt-Anchor" href="#字符串转数组"></a> 字符串转数组</h2><p><a href="https://blog.csdn.net/Jerry_1126/article/details/83930956" target="_blank" rel="noopener">懒得写，看范例</a></p><h2 id="字符串替换"><a class="markdownIt-Anchor" href="#字符串替换"></a> 字符串替换</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原串 [娱乐,经济,重要] =&gt; 目标串 [娱乐, 经济, 重要]</span></span><br><span class="line"><span class="variable">$&#123;tags/,/, &#125;</span>  <span class="comment"># 只替换了一个，结果变成 [娱乐, 经济,重要]</span></span><br><span class="line"><span class="variable">$&#123;tags//,/, &#125;</span> <span class="comment"># 替换了所有符合的，结果变成 [娱乐, 经济, 重要]</span></span><br><span class="line"><span class="comment"># 原串 [重要] =&gt; 目标串 重要</span></span><br><span class="line"><span class="variable">$&#123;tags//[\[\] ]/&#125;</span></span><br></pre></td></tr></table></figure><h3 id="消除回车符-换行符-制表符"><a class="markdownIt-Anchor" href="#消除回车符-换行符-制表符"></a> 消除回车符、换行符、制表符</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># arg是个字符串变量， 可能带有回车符\r</span></span><br><span class="line"><span class="comment"># 把它整个作为参数使用会带来很多麻烦。用以下命令将其替换掉</span></span><br><span class="line">newvar=<span class="variable">$&#123;arg//[$'\t\r\n']/&#125;</span></span><br></pre></td></tr></table></figure><h2 id="详细用法"><a class="markdownIt-Anchor" href="#详细用法"></a> 详细用法</h2><p><a href="https://blog.csdn.net/ljianhui/article/details/43128465" target="_blank" rel="noopener">参考文献</a></p><ol><li><code>${var##*/}</code><br>该命令的作用是去掉变量var从左边算起的最后一个’/‘字符及其左边的内容，返回从左边算起的最后一个’/’（不含该字符）的右边的内容。使用例子及结果如下：</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var=dir1/dir2/file.txt </span><br><span class="line">--&gt; file.txt</span><br></pre></td></tr></table></figure><p>从运行结果可以看到，使用该命令，可以提取出我们需要的文件名<em>file.txt</em>。</p><p>若使用时在shell程序文件中，可以使用变量来保存这个结果，再加以利用，如file=<code>${var##*/}</code></p><ol start="2"><li><code>${var##*.}</code><br>该命令的作用是去掉变量var从左边算起的最后一个’.‘字符及其左边的内容，返回从左边算起的最后一个’.’（不含该字符）的右边的内容。使用例子及结果如下：</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var=dir1/dir2/file.txt </span><br><span class="line">--&gt; txt</span><br></pre></td></tr></table></figure><p>从运行结果可以看到，使用该命令，可以提取出我们需要的文件后缀。</p><p>如果文件的后缀不仅有一个，例如，file.tar.gz，命令<code>${var##*.}</code>仅能提取最后一个后缀，而我想提取tar.gz时该怎么办？那么就要用下面所说的<code>${var#*.}</code>命令了。</p><ol start="3"><li><code>${var#*.}</code><br>该命令的作用是去掉变量var从左边算起的第一个’.‘字符及其左边的内容，返回从左边算起第一个’.’（不含该字符）的右边部分的内容。使用例子及结果如下：</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var=dir1/dir2/file.tar.gz </span><br><span class="line">--&gt; tar.gz</span><br></pre></td></tr></table></figure><p>从运行结果可以看到，使用该命令，可以提取出文件的多个后缀。</p><ol start="4"><li><code>${var%/*}</code><br>该命令的使用是去掉变量var从右边算起的第一个’/‘字符及其右边的内容，返回从右边算起的第一个’/’（不含该字符）的左边的内容。使用例子及结果如下：</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var=dir1/dir2/file.txt </span><br><span class="line">--&gt; dir1/dir2</span><br></pre></td></tr></table></figure><p>从运行的结果可以看到，使用该命令，可以提取出我们需要的文件所在的目录</p><ol start="5"><li><code>${var%%.*}</code><br>该命令的使用是去掉变量var从右边算起的最后一个’.‘字符及其右边的内容，返回从右边算起的最后一个’.’（不含该字符）的左边的内容。使用例子及结果如下：</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var=dir1/dir2/file.txt </span><br><span class="line">--&gt; dir1/dir2/file</span><br></pre></td></tr></table></figure><p>当我们需要建立一个与文件名相同名字（没有后缀）的目录与对应的文件相对应时，就可以使用该命令来进行操作。例如，解压文件的情况就与此类似，我们压缩文件file.zip时，会在与file.zip同级目录下建立一个名为file的目录。</p><ol start="6"><li>总结</li></ol><p>其实${}并不是专门为提取文件名或目录名的，它的使用是变量的提取和替换等等操作，它可以提取非常多的内容，并不一定是上面五个例子中的’/‘或’.’。也就是说，上面的使用方法只是它使用的一个特例。</p><p>看到上面的这些命令，可能会让人感到非常难以理解和记忆，其实不然，它们都是有规律的。</p><ul><li><p>#：表示从左边算起第一个</p></li><li><p>%：表示从右边算起第一个</p></li><li><p>##：表示从左边算起最后一个</p></li><li><p>%%：表示从右边算起最后一个</p></li></ul><p>换句话来说，＃总是表示左边算起，％总是表示右边算起。</p><p>＊：表示要删除的内容，对于#和##的情况，它位于指定的字符（例子中的’/‘和’.’）的左边，表于删除指定字符及其左边的内容；对于%和%%的情况，它位于指定的字符（例子中的’/‘和’.’）的右边，表示删除指定字符及其右边的内容。这里的’<em>'的位置不能互换，即不能把</em>号放在#或##的右边，反之亦然。</p><p>例如：<code>${var%%x*}</code>表示找出从右边算起最后一个字符x，并删除字符x及其右边的字符。</p><p>看到这里，就可以知道，其实该命令的用途非常广泛，上面只是指针文件名和目录名的命名特性来进行提取的一些特例而已。</p><h2 id="basename和dirname"><a class="markdownIt-Anchor" href="#basename和dirname"></a> basename和dirname</h2><p><code>${}</code>并不是专门为提取文件名和目录名设计的命令，那么<code>basename</code>和<code>dirname</code>命令就是专门为做这一件事而已准备的了。</p><ol><li><code>basename</code><br>该命令的作用是从路径中提取出文件名，使用方法为basename NAME [SUFFIX]。</li></ol><p>1.1 从路径中提出出文件名（带后缀），例子如下：</p><p>1.2 从上面命令的用法中可以看到，后缀（SUFFIX）是一个可选项。所以，若只想提取出文件名file，而不带有后缀，还可以在变量的后面加上后缀名，例子如下：</p><ol start="2"><li><code>dirname</code><br>该命令的作用是从路径中提取出目录名，使用方法为 dirname NAME。使用例子如下：</li></ol><p>这样就提取出了file.txt文件所在的目录。</p><p>注：该命令不仅能提取出普通文件所的目录，它能提取出任何文件所在的目录，例如目录所在的目录，如下：</p><p>它提取出了目录dir2所在的目录dir1.</p><hr><h1 id="查看硬盘剩余空间"><a class="markdownIt-Anchor" href="#查看硬盘剩余空间"></a> 查看硬盘剩余空间</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整个硬盘空间</span></span><br><span class="line">df -hl</span><br><span class="line"><span class="comment"># 查看某个文件夹大小</span></span><br><span class="line">du -h   your_directory <span class="comment"># 列出每个子文件夹大小</span></span><br><span class="line">du -hcs your_directory <span class="comment"># 汇总</span></span><br></pre></td></tr></table></figure><h2 id="查看-package-版本"><a class="markdownIt-Anchor" href="#查看-package-版本"></a> 查看 package 版本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache show packagename</span><br></pre></td></tr></table></figure><h1 id="windwos-下的脚本"><a class="markdownIt-Anchor" href="#windwos-下的脚本"></a> Windwos 下的脚本</h1><p>windows 下显示环境变量</p><p><code>echo %http_proxy%</code></p><p>windows 下设置代理服务器</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow></mrow><annotation encoding="application/x-tex"></annotation></semantics></math></span><span class="katex-html" aria-hidden="true"></span></span></span></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=http://username:<span class="built_in">pwd</span>$$<span class="variable">$@proxy</span>-rzf:8080</span><br><span class="line"><span class="built_in">set</span> https_proxy=http://username:<span class="built_in">pwd</span>$$<span class="variable">$@proxy</span>-rzf:8080</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在线网站可以找到基本的东西：&lt;a href=&quot;https://man.linuxde.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Linux命令大全&lt;/a&gt;  &lt;a href=&quot;https://man.linuxde.net/docs/shell_regex.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;shell 正则表达式&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;文件内容检索&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#文件内容检索&quot;&gt;&lt;/a&gt; 文件&amp;amp;内容检索&lt;/h1&gt;
&lt;h2 id=&quot;正则表达式注意的地方&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#正则表达式注意的地方&quot;&gt;&lt;/a&gt; 正则表达式注意的地方&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;花括号之前要加转义字符 &lt;code&gt;[a-z]\{3\}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;空格就是转义加空格&lt;code&gt;\&lt;/code&gt;，而不是&lt;code&gt;\s&lt;/code&gt; 。如 &lt;code&gt;[a-z0-9_\ ]\{3,\}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;这几个符号 &lt;code&gt;_ - . #&lt;/code&gt;都不需要加转义符。&lt;/li&gt;
&lt;li&gt;不要轻易加&lt;mark&gt;行结束符&lt;/mark&gt;$，可能回车才是最后符号，所以可能找不到。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="IT" scheme="http://maiernte.github.io/wiki/categories/IT/"/>
    
      <category term="Tools" scheme="http://maiernte.github.io/wiki/categories/IT/Tools/"/>
    
    
      <category term="工具" scheme="http://maiernte.github.io/wiki/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hexo日常管理</title>
    <link href="http://maiernte.github.io/wiki/hexo-blog-alltag-verwalten.html"/>
    <id>http://maiernte.github.io/wiki/hexo-blog-alltag-verwalten.html</id>
    <published>2019-07-30T15:27:28.000Z</published>
    <updated>2019-08-02T03:54:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="复制md文件"><a class="markdownIt-Anchor" href="#复制md文件"></a> 复制MD文件</h1><script src="https://gist.github.com/maiernte/7d23ede58ddd69608bd7ee98b743e155.js"></script><h4 id="查找最新文件"><a class="markdownIt-Anchor" href="#查找最新文件"></a> 查找最新文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -t /Users/mai/Projects/hexo/<span class="built_in">source</span>/_posts/*.md | head -1 | xargs ls -l | awk <span class="string">'&#123;print  $6 "-" $7 "-" $8 &#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最旧的文件就应该是</span></span><br><span class="line">ls -t /Users/mai/Projects/hexo/<span class="built_in">source</span>/_posts/*.md | tail -1 | xargs ls -l | awk <span class="string">'&#123;print  $6 "-" $7 "-" $8 &#125;'</span></span><br></pre></td></tr></table></figure><h1 id="其它"><a class="markdownIt-Anchor" href="#其它"></a> 其它</h1><p>Hexo 代码折叠</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% fold 点击显/隐内容 %&#125;</span><br><span class="line">需要隐藏的内容。。。</span><br><span class="line">&#123;% endfold %&#125;</span><br></pre></td></tr></table></figure><h1 id="参考文件"><a class="markdownIt-Anchor" href="#参考文件"></a> 参考文件</h1><p><a href="helpfull-shell-command.html">有用的shell命令</a></p><h1 id="会导致编译奔溃的错误"><a class="markdownIt-Anchor" href="#会导致编译奔溃的错误"></a> 会导致编译奔溃的错误</h1><p>大括号和井号连在一起</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">#、 #&#125;、&#123;#&#125; 这三种情况都会导致系统奔溃</span></span><br><span class="line">&#123;&#125; 和 <span class="comment"># 之间如果有别的字符就不会。如 &#123; # &#125;</span></span><br><span class="line">或者放在代码段内也不会。行内代码不能避免这种情形。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;复制md文件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#复制md文件&quot;&gt;&lt;/a&gt; 复制MD文件&lt;/h1&gt;
&lt;script src=&quot;https://gist.github.com/maiernte/7d23ede58ddd69608
      
    
    </summary>
    
      <category term="常用文件" scheme="http://maiernte.github.io/wiki/categories/%E5%B8%B8%E7%94%A8%E6%96%87%E4%BB%B6/"/>
    
    
      <category term="Hexo" scheme="http://maiernte.github.io/wiki/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>佛偈集合</title>
    <link href="http://maiernte.github.io/wiki/budahlisisch-poeim-collection.html"/>
    <id>http://maiernte.github.io/wiki/budahlisisch-poeim-collection.html</id>
    <published>2019-07-29T07:10:50.000Z</published>
    <updated>2019-08-15T21:46:14.000Z</updated>
    
    <content type="html"><![CDATA[<center>佛偈（jì）</center><p><img src="https://raw.githubusercontent.com/maiernte/img/master/collection/tempel_3.jpg" alt></p><p>虚云老和尚悟道偈</p><p>杯子扑落地，响声明历历。<br>虚空粉碎也，狂心当下息。</p><p>烫着手，打碎杯，家破人亡语难开。<br>春到花香处处秀，山河大地是如来。</p><a id="more"></a><h6 id="布袋和尚"><a class="markdownIt-Anchor" href="#布袋和尚"></a> 布袋和尚</h6><p>手把青秧插满田，低头便见水中天。<br>心地清净方为道，退步原来是向前。</p><h6 id="赠药山高僧惟俨"><a class="markdownIt-Anchor" href="#赠药山高僧惟俨"></a> 赠药山高僧惟俨</h6><p>练得身形似鹤形，千株松下两函经。<br>我来问道无馀说，云在青天水在瓶。</p><p>——李翱</p><h6 id="牛头山法融禅师"><a class="markdownIt-Anchor" href="#牛头山法融禅师"></a> 牛头山法融禅师</h6><p>恰恰用心时，恰恰无心用。曲谭名相劳，直说无繁重。<br>无心恰恰用，常用恰恰无。今说无心处，不与有心殊。</p><p>——唐永徽年中</p><h6 id="天衣义怀禅师"><a class="markdownIt-Anchor" href="#天衣义怀禅师"></a> 天衣义怀禅师</h6><p>雁过长空，影沉寒底，雁无留影之心，影无遗踪之意。</p><blockquote><p>《菜根谭》中的一句古诗：“风来疏竹，风过而竹不留声；雁渡寒潭，雁过而潭不留影。</p><p>另一版本：竹影扫阶尘不动，雁过寒潭水无痕。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;佛偈（jì）&lt;/center&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/maiernte/img/master/collection/tempel_3.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;虚云老和尚悟道偈&lt;/p&gt;
&lt;p&gt;杯子扑落地，响声明历历。&lt;br&gt;
虚空粉碎也，狂心当下息。&lt;/p&gt;
&lt;p&gt;烫着手，打碎杯，家破人亡语难开。&lt;br&gt;
春到花香处处秀，山河大地是如来。&lt;/p&gt;
    
    </summary>
    
      <category term="摘录" scheme="http://maiernte.github.io/wiki/categories/%E6%91%98%E5%BD%95/"/>
    
      <category term="片段" scheme="http://maiernte.github.io/wiki/categories/%E6%91%98%E5%BD%95/%E7%89%87%E6%AE%B5/"/>
    
    
      <category term="文学" scheme="http://maiernte.github.io/wiki/tags/%E6%96%87%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>简短书摘</title>
    <link href="http://maiernte.github.io/wiki/brief-notions-collection.html"/>
    <id>http://maiernte.github.io/wiki/brief-notions-collection.html</id>
    <published>2019-07-29T07:00:50.000Z</published>
    <updated>2019-07-31T03:51:35.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="癌症"><a class="markdownIt-Anchor" href="#癌症"></a> 癌症</h6><p>“以我个人有限的接触癌症的经历总结，似乎越是传统意义上的“好人”越是容易生癌。这些人往往脾气很好，性格内向，照顾周围，万事替别人考虑，总是在乎别人眼里的自己，总是担心一些可能发生的小概率负面事件。”</p><p>—— 冯唐. “无所畏【冯唐2018全新作品，一部坦露自我的真诚之作！】。”</p><a id="more"></a><h6 id="暗算"><a class="markdownIt-Anchor" href="#暗算"></a> 暗算</h6><p>金风未动蝉先觉，暗算无常死不知。<br>青山只会明今古，绿水何曾洗是非?</p><h6 id="五个人生思维"><a class="markdownIt-Anchor" href="#五个人生思维"></a> 五个人生思维</h6><ul><li>能把问题清楚的写下来，就是解决了问题的一半。发现问题比解决问题更重要。</li><li>墨菲定律：如果事情有变坏的可能，那它就一定会发生。</li><li>吉伯特法则：真正的危险是没有人告诉你有危险。「人在事中迷，就怕没人提」。</li><li>福克兰定律：当你不知道如何行动时，最好的行动就是不要行动，最好的决策就是没有决策。</li><li>费斯诺定律：人有两只耳朵，却只有一张嘴巴。就是说，人应该多听少讲。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;癌症&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#癌症&quot;&gt;&lt;/a&gt; 癌症&lt;/h6&gt;
&lt;p&gt;“以我个人有限的接触癌症的经历总结，似乎越是传统意义上的“好人”越是容易生癌。这些人往往脾气很好，性格内向，照顾周围，万事替别人考虑，总是在乎别人眼里的自己，总是担心一些可能发生的小概率负面事件。”&lt;/p&gt;
&lt;p&gt;—— 冯唐. “无所畏【冯唐2018全新作品，一部坦露自我的真诚之作！】。”&lt;/p&gt;
    
    </summary>
    
      <category term="摘录" scheme="http://maiernte.github.io/wiki/categories/%E6%91%98%E5%BD%95/"/>
    
      <category term="片段" scheme="http://maiernte.github.io/wiki/categories/%E6%91%98%E5%BD%95/%E7%89%87%E6%AE%B5/"/>
    
    
      <category term="文学" scheme="http://maiernte.github.io/wiki/tags/%E6%96%87%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>零散句子</title>
    <link href="http://maiernte.github.io/wiki/funny-sloga-collection.html"/>
    <id>http://maiernte.github.io/wiki/funny-sloga-collection.html</id>
    <published>2019-07-29T06:50:50.000Z</published>
    <updated>2019-08-04T18:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="幸福的路有两条"><a class="markdownIt-Anchor" href="#幸福的路有两条"></a> 幸福的路有两条</h6><p>中岛美雪写的歌《幸福》（任贤齐翻唱的伤心太平洋）：到幸福的路有两条，一条是所有愿望都成真，另外一条是把愿望这东西扔掉。</p><a id="more"></a><h6 id="matrix"><a class="markdownIt-Anchor" href="#matrix"></a> Matrix</h6><blockquote><p>Cypher: You know, I know this steak doesn’t exist. I know that when I put it in my mounth, the Matrix is telling my brain that it is … juicy and delicious. After nine years, you know what I realize? en … Ignorance is bliss</p></blockquote><h6 id="几个顺口溜"><a class="markdownIt-Anchor" href="#几个顺口溜"></a> 几个顺口溜</h6><ul><li>认认真真说假话，扎扎实实走过场。</li><li>失败乃成功之母——失败生了100个孩子，其中一个叫「成功」，其它99个还叫「失败」。</li><li>“人类一思考，上帝就发笑。” —— “你一说要学什么东西，人们就发笑。”</li><li>晚上想想千条路，早上起来走原路。（有个共同特点：不困难、不痛苦）</li><li>暂时的失败要比暂时的成功要好得多。</li><li>别让「半途而废」 成为你唯一坚持下来的事情。</li><li>世上没有听一遍就管用的道理。</li><li>（你的脑袋）不要做别人思想的跑马场。</li><li>路是自己走的，脚上的泡也是自己好的。</li><li>忍一时越想越气，退一步越想越亏。（总是忍的人，从来都不开心。总是退让的人，却从来没有真的海阔天空）</li><li>遇到烂事不纠结，遇到烂人不纠缠。</li><li>每个人都想努力做，却总是做不好。</li><li>曹操评袁绍：「色厉胆薄，好谋无断，干大事而惜身，见小利而忘命。」</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;幸福的路有两条&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#幸福的路有两条&quot;&gt;&lt;/a&gt; 幸福的路有两条&lt;/h6&gt;
&lt;p&gt;中岛美雪写的歌《幸福》（任贤齐翻唱的伤心太平洋）：到幸福的路有两条，一条是所有愿望都成真，另外一条是把愿望这东西扔掉。&lt;/p&gt;
    
    </summary>
    
      <category term="摘录" scheme="http://maiernte.github.io/wiki/categories/%E6%91%98%E5%BD%95/"/>
    
      <category term="片段" scheme="http://maiernte.github.io/wiki/categories/%E6%91%98%E5%BD%95/%E7%89%87%E6%AE%B5/"/>
    
    
      <category term="文学" scheme="http://maiernte.github.io/wiki/tags/%E6%96%87%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>典故</title>
    <link href="http://maiernte.github.io/wiki/old-stories-collection.html"/>
    <id>http://maiernte.github.io/wiki/old-stories-collection.html</id>
    <published>2019-07-29T06:45:50.000Z</published>
    <updated>2019-07-31T03:51:35.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="豫让刺赵简子"><a class="markdownIt-Anchor" href="#豫让刺赵简子"></a> 豫让刺赵简子</h6><p>晋毕阳之孙豫让，始事范、中行氏而不说，去而就知伯，知伯宠之。及三晋分知氏，赵襄子最恐知伯，而将其头以为饮器。豫让遁逃山中曰：“磋乎！士为知己者死，女为悦己者容。吾其报知氏之仇矣。”</p><a id="more"></a><p>乃变姓名，为刑人，入宫涂厕，欲以刺襄子。 襄子如厕，心动，执问涂者，则豫让也。 刃其曰：“欲为知伯报仇！”左右欲杀之。 赵襄子曰：“彼义士也，吾谨避之耳。且知伯已死，无后，而其臣至为报仇，此天下之贤人也。”卒释之。 豫让又漆身为厉，灭须去眉，自刑以变其容，为乞人而往乞，其妻不识，曰：“状貌不似吾夫，其音何类吾夫之甚也。”又吞炭为哑，变其音。 其友谓之曰：“子之道甚难而无功，谓子有志，则然矣，谓子知，则否。以子之才，而善事襄子，襄子必近幸子；子之得近而行所欲，此甚易而功必成。”豫让乃笑而应之曰：“是为先知报后知，为故君贼新君，大乱君臣之义者无此矣。凡吾所谓为此者，以明君臣之义，非从易也。且夫委质而事人，而求弑之，是怀二心以事君也。吾所为难，亦将以愧天下后世人臣怀二心者。”</p><p>居顷之，襄子当出，豫让伏所当过桥下。 襄子至桥而马惊。 襄子曰：“此必豫让也。”使人问之，果豫让。 于是赵襄子面数豫让曰：“子不尝事范中行氏乎?知伯灭范中行氏，而子不为报仇，反委质事知伯。知伯已死，子独何为报仇之深也?”豫让曰：“臣事范中行氏，范中行氏以众人遇臣，臣故众人报之；知伯以国士遇臣，臣故国士报之。”襄子乃喟然叹泣曰：“嗟乎，豫子！豫子之为知伯，名既成矣，寡人舍子，亦以足矣。子自为计，寡人不舍子。”使兵环之。 豫让曰：“臣闻明主不掩人之义，忠臣不爱死以成名。君前已宽舍臣，天下莫不称君之贤。今日之事，臣故伏诛，然愿请君之衣而击之，虽死不恨。非所望也，敢布腹心。”于是襄子义之，乃使使者持衣与豫让。 豫让拔剑三跃，呼天击之曰：“而可以报知伯矣。”遂伏剑而死。 死之日，赵国之士闻之，皆为涕泣。</p><p>—— 《战国策》</p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;豫让刺赵简子&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#豫让刺赵简子&quot;&gt;&lt;/a&gt; 豫让刺赵简子&lt;/h6&gt;
&lt;p&gt;晋毕阳之孙豫让，始事范、中行氏而不说，去而就知伯，知伯宠之。及三晋分知氏，赵襄子最恐知伯，而将其头以为饮器。豫让遁逃山中曰：“磋乎！士为知己者死，女为悦己者容。吾其报知氏之仇矣。”&lt;/p&gt;
    
    </summary>
    
      <category term="摘录" scheme="http://maiernte.github.io/wiki/categories/%E6%91%98%E5%BD%95/"/>
    
    
      <category term="历史政治" scheme="http://maiernte.github.io/wiki/tags/%E5%8E%86%E5%8F%B2%E6%94%BF%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>缠中说禅</title>
    <link href="http://maiernte.github.io/wiki/funny-things-collection.html"/>
    <id>http://maiernte.github.io/wiki/funny-things-collection.html</id>
    <published>2019-07-29T06:40:50.000Z</published>
    <updated>2019-07-31T03:51:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h5 id="诗词"><a class="markdownIt-Anchor" href="#诗词"></a> 诗词</h5><h6 id="满江红"><a class="markdownIt-Anchor" href="#满江红"></a> 满江红</h6><p>万古长空，今犹昔，一朝风月。何处住？<br>春花夏雨，秋鸿冬雪。<br>百代浮华皆作土，千江吸尽无堪说。<br>问世间，多少梦消磨、英雄血。<br>星旋轨，天补裂，山崩柱，河倾缺。<br>捣神宫鬼府，凤巢龙穴。<br>怒剑穿云惊浩宇，狂涛卷日横孤筏。<br>纵生死，劫火洗乾坤，齐欢悦。</p><h6 id="临江仙"><a class="markdownIt-Anchor" href="#临江仙"></a> 临江仙</h6><p>浊水倾波三万里，愀然独坐孤峰。<br>龙潜狮睡侯飙风。<br>无情皆竖子，有泪亦英雄。<br>长剑倚天星斗烂，古今过眼成空。<br>乾坤俯仰任穷痛。<br>半轮沧海上，一苇大江东。</p><h6 id="卜算子"><a class="markdownIt-Anchor" href="#卜算子"></a> 卜算子</h6><p>本是后山人，偶做堂前客。<br>醉舞经阁半卷书，坐井说天阔。<br>大志戏功名，海斗量祸福。<br>论到囊中羞涩时，怒指乾坤错。</p><p>—— 丁元英</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h5 id=&quot;诗词&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#诗词&quot;&gt;&lt;/a&gt; 诗词&lt;/h5&gt;
&lt;h6 id=&quot;满江红&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#满江红&quot;&gt;&lt;/a&gt; 满江红
      
    
    </summary>
    
      <category term="摘录" scheme="http://maiernte.github.io/wiki/categories/%E6%91%98%E5%BD%95/"/>
    
      <category term="片段" scheme="http://maiernte.github.io/wiki/categories/%E6%91%98%E5%BD%95/%E7%89%87%E6%AE%B5/"/>
    
    
      <category term="文学" scheme="http://maiernte.github.io/wiki/tags/%E6%96%87%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>名人语录</title>
    <link href="http://maiernte.github.io/wiki/prominaent-slogen-collection.html"/>
    <id>http://maiernte.github.io/wiki/prominaent-slogen-collection.html</id>
    <published>2019-07-29T06:40:50.000Z</published>
    <updated>2019-07-31T03:51:35.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="祈祷文"><a class="markdownIt-Anchor" href="#祈祷文"></a> 祈祷文</h6><ul><li>上帝，请赐予我平静让我可以接受我所不能改变的，赐予我勇气让我可以改变我能够改变的，赐予我智慧以分辨这二者的不同。</li><li>God grand me the serenity to accept the things I cannot change, Courage to change the things I can, and wisdom to know the difference.</li></ul><h6 id="尼采"><a class="markdownIt-Anchor" href="#尼采"></a> 尼采</h6><p>He who has a strong enough why can bear almost any how. – Friedrich Nietzsche</p><h6 id="苏格拉底"><a class="markdownIt-Anchor" href="#苏格拉底"></a> 苏格拉底</h6><p>Beware the barrenness of a busy life. – Socrates</p><h6 id="亚里士多德"><a class="markdownIt-Anchor" href="#亚里士多德"></a> 亚里士多德</h6><p>We are what we repeatedly do. Excellence, then, is not an act, but a habit. – Aristotle</p><h6 id="维克多-弗兰克"><a class="markdownIt-Anchor" href="#维克多-弗兰克"></a> 维克多 弗兰克</h6><p>人所拥有的任何东西都可以被剥夺，唯独人性最后的自由——也就是在任何境遇中选择一己态度和生活方式的自由——不能被剥夺。</p><h6 id="马克吐温"><a class="markdownIt-Anchor" href="#马克吐温"></a> 马克吐温</h6><p>让你陷入困境的并不是这个世界；真正让你陷入困境的，是这个世界最终并非你所想象。</p><h6 id="赛斯"><a class="markdownIt-Anchor" href="#赛斯"></a> 赛斯</h6><p>每一个心愿都预设了对于一个缺憾的承认，每一个挑战也预设了有一个要征服的阻碍。</p><h6 id="叔本华"><a class="markdownIt-Anchor" href="#叔本华"></a> 叔本华</h6><p>痛苦和无聊是人类幸福的两个死敌。欲望不满足就痛苦，满足就无聊。人生如同钟摆在痛苦和无聊两个极点之间摆动。离开一个极点就意味着正在走向另一个极点。</p><h6 id="谚语"><a class="markdownIt-Anchor" href="#谚语"></a> 谚语</h6><p>Don’t shoot the messenger.<br>英文有句谚语叫“不要枪毙信使”。枪毙信使并不能改变坏消息。</p><h6 id="曾国藩"><a class="markdownIt-Anchor" href="#曾国藩"></a> 曾国藩</h6><ul><li>既往不恋，当下不染， 未来不迎。天涯：染，不被当下的情绪感染。要跳出情绪来观察当下。</li><li>倚天照海花无数， 流水高山心自知。</li><li>久利之事勿为，众争之地勿往。</li><li>勿以小恶弃人大美， 勿以小怨忘人大恩。</li></ul><h6 id="宗棠"><a class="markdownIt-Anchor" href="#宗棠"></a> 宗棠</h6><p>人生最不幸處，是偶一失言而禍不及，偶一失謀而事倖成，偶一恣行而獲小利， 後乃視為故常，而恬不為意。則莫大之患，由此生矣。</p><h6 id="俞敏洪"><a class="markdownIt-Anchor" href="#俞敏洪"></a> 俞敏洪</h6><p>优秀是一种习惯。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;祈祷文&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#祈祷文&quot;&gt;&lt;/a&gt; 祈祷文&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;上帝，请赐予我平静让我可以接受我所不能改变的，赐予我勇气让我可以改变我能够改变的，赐予我智慧以分辨这二者的不同。&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="摘录" scheme="http://maiernte.github.io/wiki/categories/%E6%91%98%E5%BD%95/"/>
    
      <category term="片段" scheme="http://maiernte.github.io/wiki/categories/%E6%91%98%E5%BD%95/%E7%89%87%E6%AE%B5/"/>
    
    
      <category term="文学" scheme="http://maiernte.github.io/wiki/tags/%E6%96%87%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>搞笑段子</title>
    <link href="http://maiernte.github.io/wiki/funny-things-collection.html"/>
    <id>http://maiernte.github.io/wiki/funny-things-collection.html</id>
    <published>2019-07-29T06:40:50.000Z</published>
    <updated>2019-07-31T03:51:35.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="慢慢就习惯了"><a class="markdownIt-Anchor" href="#慢慢就习惯了"></a> 慢慢就习惯了</h6><p>某人四十多岁了还碌碌无为，于是跑去找算命先生。算命先生掐指一算，然后问：“一个好消息，一个坏消息，你先听哪个？”哥们说：“那就先听坏的吧”。算命先生说：“坏消息是，你四十岁之前穷困潦倒……”那哥们眉头一挑，问：“那好消息呢？”算命先生幽幽的说到：“四十岁以后，你就习惯了。”</p><a id="more"></a><h6 id="身体就像一辆车子"><a class="markdownIt-Anchor" href="#身体就像一辆车子"></a> 身体就像一辆车子</h6><p>身体就像一辆车子，还新的时候，遇到问题花点钱修理一下，就又能风驰电掣。车子越旧，修理费越高。旧到不行了，修理费比换辆新的还贵，还修个啥劲？你「身体」这家企业，当对它的投入远大于产出的时候，上帝都要考虑撤资了，你还拼命追加投资？</p><h6 id="凌凌漆"><a class="markdownIt-Anchor" href="#凌凌漆"></a> 凌凌漆</h6><p>外景：深圳某一市场猪肉摊前。<br>某女甲：你以为你匿喺度就揾唔到你咩？ 冇用架！ 你啲咁出色嘅难忍（男人），无论喺边度，都好似漆黑中嘅萤火虫一样，咁鲜明，咁出众。 你忧郁嘅眼神，唏嘘嘅须根，神乎其技嘅刀法，同埋嗰杯Dry Martine，都彻底噉将你出卖咗。 不过，你虽然系咁出色，始终行有行规，无论典（点）你都要找埋寻晚嗰条过夜数，叫鸡唔使畀钱呀？<br>凌凌漆：我重估我哋嘅交往系建筑喺感情之上，估唔到，原来都系一盘生意。<br>某女甲：讲感情都要畀钱架。<br>凌凌漆：明白嘅，有一早畀咗你啦。 但系近排兴食斋，冇乜人帮衬，不如噉啦，攞篘猪肉返去顶住数先啦。 嚟吖，粗粗地，唔该。<br>某女甲：你好嘢，山水有山逢。 （某女甲提猪肉转身走。）<br>凌凌漆：<br>有兴趣嘅不如今天再相逢啦。<br>（某女甲把猪肉投向凌凌漆）<br>凌凌漆（用刀接住猪肉）：悭番。 （顺势将猪肉切成两半，挂喺猪肉钩上）<br>某女乙：咩话？ 个衰佬唔肯畀钱？ 我帮你拖马喐佢！<br>某女甲：算啦，话到尾，佢始终都系一个独一无二、风度翩翩嘅猪肉佬。<br>（阿漆依着猪肉摊，品着白兰地。）</p><h6 id="情人节广告"><a class="markdownIt-Anchor" href="#情人节广告"></a> 情人节广告</h6><p>14号晚报名打麻将，只报不打，报名费100元，报完名爱干嘛干嘛，爱去哪去哪，爱跟谁跟谁。本人承诺：保证任何人问你的行踪都可以证明你跟我一起打麻将了，你所有报不了的花费都可以说成是被我赢了，具体时间为2月14日17点至凌晨2点，时间地点任选。额外业务：如支付200元，还提供大牌合照以及朋友圈回复业务，做戏做全套！小本经营，童叟无欺！有意者私聊。</p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;慢慢就习惯了&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#慢慢就习惯了&quot;&gt;&lt;/a&gt; 慢慢就习惯了&lt;/h6&gt;
&lt;p&gt;某人四十多岁了还碌碌无为，于是跑去找算命先生。算命先生掐指一算，然后问：“一个好消息，一个坏消息，你先听哪个？”哥们说：“那就先听坏的吧”。算命先生说：“坏消息是，你四十岁之前穷困潦倒……”那哥们眉头一挑，问：“那好消息呢？”算命先生幽幽的说到：“四十岁以后，你就习惯了。”&lt;/p&gt;
    
    </summary>
    
      <category term="摘录" scheme="http://maiernte.github.io/wiki/categories/%E6%91%98%E5%BD%95/"/>
    
      <category term="娱乐" scheme="http://maiernte.github.io/wiki/categories/%E6%91%98%E5%BD%95/%E5%A8%B1%E4%B9%90/"/>
    
    
      <category term="娱乐" scheme="http://maiernte.github.io/wiki/tags/%E5%A8%B1%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>如何系统化管理Hexo博客</title>
    <link href="http://maiernte.github.io/wiki/how-to-manage-big-hexo-blog.html"/>
    <id>http://maiernte.github.io/wiki/how-to-manage-big-hexo-blog.html</id>
    <published>2019-07-28T19:30:00.000Z</published>
    <updated>2019-08-15T21:51:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建立博客的初衷"><a class="markdownIt-Anchor" href="#建立博客的初衷"></a> 建立博客的初衷</h1><p>虽说这篇笔记的题目是「如何管理」，为了更好的回答这个问题，必须要回到最原始问题上来——我为何要建一个博客，而且是费那么大劲。而我的初衷是建立和维护一个属于自己的「知识库」。通常来说，为了达成这个目的，更好的选择是笔记APP，而不是博客。我确实也是这么做的。一开始用印象笔记，因为它死活不支持多级目录，我又转到国内的为知笔记，做了五年的VIP用户。但它五年来似乎从没改进过。随着近年来有道云异军突起，以及IOS生态圈中琳琅满目的APP，如熊掌记、Notion、谷歌的Keep、阿里的语雀。。。。。。各有各的惊艳，各有各的槽点。</p><p>随着国外的Github和国内的Coding等公司，相继开放永久免费、不限流量的静态网页托管平台，如Github Pages。我走上了自建Bolg的不归路。当然不是说，搭博客这条路完全没有槽点。而是——自己造的孽，含着泪也会继续造下去。至少它满足了我以下几点「必不可少」的要求：</p><ul><li>[x] 多级目录</li><li>[x] 支持Markdown文本</li><li>[x] 支持分类、标签、以及站内全文检索</li><li>[x] 没有IOS、Windows、Android等平台限制</li></ul><p>说白了，我是利用Github提供的免费平台，把Blog当笔记本来用。最后选了Hexo，简单易用、界面绚丽、插件丰富。除开自用的「知识平台」功能以外，偶尔还能发发博文装大尾巴狼，也是蛮不错的感觉。</p><p>网上介绍怎么搭建Hexo以及添加绚丽功能的帖子海了去了，但我基本没有发现分享「如何管理」的。因为绝大多数这些博主，搭建Hexo只是用来玩一阵子。回头有更新更好玩的东西，就跑去玩别的了。极少数有博客，站内文章超过50篇的。所以，对他们来说，根本不存在——管理——这个议题。</p><p>虽然Hexo在逻辑上支持<code>分类</code>和<code>标签</code>，但物理上它把所有的Post都放到一个单一的目录下面。而我是打算把它当作知识库，长期、密集使用的。可预见的将来，站内笔记会非常多。不但写新贴，还可能经常更改旧贴。那势必会带来一个问题：如何管理数量少日益膨胀的笔记？</p><h1 id="解决思路"><a class="markdownIt-Anchor" href="#解决思路"></a> 解决思路</h1><p>我能想到的办法很简单，也很传统。就是不但逻辑分类，而且也必须物理上分目录存放。理论上在自己的PC分目录保存就好了。但我有好几台电脑，单位一台、自己Windows一台、Mac一台，还有平板。为了让能在不同的电脑上能随时修改、添加笔记，必须放在托管在云端。</p><h2 id="硬件"><a class="markdownIt-Anchor" href="#硬件"></a> 硬件</h2><p>没有必要租用传统的VPS，太贵了，而且连10%的运算能力都用不上。用共享的Web Hosting就完全能解决需求。比如百度云，或者Azure的Web App。而我是租用 1&amp;1 公司的Web Hosting，每个月 1€</p><ul><li>1 CPU</li><li>500M 内存</li><li>20G SSD</li></ul><p>就算那么低的运算能力，平时我的网站也用不到25%的运算能力。应付起啦，绰绰有余。</p><h2 id="软件"><a class="markdownIt-Anchor" href="#软件"></a> 软件</h2><p>我采用了<code>MM-Wiki</code> 管理平台（以下简称维基平台）。这是一个非常优秀的开源项目，具体请参看<a href="https://github.com/phachon/mm-wiki" target="_blank" rel="noopener">作者的文档</a>。部署超级简单，可以说一键部署，然后就可以用起啦了。简单来说这个平台有以下几个特点：</p><ul><li>[x] 支持空间管理、空间内支持多级目录。</li><li>[x] 支持Markdown编辑。</li><li>[x] 支持附件。</li><li>[x] 有修改记录。</li><li>[ ] 不支持内容搜索，只支持笔记的题目搜索。</li><li>[ ] 标签只支持到空间级别，目录和笔记都没有标签。</li></ul><p>但它跟Hexo博客搭配使用，就完全满足我的需求了。其实Hexo博客中，有个仿维基的Wikitten主题，跟<code>MM-Wiki</code>项目非常像。但毕竟不是所有内容，都适合摆在公开的地方。以<code>MM-Wiki</code> 作为私用平台，增加了私隐保护。</p><p>我的做法是，在维基平台中开辟一个独立的空间，用来存放博客上所有的源文件。而在Github Pages上托管的静态网站其实都是HTML文件。所有的改动，都必须在源Markdownn文件上修改，然后再推送到博客网站的。</p><p>在维基平台修改、添加、删除笔记的源文件。然后复制到Hexo的项目目录，编译后推送到Github Pages站点。维基百科内置的在线版<code>Editor.md</code>编辑器，非常美观实用。基本上我都不太需要在自己的电脑上用Typora等编辑器写MD文本了。思路有了，实现起来还是有一点问题。</p><h1 id="难点的解决办法"><a class="markdownIt-Anchor" href="#难点的解决办法"></a> 难点的解决办法</h1><p>首先，在维基平台内，MD文件是分目录存储的。这个目录不能直接拷贝到Hexo的<code>_post</code>目录。懒得每修改一个，或者添加一个笔记，就立马拷贝到博客中去。解决笔记复制的问题。</p><p>其次，笔记的物理保存目录，<strong>必须</strong>跟Hexo上的「分类」是一一对应的。否则，管理起来会很麻烦。在维基平台移动了笔记的保存目录后，在一一修改内容，也是很吃力的事情。</p><h2 id="笔记复制的解决办法"><a class="markdownIt-Anchor" href="#笔记复制的解决办法"></a> 笔记复制的解决办法</h2><p>说来也超级简单，一个脚本命令就够了。先用<code>find</code>命令在指定目录找出所有的MD文件，然后通过管道传给复制命令<code>cp</code>，搞定！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find  /root/bibliothek/markdowns/博客草稿/  -<span class="built_in">type</span> f -name <span class="string">"*.md"</span> -<span class="built_in">exec</span> cp &#123;&#125; /home/_post/ \;</span><br></pre></td></tr></table></figure><p>然后<code>hexo d -g</code>编译、发布，结束！</p><h2 id="管理笔记的分类"><a class="markdownIt-Anchor" href="#管理笔记的分类"></a> 管理笔记的分类</h2><p>这个问题有一点麻烦。因为必须打开每一个文件，读取笔记的头文件描述，然后再比较跟文件的物理位置是否符合。我尝试用shell脚本解决这难题。无奈我的的shell脚本功底是在很差，搞半天未果就放弃了。<a href="http://xn--Java-875hh09gm5p.NET" target="_blank" rel="noopener">用Java或者.NET</a> Core啥的，正儿八经写一个Console程序，也不是不行。但有种杀鸡用牛刀的感觉。</p><p>最后想到了用Javascript。因为编译Hexo是需要安装Node.js的，写一段JavaScript，让Node跑起来。通往罗马的道路千万条，选一条自己最熟悉的就完了。</p><div><div class="fold_hider"><div class="close hider_title">点击查看代码</div></div><div class="fold"><script src="https://gist.github.com/maiernte/d2cdf04780b575fe9705204b6f0fbef8.js"></script></div></div><blockquote><p>上面这个脚本使用的都是我个人设置，你如果要用的话需要改成自己实际文件目录。</p></blockquote><p><img src="https://github.com/maiernte/img/raw/master/fun/%E7%BB%99%E5%8A%9B.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;h1&gt;管理？&lt;/h1&gt;&lt;/center&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/maiernte/img/raw/master/fun/what.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="IT" scheme="http://maiernte.github.io/wiki/categories/IT/"/>
    
      <category term="Web" scheme="http://maiernte.github.io/wiki/categories/IT/Web/"/>
    
    
      <category term="Hexo" scheme="http://maiernte.github.io/wiki/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>《驴得水》——影评</title>
    <link href="http://maiernte.github.io/wiki/lvdeshui-film.html"/>
    <id>http://maiernte.github.io/wiki/lvdeshui-film.html</id>
    <published>2019-07-28T13:17:19.000Z</published>
    <updated>2019-08-15T21:48:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>追求自由的人，疯了，死了。<br>不愿低头的人，成了听话的牲口。<br>宽容大度的人，成了唯利是图的小人。<br>淳朴憨厚的人，成了狡诈的恶棍。<br>正面积极的人，用谎言掩盖真相。</p></blockquote><p>你觉得这是电影吗？其实，这是现实。我们先来看一下电影故事讲的是什么：</p><p>一群怀揣伟大梦想的人，却敌不过山区缺水的现实，养了一头驴拉水。上头却不给养驴费，于是就把驴谎报成老师。上头来检查，不能因为一头驴毁了梦想啊。于是为了捍卫梦想的道路，却失去了梦想的意义。《驴得水》的海报上说，“讲个笑话，你可别哭啊”。 就像另一句笑话讲的那样， “小的时候我想拯救世界，长大后却发现世界都拯救不了我”。</p><p>好笑，但却想哭。</p><p>谁TM还没点梦想啊。但有时梦想很脆弱，甚至敌不过一碗炸酱面。你想让自己闪闪发光，但总得先养活自己，饿着肚子的人怎么去谈梦想？这也是很多刚毕业不久的人，所要面对的最为矛盾的情况。“我有很多想法，有很多想做的事。但我现在没钱、没人脉、没背景，甚至还没长相。想要出去闯一片天地， 但还要为一日三餐和落脚地打拼。梦想是高潮，现实却是性冷淡。还能怎么办呢？先养活自己再说吧”。于是，你找了一份莫名其妙的工作，你一日三餐是不愁了，你做着日复一日重复的工作，但是你不敢停，你越来越迷茫，越来越看不清生活的方向。</p><p>你害怕那种怀揣梦想，但却又碌碌无为的日子，但你却不知道从哪里开始改变。于是你只能在焦虑中慢慢对现实妥协，然后你变成了自己曾经最讨厌的那种人。冷漠、没有激情、不思进取、浑浑噩噩，就像影片中的人物一样。曾经那些他们坚信的东西在面对现实时，都变得不堪一击。铁男说，“我没有办法啊，你知道子弹从脸上呼啸而过的感觉吗”？像不像我们经常说的，“我没办法啊，现实就是这样”。</p><p>是啊，现实就是这样！作为芸芸众生，普通屁民，谁TM还没被现实强奸过啊。但想要活得更好，重要的不是治愈，而是带着病痛活下去。而且我们要清醒的认识到一个事实，有时我们之所以像傻逼一样努力，不是为了改变世界，而是为了不让世界改变我们。或许，这才是我们对这个世界最大的善意。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/maiernte/img/raw/master/collection/%E9%A9%B4%E5%BE%97%E6%B0%B4%E5%89%A7%E7%85%A7.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="摘录" scheme="http://maiernte.github.io/wiki/categories/%E6%91%98%E5%BD%95/"/>
    
    
      <category term="影视" scheme="http://maiernte.github.io/wiki/tags/%E5%BD%B1%E8%A7%86/"/>
    
  </entry>
  
  <entry>
    <title>编辑器工具使用技巧汇总</title>
    <link href="http://maiernte.github.io/wiki/Editor-Skills-Summary.html"/>
    <id>http://maiernte.github.io/wiki/Editor-Skills-Summary.html</id>
    <published>2019-07-27T06:24:33.000Z</published>
    <updated>2019-09-01T17:11:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vscode"><a class="markdownIt-Anchor" href="#vscode"></a> VSCode</h1><ol><li>Wechseln zwischen Text-Editor und Terminal<ol><li><code>Command+K+S</code> oder in Menü <code>Code-&gt;Pereferenc-&gt;Hotky</code>, öffnet Hot-Key Editor Fenster.</li><li>Tip <code>terminal</code> in Suchfeld, findet die Binding `^``, löscht diese Einstellung.</li><li>Sucht den “workbench.action.terminal.focus”, bindet es mit Key <code>⌃&lt;</code>.</li><li>Sucht den “workbench.action.focusActiveEditorGroup”, bindet es wiederum mit Schlüssel <code>⌃&lt;</code>, und Wenn-Kondition “terminalFocus”.</li></ol></li></ol><a id="more"></a><h1 id="typora"><a class="markdownIt-Anchor" href="#typora"></a> Typora</h1><p>更多更详细的内容请参阅 Typora Wiki</p><p><a href="http://support.typora.io/" target="_blank" rel="noopener">Typora Wiki</a>  (<a href="https://github.com/typora/wiki-website" target="_blank" rel="noopener">wiki-website Project</a>)</p><h2 id="个性化快捷键"><a class="markdownIt-Anchor" href="#个性化快捷键"></a> 个性化快捷键</h2><p><strong>Windows</strong></p><p><em>文件—&gt;偏好设置—&gt;往高级设置</em> ，点击看到两个<code>json</code>格式的文件，打开第二个（<strong>conf.user.json</strong>）, 用记事本打开，第17行<code>keyBinding</code>,在大括号中写 <code>代码块</code>：“你要设置的快捷键”，比如我的是<strong>代码块</strong>:<code>Ctrl+Alt+P</code>,保存文件，重启<code>typora</code>即可生效。<a href="https://github.com/itcastWsy/typora_copy_images" target="_blank" rel="noopener">更详细介绍</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Custom key binding, which will override the default ones.</span><br><span class="line">  "keyBinding": &#123;</span><br><span class="line">    // for example: </span><br><span class="line">    // "Always on Top": "Ctrl+Shift+P"</span><br><span class="line">    "注释":"Ctrl+Alt+/",</span><br><span class="line">    "代码块":"Ctrl+Alt+P",</span><br><span class="line">    "打开文件夹…":"Ctrl+Alt+O"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><strong>Mac</strong></p><p><a href="http://support.typora.io/Shortcut-Keys/#macos" target="_blank" rel="noopener">官方说明</a></p><p>需要到<code>系统偏好设置—&gt;键盘--&gt;快捷键--&gt;应用快捷键</code>那边设置。找到 <em><strong>Typora.App</strong></em>，菜单名称填 <em><strong>代码</strong></em>，然后输入希望的快捷键。我的设置是***⌃+⌘+C***。</p><h2 id="更改风格"><a class="markdownIt-Anchor" href="#更改风格"></a> 更改风格</h2><p><a href="https://github.com/typora/typora-theme-toolkit" target="_blank" rel="noopener">开发好的工具</a>  <a href="https://pjchender.github.io/2018/04/24/note-%E5%A6%82%E4%BD%95%E7%82%BA-typora-%E6%92%B0%E5%AF%AB%E5%AE%A2%E8%A3%BD%E5%8C%96%E6%A8%A3%E5%BC%8F/" target="_blank" rel="noopener">如何客制化格式</a></p><p>简单使用：添加 <code>base.user.css</code> 文件，并改变行内代码的颜色，以及公式颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 行内代码</span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: red</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 行内公式</span><br><span class="line"><span class="selector-class">.MathJax_SVG</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: DarkBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Typora的代码使用 <a href="https://codemirror.net/" target="_blank" rel="noopener">CodeMirror</a> 项目，尝试了一下修改 <code>base.user.css</code> 文件确实可以改变代码段的高度，并带滚动。但同时也限定了进行代码编辑时的整个窗口高度。所以没有用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 缺点：打开源代码模式的时候，整个页面也被限制成了只有300<span class="selector-tag">px</span>高</span><br><span class="line"><span class="selector-class">.CodeMirror</span> &#123;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.CodeMirror-scroll</span> &#123;</span><br><span class="line">    <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">  <span class="attribute">overflow-x</span>: auto;</span><br><span class="line"><span class="attribute">max-height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到书写模式的时候，整个编辑器都被包裹在 <code>&lt;div id=&quot;write&quot;&gt; &lt;/div&gt;</code> 里面。在源代码模式的时候，没有这个 <code>write</code> 元素的包裹，而整个源代码窗口都被作用为一个 <code>CodeMirror</code> 元素对待。因此，作一些改变就能满足要求</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#write</span> <span class="selector-class">.CodeMirror</span> &#123;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">350px</span>;</span><br><span class="line">&#125;</span><br><span class="line"># 设定上下 <span class="attribute">padding</span> 会让滚动条在小代码区消失</span><br><span class="line"><span class="selector-id">#write</span> <span class="selector-class">.CodeMirror-scroll</span> &#123;</span><br><span class="line">    <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">  <span class="attribute">overflow-x</span>: auto;</span><br><span class="line"><span class="attribute">max-height</span>: <span class="number">330px</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 避免只有一行的代码区，因为会显示滚动条，不好看。一行代码就用行内代码好了。</span><br></pre></td></tr></table></figure><p>如果要限制来自 <code>GistHub</code> 的代码高度，只能限定其父元素 <code>iframe</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">iframe</span> &#123;</span><br><span class="line"><span class="attribute">max-height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Windows版的 Typora 的数学模块保存在 <code>path/resource/app/lib.asar</code> 压缩文件中。需要用asar解压</p><p><a href="https://newsn.net/say/electron-asar-explorer.html" target="_blank" rel="noopener">如何查看 asar 内部结构</a></p><p><a href="https://newsn.net/say/electron-asar-explorer.html" target="_blank" rel="noopener">asar 如何加密解密</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g asar</span><br><span class="line">asar extract 压缩文件  解压文件夹</span><br><span class="line">asar pack 文件夹  压缩文件名</span><br></pre></td></tr></table></figure><h2 id="文本搜索"><a class="markdownIt-Anchor" href="#文本搜索"></a> 文本搜索</h2><p>打开的单篇文章内搜索:</p><blockquote><p>Windows  <code>Control + F</code></p><p>Mac <code>⌘+F</code></p></blockquote><p>文件夹内的搜索</p><blockquote><p>Windows <code>Control + Shift + F</code></p><p>Mac <code>⇧+⌘+F</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vscode&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#vscode&quot;&gt;&lt;/a&gt; VSCode&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Wechseln zwischen Text-Editor und Terminal
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Command+K+S&lt;/code&gt; oder in Menü &lt;code&gt;Code-&amp;gt;Pereferenc-&amp;gt;Hotky&lt;/code&gt;, öffnet Hot-Key Editor Fenster.&lt;/li&gt;
&lt;li&gt;Tip &lt;code&gt;terminal&lt;/code&gt; in Suchfeld, findet die Binding `^``, löscht diese Einstellung.&lt;/li&gt;
&lt;li&gt;Sucht den “workbench.action.terminal.focus”, bindet es mit Key &lt;code&gt;⌃&amp;lt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Sucht den “workbench.action.focusActiveEditorGroup”, bindet es wiederum mit Schlüssel &lt;code&gt;⌃&amp;lt;&lt;/code&gt;, und Wenn-Kondition “terminalFocus”.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="IT" scheme="http://maiernte.github.io/wiki/categories/IT/"/>
    
      <category term="Tools" scheme="http://maiernte.github.io/wiki/categories/IT/Tools/"/>
    
    
      <category term="工具" scheme="http://maiernte.github.io/wiki/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
